{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"source/img/AliPay.jpeg","path":"img/AliPay.jpeg","modified":1,"renderable":0},{"_id":"source/img/Wechat.jpeg","path":"img/Wechat.jpeg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"source/img/css/background-origin.png","path":"img/css/background-origin.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/connectinterceptor01.jpg","path":"img/okhttp/connectinterceptor01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/dispatcher01.jpg","path":"img/okhttp/dispatcher01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/dispatcher02.jpg","path":"img/okhttp/dispatcher02.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/dispatcher02.png","path":"img/okhttp/dispatcher02.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/http1xstream.jpg","path":"img/okhttp/http1xstream.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/okhttpclient01.jpg","path":"img/okhttp/okhttpclient01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/platform01.jpg","path":"img/okhttp/platform01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/platform01.png","path":"img/okhttp/platform01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall01.jpg","path":"img/okhttp/realcall01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall03.jpg","path":"img/okhttp/realcall03.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/streamallocation01.jpg","path":"img/okhttp/streamallocation01.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_new_os_info.jpg","path":"img/study/bwh_kiwi_new_os_info.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_pay.jpg","path":"img/study/bwh_order_pay.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_location.jpg","path":"img/study/bwh_order_location.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_ss_client.jpg","path":"img/study/bwh_ss_client.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_ss_complete.jpg","path":"img/study/bwh_ss_complete.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios01.jp2","path":"img/swift/ios01.jp2","modified":1,"renderable":0},{"_id":"source/img/swift/swift-sin.png","path":"img/swift/swift-sin.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/img/okhttp/callserverinterceptor01.jpg","path":"img/okhttp/callserverinterceptor01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/connectinterceptor01.png","path":"img/okhttp/connectinterceptor01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/okhttpclient01.png","path":"img/okhttp/okhttpclient01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall02.jpg","path":"img/okhttp/realcall02.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/realconnection01.jpg","path":"img/okhttp/realconnection01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/realconnection02.jpg","path":"img/okhttp/realconnection02.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/realinterceptorchain01.jpg","path":"img/okhttp/realinterceptorchain01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/responsebody01.jpg","path":"img/okhttp/responsebody01.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/streamallocation02.jpg","path":"img/okhttp/streamallocation02.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_home.jpg","path":"img/study/bwh_home.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_home_client_area_top.jpg","path":"img/study/bwh_home_client_area_top.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_home_services.jpg","path":"img/study/bwh_home_services.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_home_client_ares.jpg","path":"img/study/bwh_home_client_ares.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_home_services_detail.jpg","path":"img/study/bwh_home_services_detail.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_host.jpg","path":"img/study/bwh_host.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_all.jpg","path":"img/study/bwh_kiwi_all.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_main.jpg","path":"img/study/bwh_kiwi_main.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_main_new.jpg","path":"img/study/bwh_kiwi_main_new.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_new_os.jpg","path":"img/study/bwh_kiwi_new_os.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_ss.jpg","path":"img/study/bwh_kiwi_ss.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_cycle_more.jpg","path":"img/study/bwh_order_cycle_more.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_complete.jpg","path":"img/study/bwh_order_complete.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_cycle.jpg","path":"img/study/bwh_order_cycle.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_ss_install.jpg","path":"img/study/bwh_kiwi_ss_install.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_detail.jpg","path":"img/study/bwh_order_detail.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_detail_pc.jpg","path":"img/study/bwh_order_detail_pc.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_order_pay_complete.jpg","path":"img/study/bwh_order_pay_complete.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_service_info.jpg","path":"img/study/bwh_service_info.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_service_detail.jpg","path":"img/study/bwh_service_detail.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_ss_windows.jpg","path":"img/study/bwh_ss_windows.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_ss_mac_os.jpg","path":"img/study/bwh_ss_mac_os.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios02.jpg","path":"img/swift/ios02.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios01.jpg","path":"img/swift/ios01.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios03.jpg","path":"img/swift/ios03.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios04.jpg","path":"img/swift/ios04.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/swift-playground.png","path":"img/swift/swift-playground.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/http1xstream.png","path":"img/okhttp/http1xstream.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall03.png","path":"img/okhttp/realcall03.png","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_ss_completed.jpg","path":"img/study/bwh_kiwi_ss_completed.jpg","modified":1,"renderable":0},{"_id":"source/img/study/bwh_kiwi_ss_info.jpg","path":"img/study/bwh_kiwi_ss_info.jpg","modified":1,"renderable":0},{"_id":"source/img/swift/ios05.jpg","path":"img/swift/ios05.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/dispatcher01.png","path":"img/okhttp/dispatcher01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall01.png","path":"img/okhttp/realcall01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/streamallocation01.png","path":"img/okhttp/streamallocation01.png","modified":1,"renderable":0},{"_id":"source/img/study/command/bwh_kiwivm_command.jpg","path":"img/study/command/bwh_kiwivm_command.jpg","modified":1,"renderable":0},{"_id":"source/img/study/command/termius_connect.jpg","path":"img/study/command/termius_connect.jpg","modified":1,"renderable":0},{"_id":"source/img/study/jenkins/jenkins_install_complete.jpg","path":"img/study/jenkins/jenkins_install_complete.jpg","modified":1,"renderable":0},{"_id":"source/img/study/jenkins/centenos_jenkins_first.jpg","path":"img/study/jenkins/centenos_jenkins_first.jpg","modified":1,"renderable":0},{"_id":"source/img/study/jenkins/jenkins_install_plugin_first.jpg","path":"img/study/jenkins/jenkins_install_plugin_first.jpg","modified":1,"renderable":0},{"_id":"source/img/study/jenkins/jenkins_install_setting.jpg","path":"img/study/jenkins/jenkins_install_setting.jpg","modified":1,"renderable":0},{"_id":"source/img/okhttp/realcall02.png","path":"img/okhttp/realcall02.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realconnection02.png","path":"img/okhttp/realconnection02.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realinterceptorchain01.png","path":"img/okhttp/realinterceptorchain01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/responsebody01.png","path":"img/okhttp/responsebody01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/callserverinterceptor01.png","path":"img/okhttp/callserverinterceptor01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/realconnection01.png","path":"img/okhttp/realconnection01.png","modified":1,"renderable":0},{"_id":"source/img/okhttp/streamallocation02.png","path":"img/okhttp/streamallocation02.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"0a39b4b6a0abc6d58ac009590d684b269b1f9b1f","modified":1486715444000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1516958338134},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1516958338134},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1516958338134},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1516958338134},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1516958338135},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1516958338135},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1516958338135},{"_id":"themes/yilia/_config.yml","hash":"483ca0b591321151ad39a4aeb6ee289692e05c69","modified":1517284621459},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1516958338144},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1516958338162},{"_id":"source/_posts/about.md","hash":"5fedeeb4ffaf439a14e7b5fa8ff92035575360cd","modified":1484035879000},{"_id":"source/_posts/.DS_Store","hash":"520a605e999b3c33d933942d0cec9e26fe169263","modified":1517297340526},{"_id":"source/_posts/hello-world.md","hash":"ca96e48b017e4cae9646b9a55203e0959eb20c44","modified":1463584421000},{"_id":"source/_posts/git-md.md","hash":"134bd0a0fc1313709e36f83679a4c1b2588da819","modified":1516959050814},{"_id":"source/_posts/mac-os-tips.md","hash":"54d05fa40cc5c632bfed055aa2eb6bff3a9a9f48","modified":1486713327000},{"_id":"source/img/.DS_Store","hash":"6b60e795ce7ab6fdf05861ee013b0d0e0aac95cc","modified":1517282519991},{"_id":"source/img/avatar.png","hash":"bf7ee6f6f9f85c9f788a1e07d47422b151cfe093","modified":1445178492000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516958338127},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1516958338129},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516958312132},{"_id":"themes/yilia/.git/index","hash":"e0bb4e9dc4b1e724d17b9516902fb609b2a67479","modified":1516958338163},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1516958338125},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1516958338136},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1516958338136},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1516958338136},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1516958338136},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1516958338136},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1516958338137},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1516958338136},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1516958338142},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1516958338143},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1516958338143},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1516958338143},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1516958338143},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1516958338143},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1516958338144},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1516958338160},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1516958338162},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1516958338144},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1516958338157},{"_id":"source/img/AliPay.jpeg","hash":"5dbe2d7575cffc7723952613be3ac2077d2aa30b","modified":1516955925145},{"_id":"source/img/Wechat.jpeg","hash":"d4a51681d99f12329357f39f3f674d10553990f9","modified":1516955770287},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516958338142},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1516958338161},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1516958338161},{"_id":"source/_posts/blogs/android-blogs.md","hash":"692b4f73990013c1ade22854a89fce856594d6f3","modified":1514865239380},{"_id":"source/_posts/blogs/blogs.md","hash":"30bad3e6356ee1499a8a1e6850963b4568580b79","modified":1508405630000},{"_id":"source/_posts/blogs/js-blogs.md","hash":"466684dfe8467955642a396810a34d10cb74dc6e","modified":1486450108000},{"_id":"source/_posts/android/android-animation.md","hash":"e76f821b759f61c0eae7b2679a185a237fb2acd0","modified":1482482840000},{"_id":"source/_posts/android/android-guides.md","hash":"97573cb5b4c40ee6380ed440b96d6efde41384a4","modified":1511750431002},{"_id":"source/_posts/android/android-context.md","hash":"6f5db2dac863f6deb5215668b2acb4dc4c006050","modified":1482482843000},{"_id":"source/_posts/android/android-config-activity.md","hash":"ab730c494852e1b19c63ce698917e6755d4fff55","modified":1487834367000},{"_id":"source/_posts/android/android-okhttp.md","hash":"074d0287100335b9e6dda3bb937a1af5b62135b1","modified":1488165220000},{"_id":"source/_posts/android/android-config-am.md","hash":"8f51083275ef0d5e4b916cf77538d76232e26c60","modified":1487820798000},{"_id":"source/_posts/android/android-shape.md","hash":"952467fb57ec74cc6aee10a90818de025d82d702","modified":1486368815000},{"_id":"source/_posts/android/android-okhttp-source.md","hash":"67b63897b4f0adb0a43f094baff6748cb2a486a7","modified":1490606346000},{"_id":"source/_posts/android/android-vr.md","hash":"7c8d24b703f48788732e7634c8808164e16c878a","modified":1493882423000},{"_id":"source/_posts/android/android-tips.md","hash":"92517a528329956504e88ae068cd6e447adf4efc","modified":1516874570624},{"_id":"source/_posts/ios/ios-stanford.md","hash":"b3aca798705be531a4694490238b440cd18f3b18","modified":1486371958000},{"_id":"source/_posts/ios/swift-record.md","hash":"c3d02d3e879113bc35ad4a89d63a80bdb869a167","modified":1482482896000},{"_id":"source/_posts/ios/swift-basic.md","hash":"f36631abb8ab4afb4e237d310df753a26db4aa4a","modified":1482482890000},{"_id":"source/_posts/ios/swift-life-cycle.md","hash":"5568ed2189520bfe0816b0a1f365e3e523f7d82c","modified":1482482893000},{"_id":"source/_posts/ios/swift-skill.md","hash":"20466de4bc399e6c96a6b0fd2e67b8adb8ffa730","modified":1482482900000},{"_id":"source/_posts/hole/hexo-error.md","hash":"02a18e55bc5a844e607386cb92c52bf6f2ae78fc","modified":1517284550401},{"_id":"source/_posts/hole/.DS_Store","hash":"9023338cb8f9d5af070a9d4eae2ee9b1ee4382f9","modified":1517284382942},{"_id":"source/_posts/hole/hole-android-js-wxpay.md","hash":"e80543b81aa1d39cc39145528e77d43f1152a1d5","modified":1517298165092},{"_id":"source/_posts/hole/jenkins-android.md","hash":"e028f485d3423465dd63d9fad31025597a0d9b31","modified":1516959032189},{"_id":"source/_posts/fe/css-background.md","hash":"9078401cda1be535961549ff98858086ad741c62","modified":1517283695729},{"_id":"source/_posts/fe/css-border.md","hash":"6ef493d10630be3d5365c18a10a6fa5f4d0d3f85","modified":1517283701058},{"_id":"source/_posts/fe/react-native-flex.md","hash":"33561c2488d64b0ba9d619db18a7102489ab338f","modified":1517283704988},{"_id":"source/_posts/fe/react-native-text.md","hash":"506e7ced0d97a37b1145f504baa4aaffff114395","modified":1517283708323},{"_id":"source/_posts/fe/react-native-view.md","hash":"e2088d080b5fb3123524cc53152e8a4c14bc2a2a","modified":1517283722344},{"_id":"source/_posts/fe/regular-expression.md","hash":"cc6987a78ffebe2f09524ef9823ef2c0d668a0eb","modified":1517283718588},{"_id":"source/_posts/java/java8-lambda.md","hash":"37263bfdf1389747c033940ae027548666264789","modified":1487745217000},{"_id":"source/_posts/java/java8-stream.md","hash":"afa7c3e4c9d72bc5e38cc0b5cd4ca2a701161d60","modified":1482482875000},{"_id":"source/_posts/life/life.md","hash":"f31e6e62c8fb6bd78a8dd8774cb83020a8b11742","modified":1512467230369},{"_id":"source/_posts/refactor/refactor.md","hash":"e70227c9f4deb76974d41c8293e321df1710a038","modified":1488165451000},{"_id":"source/_posts/refactor/refactor-demo.md","hash":"929bf293e788557cab6fdcdce8451f5af744505c","modified":1490605682000},{"_id":"source/_posts/study/Linux.md","hash":"dfccefebd51fa8636ce5e284c2542976338a489d","modified":1516947351162},{"_id":"source/_posts/study/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517284267291},{"_id":"source/_posts/study/Centenos.md","hash":"b20e8d02a45235081a2f07cf46be48d8e8e09ffc","modified":1516848731373},{"_id":"source/_posts/study/hexo.md","hash":"399ae7090a770845b661f4b9e3aa9ec59ce55cea","modified":1516848840940},{"_id":"source/_posts/study/study-bwh-ss.md","hash":"15da65e13df847a4668863af93ce55d955ff894e","modified":1517295329025},{"_id":"source/_posts/study/study-bwh.md","hash":"1435a8964b94735d24b272ada04ce0524e70e54d","modified":1517295246248},{"_id":"source/_posts/study/study-centenos-jenkins.md","hash":"16b64732b9a1c09e1588ceb93798ad730be937d1","modified":1517296593382},{"_id":"source/_posts/study/study-centenos-ssh.md","hash":"6a3fd71c6e98c176b73aedb878dc1162c6db4de1","modified":1517296580088},{"_id":"source/img/css/background-origin.png","hash":"5c43393b96f914b7f26935ebe82c2eaa447f486e","modified":1499830966000},{"_id":"source/img/okhttp/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1490606025000},{"_id":"source/img/okhttp/connectinterceptor01.jpg","hash":"f335514fb056006d028652e621b77014b1ec630c","modified":1490606060000},{"_id":"source/img/okhttp/dispatcher01.jpg","hash":"6291f27f8666577f4ff248d578c289f57637e24c","modified":1490606077000},{"_id":"source/img/okhttp/dispatcher02.jpg","hash":"70d4a075e52b06090fe9dcaca6bc7195a8ebca8d","modified":1490606090000},{"_id":"source/img/okhttp/dispatcher02.png","hash":"de8050568c44292208816b039338381959c56985","modified":1489133989000},{"_id":"source/img/okhttp/http1xstream.jpg","hash":"1c873ed20778a4f6c0d4efb5ff23a91991badeef","modified":1490606105000},{"_id":"source/img/okhttp/okhttpclient01.jpg","hash":"5786510e637b34afebe8591492bedbf5abb48604","modified":1490606122000},{"_id":"source/img/okhttp/platform01.jpg","hash":"1ea945d7a75bcb43e3074f801448686a82ccf901","modified":1490606136000},{"_id":"source/img/okhttp/platform01.png","hash":"1992019dbb6c165b216e0dcba95914cb28e7ac06","modified":1489136538000},{"_id":"source/img/okhttp/realcall01.jpg","hash":"b11b1d9460a19964a6612b925eb2839237bfb694","modified":1490606149000},{"_id":"source/img/okhttp/realcall03.jpg","hash":"3bd8d80a4fc2f01ba6a43fdc20dcd4937abf8ba0","modified":1490606172000},{"_id":"source/img/okhttp/streamallocation01.jpg","hash":"cc3563c358ec99356ab6e115f781fcfb9fbe48a9","modified":1490606233000},{"_id":"source/img/study/.DS_Store","hash":"579035ecdad9faf759a411dd799022b47158ef56","modified":1517282525813},{"_id":"source/img/study/bwh_kiwi_new_os_info.jpg","hash":"7aba2f5aee9715b0e92f5bcf502aad14feaf4abe","modified":1516865799502},{"_id":"source/img/study/bwh_order_pay.jpg","hash":"2bbeaedd8426dcb5a62759c8cf6f8d129322085a","modified":1516862326834},{"_id":"source/img/study/bwh_order_location.jpg","hash":"3610dfcdd03d1ca938c41417c8d7300a1f8f4f04","modified":1516852830314},{"_id":"source/img/study/bwh_ss_client.jpg","hash":"8055a17779ea5654cdd1ea6cbab6a6abfea80a30","modified":1516868516420},{"_id":"source/img/study/bwh_ss_complete.jpg","hash":"2fa205b565d9ed16d881ea23bc4381df8d6dc205","modified":1516869352056},{"_id":"source/img/swift/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486448567000},{"_id":"source/img/swift/ios01.jp2","hash":"007ab27bca42afcf491f1af09aaa85fa05dcf5e5","modified":1486448577000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516958312134},{"_id":"source/img/swift/swift-sin.png","hash":"7d77224eff300552a1cfd825187cca63f96545c9","modified":1463828804000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516958312133},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516958312135},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516958312134},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516958312136},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1516958312135},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516958312136},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1516958312133},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516958312135},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1516958312136},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1516958312132},{"_id":"themes/yilia/.git/logs/HEAD","hash":"9887f047bb0377740ac44c53c743a82df6793c76","modified":1516958338128},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1516958338137},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1516958338137},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1516958338137},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1516958338137},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1516958338137},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1516958338138},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1516958338139},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1516958338139},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1516958338139},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1516958338142},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1516958338142},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1516958338157},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1516958338158},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1516958338157},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1516958338158},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1516958338158},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1516958338158},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1516958338159},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1516958338159},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1516958338159},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1516958338145},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1516958338145},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1516958338145},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1516958338145},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1516958338146},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1516958338146},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1516958338146},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1516958338146},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1516958338147},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1516958338148},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1516958338149},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1516958338150},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1516958338150},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1516958338150},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1516958338151},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1516958338151},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1516958338151},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1516958338152},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1516958338152},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1516958338152},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1516958338152},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1516958338153},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1516958338153},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1516958338153},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1516958338154},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1516958338153},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1516958338153},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1516958338154},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1516958338154},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1516958338155},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1516958338155},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1516958338155},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1516958338155},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1516958338156},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1516958338155},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1516958338154},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1516958338156},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1516958338156},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1516958338156},{"_id":"source/img/okhttp/callserverinterceptor01.jpg","hash":"c246d272c0208807935457d3125f83ca8613232b","modified":1490606047000},{"_id":"source/img/okhttp/connectinterceptor01.png","hash":"aca6bb68d6f188cf697c90558a97cdcc7e259aef","modified":1489135143000},{"_id":"source/img/okhttp/okhttpclient01.png","hash":"12ed2e62c750014ebfe0dba4d22f7d6b56de4c38","modified":1489132898000},{"_id":"source/img/okhttp/realcall02.jpg","hash":"e1ceef143c374ba93b5554a09694b1c45232b2c6","modified":1490606161000},{"_id":"source/img/okhttp/realconnection01.jpg","hash":"116e40a48b46d6fe8670f300d749f3b4244b91a0","modified":1490606183000},{"_id":"source/img/okhttp/realconnection02.jpg","hash":"8aa8b5cdc99dcf7c7c0c91a0ebd29068d082d256","modified":1490606199000},{"_id":"source/img/okhttp/realinterceptorchain01.jpg","hash":"520441630ed481d48361507b5844f2aae7578fe1","modified":1490606211000},{"_id":"source/img/okhttp/responsebody01.jpg","hash":"a34e8e5cfdc9bf95d33d3d15c8f7ff1abf04f82c","modified":1490606223000},{"_id":"source/img/okhttp/streamallocation02.jpg","hash":"15bc92deec95c949c2d868f8056eda901275d5b0","modified":1490606251000},{"_id":"source/img/study/bwh_home.jpg","hash":"51cffe9c9685e817e78fcd0698ba90ae5668f125","modified":1516871224268},{"_id":"source/img/study/bwh_home_client_area_top.jpg","hash":"f663f922acd26a70f0af57f4e0ce10160219a444","modified":1516863818639},{"_id":"source/img/study/bwh_home_services.jpg","hash":"f957fd1f14fed5ab34cda9a89509172f3f98ea55","modified":1516864068408},{"_id":"source/img/study/bwh_home_client_ares.jpg","hash":"8e3d742491af01ce71ad327a360dc8d9db7e32f9","modified":1516863855491},{"_id":"source/img/study/bwh_home_services_detail.jpg","hash":"1bc513558289f267a6907669089818811eaf48ce","modified":1516864296862},{"_id":"source/img/study/bwh_host.jpg","hash":"b579f820ccda3fcd2ccd6d4c582dca34343e10fa","modified":1516850963900},{"_id":"source/img/study/bwh_kiwi_all.jpg","hash":"8ea6373e39eea619d7cf817ab94821ce0a9ea932","modified":1516868913499},{"_id":"source/img/study/bwh_kiwi_main.jpg","hash":"25ddd8b63c9a62adeadcacfda17c2d738d27f015","modified":1516864821466},{"_id":"source/img/study/bwh_kiwi_main_new.jpg","hash":"36d0224350ce8c7780f6428d3dd5b2cb339693d4","modified":1516866014850},{"_id":"source/img/study/bwh_kiwi_new_os.jpg","hash":"f2c31714e20ed6760fa31e09981c242f9206b9f5","modified":1516865488797},{"_id":"source/img/study/bwh_kiwi_ss.jpg","hash":"215b060216bc5c1a408a9e249b55f2970eb1bc14","modified":1516864754785},{"_id":"source/img/study/bwh_order_cycle_more.jpg","hash":"90496fcbcb5899c6837c396fff230a8f112aa5b6","modified":1516852461476},{"_id":"source/img/study/bwh_order_complete.jpg","hash":"8404e253d78a67c042fb4cc96745506cf6075aef","modified":1516861955309},{"_id":"source/img/study/bwh_order_cycle.jpg","hash":"ca383bbaf276aa06b269983614baf2cd794c42b2","modified":1516852132691},{"_id":"source/img/study/bwh_kiwi_ss_install.jpg","hash":"a1e36cd0285b9ca99c3138f9761d36d3797c4a28","modified":1516866252343},{"_id":"source/img/study/bwh_order_detail.jpg","hash":"0a9019b25504efca6c4da3546f6c73088a5bea29","modified":1516859926308},{"_id":"source/img/study/bwh_order_detail_pc.jpg","hash":"897102bc6964308045357999811e205d6a0af345","modified":1516860141853},{"_id":"source/img/study/bwh_order_pay_complete.jpg","hash":"f7466dececd964f78a4e5f79632946f511e146a4","modified":1516862415574},{"_id":"source/img/study/bwh_service_info.jpg","hash":"2569f5faa1e777f5b268a37a52892931295c68aa","modified":1516870137101},{"_id":"source/img/study/bwh_service_detail.jpg","hash":"2c6fa688b5ded62a89d5dd18e18d54e9c9de361e","modified":1516870276814},{"_id":"source/img/study/bwh_ss_windows.jpg","hash":"fd77de9dc44c5469b879ff36423af330f94b1018","modified":1516867417929},{"_id":"source/img/study/bwh_ss_mac_os.jpg","hash":"d7240ad29c6417ac2b2f2ce51dbd890eb7ce6ccc","modified":1516867705910},{"_id":"source/img/swift/ios02.jpg","hash":"4130fad707d4a29eb2e4e85427ab0c6c86eb46c3","modified":1486371585000},{"_id":"source/img/swift/ios01.jpg","hash":"36e9c27f9a2adbd626f8e2c8046553cba219e18b","modified":1486371572000},{"_id":"source/img/swift/ios03.jpg","hash":"d0c0cade9c51ad15e3d9a46203be6baae8dc4667","modified":1486371598000},{"_id":"source/img/swift/ios04.jpg","hash":"279a5f7cf9d2af32f06fd892612e04c635d2ec4e","modified":1486371609000},{"_id":"source/img/swift/swift-playground.png","hash":"51bf1501eb27de68559f14a293f0d7273166de95","modified":1463829401000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1516958338142},{"_id":"source/img/okhttp/http1xstream.png","hash":"60287e9c7a3ba895e70894270d1cae1c92bf5dd6","modified":1489138419000},{"_id":"source/img/okhttp/realcall03.png","hash":"df86d3f53cabe41b33070cbe01a213d5ec08695a","modified":1489134728000},{"_id":"source/img/study/bwh_kiwi_ss_completed.jpg","hash":"98322b8919827aa9d7adf2627c2428b1f6b65a4e","modified":1516866562848},{"_id":"source/img/study/bwh_kiwi_ss_info.jpg","hash":"d6a12ad5b6b9618023bb1a53dda7307f9e5a48b3","modified":1516866977620},{"_id":"source/img/swift/ios05.jpg","hash":"706d3c48b5d1d7e8b362fbbea5a48e757f98f4e9","modified":1486371621000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1516958338128},{"_id":"themes/yilia/.git/objects/pack/pack-75c047416b44f1bc7cb862deac6b01cd625f6aa2.idx","hash":"a4b9c9d6d9a4ede9c9867de96eadab4b0f6b29b3","modified":1516958338110},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1516958338139},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1516958338139},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1516958338140},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1516958338141},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1516958338141},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1516958338147},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1516958338147},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1516958338147},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1516958338147},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1516958338148},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1516958338148},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1516958338149},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1516958338149},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1516958338149},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1516958338150},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1516958338150},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1516958338150},{"_id":"source/img/okhttp/dispatcher01.png","hash":"df05338891ca71520221c6e59d39433de63a66be","modified":1489133370000},{"_id":"source/img/okhttp/realcall01.png","hash":"fb060edbb560c4ee860e5cd7269780c0fe92124e","modified":1489133236000},{"_id":"source/img/okhttp/streamallocation01.png","hash":"84877023749d024938e07f5552be91a1dee3130d","modified":1489135385000},{"_id":"source/img/study/command/bwh_kiwivm_command.jpg","hash":"c043eded88b5bf45a5d6176b5ad2247434786fc0","modified":1517293727809},{"_id":"source/img/study/command/termius_connect.jpg","hash":"3ee3a3df1b1e867176de7fcbb5bff53d9cdd85ea","modified":1517294084880},{"_id":"source/img/study/jenkins/jenkins_install_complete.jpg","hash":"1f20a36ebf5f02f9992ff9f2a5f6d83ee988f86a","modified":1517282953230},{"_id":"source/img/study/jenkins/centenos_jenkins_first.jpg","hash":"5df30946bff364687242cba76365bcdd5332f006","modified":1517282077833},{"_id":"source/img/study/jenkins/jenkins_install_plugin_first.jpg","hash":"6fc8663d8a50a680636e584ec858c7299b470e61","modified":1517282583154},{"_id":"source/img/study/jenkins/jenkins_install_setting.jpg","hash":"c17320d603b1b3bd76739768ff60434fbafc9794","modified":1517282751887},{"_id":"source/img/okhttp/realcall02.png","hash":"1219c2af91ba0a50a0a913ed7f5d5b521ae4146c","modified":1489134223000},{"_id":"source/img/okhttp/realconnection02.png","hash":"eeed8c4bd1398b02ed73929ff4f9fe430febf15b","modified":1489136379000},{"_id":"source/img/okhttp/realinterceptorchain01.png","hash":"af50327d33614287738fc874cd149a5fd298a2c2","modified":1489135020000},{"_id":"source/img/okhttp/responsebody01.png","hash":"eea70d7688782ee62b0a21866548a09e38526dda","modified":1489139041000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"9887f047bb0377740ac44c53c743a82df6793c76","modified":1516958338128},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516958338127},{"_id":"source/img/okhttp/callserverinterceptor01.png","hash":"1bcdd27bcd57abaa2e1fa4118492784a2b1c00c2","modified":1489138041000},{"_id":"source/img/okhttp/realconnection01.png","hash":"f7dcfcdeb9a0d18dc88230172728dec23c0b1eb9","modified":1489144479000},{"_id":"source/img/okhttp/streamallocation02.png","hash":"a54be015fd8d3beff372e9adbd376935190e7898","modified":1489135756000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"9887f047bb0377740ac44c53c743a82df6793c76","modified":1516958338127},{"_id":"themes/yilia/.git/objects/pack/pack-75c047416b44f1bc7cb862deac6b01cd625f6aa2.pack","hash":"e6bea525ef21bdc86db6437136fc0fbc7f1fa0ca","modified":1516958338110},{"_id":"public/content.json","hash":"8f532b13871a0d8ed7a92c00025fe420b7a6ffcb","modified":1517391092423},{"_id":"public/2018/01/30/hole/hole-android-js-wxpay/index.html","hash":"09b298a5957f2e36c04759236a76269a873a8574","modified":1517391092868},{"_id":"public/2018/01/30/study/study-centenos-ssh/index.html","hash":"931378e9e2b27abe1e7f38cb6bdddb393a58e39e","modified":1517391092868},{"_id":"public/2018/01/30/hole/hexo-error/index.html","hash":"1ed4ee4ed2455a34818ea7371bc483a743b40267","modified":1517391092868},{"_id":"public/2018/01/29/study/study-centenos-jenkins/index.html","hash":"b989a0f0add2443b37c862a7990ec0765fa90510","modified":1517391092868},{"_id":"public/2018/01/26/study/study-bwh-ss/index.html","hash":"35c2efcdfa82d0d5b77e768180fc87492f2ad111","modified":1517391092869},{"_id":"public/2018/01/25/study/Linux/index.html","hash":"3f7da6bbc9dcca24aef4a128960b5c5e7ae18e96","modified":1517391092869},{"_id":"public/2018/01/25/study/Centenos/index.html","hash":"86921976580a4174a2f0114d43e0b8d8ce00a666","modified":1517391092869},{"_id":"public/2018/01/25/study/study-bwh/index.html","hash":"e5c547d1f26b929d88066b33aeae35014bff08cb","modified":1517391092869},{"_id":"public/2017/07/12/fe/css-background/index.html","hash":"78c5227bb593b90bfa59cbcfa43364c12818721f","modified":1517391092869},{"_id":"public/2017/07/11/fe/css-border/index.html","hash":"ef5ac3e2fb24ec5e0590015952b96411d34c8914","modified":1517391092869},{"_id":"public/2017/07/07/hole/jenkins-android/index.html","hash":"dc6a92059ec5c44010ca63892def1274edbef822","modified":1517391092869},{"_id":"public/2017/05/09/git-md/index.html","hash":"9f114959bf4c351d482432d63478c024e12653d4","modified":1517391092869},{"_id":"public/2017/05/03/life/life/index.html","hash":"ddf0539b75bb3afb78941499074248985b4dd5c0","modified":1517391092869},{"_id":"public/2017/05/03/android/android-vr/index.html","hash":"741623f3bbf8e080351b5a27775bafeadd121a9a","modified":1517391092869},{"_id":"public/2017/03/21/refactor/refactor-demo/index.html","hash":"b7a026f141cb557702ad44a240e6f923ce5f1f7c","modified":1517391092869},{"_id":"public/2017/03/10/android/android-okhttp-source/index.html","hash":"e085611aa079424894d227f1380f7600603a9afb","modified":1517391092870},{"_id":"public/2017/02/23/android/android-config-activity/index.html","hash":"4bee735f8fe162edc1a6307a8a40830ba87fdf82","modified":1517391092870},{"_id":"public/2017/02/22/android/android-config-am/index.html","hash":"cfcb83f63767d0694e6e5223e5fda0bd37c7dfa8","modified":1517391092870},{"_id":"public/2017/02/13/android/android-guides/index.html","hash":"588f9f78a88aa505c4408216acbd40b00384a740","modified":1517391092870},{"_id":"public/2017/02/10/mac-os-tips/index.html","hash":"084f0f11c8d730c036c97c86c7ec5707bd7db2f1","modified":1517391092870},{"_id":"public/2017/02/09/refactor/refactor/index.html","hash":"0d8459f8c6f8736e5efa5ce1b28d6498143431f0","modified":1517391092870},{"_id":"public/2017/02/06/android/android-okhttp/index.html","hash":"7e04659519821caec7f7a460f4f0e451818ffea0","modified":1517391092870},{"_id":"public/2017/01/10/blogs/js-blogs/index.html","hash":"163ecada9528bf07c11ffbe412b91ab8a85134b9","modified":1517391092871},{"_id":"public/2017/01/10/blogs/android-blogs/index.html","hash":"d71f5a7ddcc625bcab069fa7080c325e11d26558","modified":1517391092871},{"_id":"public/2017/01/10/blogs/blogs/index.html","hash":"b2f0814e7141d4914982508c4668e5c94f2c53bc","modified":1517391092871},{"_id":"public/2016/08/29/fe/react-native-flex/index.html","hash":"560c3274cc2650baac537765e97dfd0094f1e9f2","modified":1517391092871},{"_id":"public/2016/08/22/fe/react-native-text/index.html","hash":"8b90938f3d5186a8a3a6417a3fdf40bb07d9a055","modified":1517391092871},{"_id":"public/2016/08/22/fe/react-native-view/index.html","hash":"c24857d76dd3eae04cd78745c2ff8c341d9f405f","modified":1517391092871},{"_id":"public/2016/08/22/study/hexo/index.html","hash":"b4628444e8de4a7e135daf346939ec9b73127fb4","modified":1517391092871},{"_id":"public/2016/06/30/ios/swift-life-cycle/index.html","hash":"cfcd8899c956d683d7fc243bf7b4871fe29b4f9d","modified":1517391092871},{"_id":"public/2016/06/22/ios/ios-stanford/index.html","hash":"2874413e156a3b40fe3cc0259889c27f0b12ad0f","modified":1517391092871},{"_id":"public/2016/06/22/ios/swift-record/index.html","hash":"eaa1c79498d166428f91a48da6c583f3642a3c4b","modified":1517391092872},{"_id":"public/2016/05/31/android/android-tips/index.html","hash":"40892786b4648ddc70872904728e4b56ada53563","modified":1517391092872},{"_id":"public/2016/05/23/fe/regular-expression/index.html","hash":"516fe04ad4d49b7dd2782022532ac606767b2897","modified":1517391092872},{"_id":"public/2016/05/22/ios/swift-skill/index.html","hash":"e23ba5a5bc8a9c8268e9cc352e3369cc8c2e95fe","modified":1517391092872},{"_id":"public/2016/05/21/android/android-context/index.html","hash":"a8e6361f586e83af77c9a96ebf56f9d4f0907b4d","modified":1517391092872},{"_id":"public/2016/05/21/ios/swift-basic/index.html","hash":"758448329934a7a0ef649e8a62689a54390136bb","modified":1517391092872},{"_id":"public/2016/05/19/java/java8-stream/index.html","hash":"68a23d676631edecf8955ad15f425ee72330e284","modified":1517391092873},{"_id":"public/2016/05/19/java/java8-lambda/index.html","hash":"7ecd74e626fbbf85df83d230618143a62ca98f36","modified":1517391092873},{"_id":"public/2016/05/19/android/android-animation/index.html","hash":"3ef1e327b9cf18cef9eff977a8c679005c636a21","modified":1517391092873},{"_id":"public/2016/05/18/about/index.html","hash":"7eba7a04fdd8b8772d9fe046c533aa7102bde1e7","modified":1517391092873},{"_id":"public/2016/05/18/android/android-shape/index.html","hash":"66043c3fe86fb5a3397ddbd7278a18c41fda91d1","modified":1517391092873},{"_id":"public/2016/05/18/hello-world/index.html","hash":"8ebe56cec8c858062a1c68f0febe464a64fdd15b","modified":1517391092874},{"_id":"public/archives/index.html","hash":"5c5aaa8f9419900a2b5c999208237320789f1492","modified":1517391092874},{"_id":"public/archives/2016/index.html","hash":"58d7bfd060499839b2a6a3b774942dbcec8a96be","modified":1517391092874},{"_id":"public/archives/2016/05/index.html","hash":"8fe7fdba9b1d69381c53fda2b85f9fbcfbd8a354","modified":1517391092874},{"_id":"public/archives/2016/06/index.html","hash":"055f163be0ad7974c97928fef6d9dc8d0719c585","modified":1517391092874},{"_id":"public/archives/2016/08/index.html","hash":"bbe5856db87ef6aa94db11235164568eacb3eee0","modified":1517391092875},{"_id":"public/archives/2017/index.html","hash":"15063268313e8bc88761d565923b1fd09cb52047","modified":1517391092875},{"_id":"public/archives/2017/01/index.html","hash":"db8d0240e281a5aa4764ae301f26574f504e5ae9","modified":1517391092875},{"_id":"public/archives/2017/02/index.html","hash":"44954596fb3f5d51c3f4f7f7f2f9173ad7764e37","modified":1517391092875},{"_id":"public/archives/2017/03/index.html","hash":"654b70fac3e29a7bfb470da55f67de843422d4f1","modified":1517391092875},{"_id":"public/archives/2017/05/index.html","hash":"d9fbda2439274d45515c35cf25868efcdcab99b0","modified":1517391092875},{"_id":"public/archives/2017/07/index.html","hash":"40f9547da39baaa67bfd165d9bac5c1b9031a8ee","modified":1517391092875},{"_id":"public/archives/2018/index.html","hash":"7ed4b655cb61403608a67c048f76597250239565","modified":1517391092875},{"_id":"public/archives/2018/01/index.html","hash":"640fbce84f2f2168d9fdeb65c6aa9fdc84a02ae8","modified":1517391092875},{"_id":"public/index.html","hash":"54f1a09db4176be42525e9bd316221c168c7a497","modified":1517391092875},{"_id":"public/page/2/index.html","hash":"c6fcdef225ee21b970024e99e333a51fe1bdcf25","modified":1517391092875},{"_id":"public/page/3/index.html","hash":"3ad600beec505adb123b494189a201685f59dd38","modified":1517391092876},{"_id":"public/page/4/index.html","hash":"a0d29f8c61e526fa66f6299b48ee554ea0aa5963","modified":1517391092876},{"_id":"public/page/5/index.html","hash":"1d631b28e37fa6eb28a26af89ffe656fb6a3e622","modified":1517391092876},{"_id":"public/tags/me/index.html","hash":"9a33dcfea9e9d78bc5119052d5c40215481be8ef","modified":1517391092876},{"_id":"public/tags/apple/index.html","hash":"f7af1981824fdafb8ee8828e57570c2c96ee3cb5","modified":1517391092876},{"_id":"public/tags/blog/index.html","hash":"9a141408c786e0b34cdbe1af67f75f0d3d99beb2","modified":1517391092876},{"_id":"public/tags/android/index.html","hash":"0f2fb2d0e12d3a2baebbf17e854d86a31398e45f","modified":1517391092876},{"_id":"public/tags/ios/index.html","hash":"c21e558ad1ed20b182c2474668ca02d8e43e91d9","modified":1517391092876},{"_id":"public/tags/stanford/index.html","hash":"202c5721b29d0ab717931843161a2bde4a701eb9","modified":1517391092876},{"_id":"public/tags/hole/index.html","hash":"1ea2fb54772cb560fc22be9c923ec7dc3ab2c7ee","modified":1517391092877},{"_id":"public/tags/fe/index.html","hash":"1b5780d2bd89d0fb45895584745bf178cbd3076c","modified":1517391092877},{"_id":"public/tags/java/index.html","hash":"fa172b0f1db9199b1662cefe45603bda5ab127f2","modified":1517391092877},{"_id":"public/tags/lambda/index.html","hash":"8c205ecce206f4651dc240b6081493f4862aa58c","modified":1517391092877},{"_id":"public/tags/stream/index.html","hash":"4d2afcd73fac7778089be0a043c8eca4fdeb4e00","modified":1517391092877},{"_id":"public/tags/life/index.html","hash":"8b7d0ab0dfc886ca775c3ac58b44ce3d91b75e78","modified":1517391092877},{"_id":"public/tags/study/index.html","hash":"d98d9a90cc9dfafc28a1b03178681edac3fce9b4","modified":1517391092877},{"_id":"public/tags/read/index.html","hash":"78df99d128911fed1296d206f6457f52d40938ee","modified":1517391092877},{"_id":"public/img/avatar.png","hash":"bf7ee6f6f9f85c9f788a1e07d47422b151cfe093","modified":1517391092890},{"_id":"public/img/css/background-origin.png","hash":"5c43393b96f914b7f26935ebe82c2eaa447f486e","modified":1517391092890},{"_id":"public/img/okhttp/connectinterceptor01.jpg","hash":"f335514fb056006d028652e621b77014b1ec630c","modified":1517391092890},{"_id":"public/img/okhttp/dispatcher01.jpg","hash":"6291f27f8666577f4ff248d578c289f57637e24c","modified":1517391092890},{"_id":"public/img/okhttp/dispatcher02.jpg","hash":"70d4a075e52b06090fe9dcaca6bc7195a8ebca8d","modified":1517391092890},{"_id":"public/img/okhttp/okhttpclient01.jpg","hash":"5786510e637b34afebe8591492bedbf5abb48604","modified":1517391092890},{"_id":"public/img/okhttp/platform01.jpg","hash":"1ea945d7a75bcb43e3074f801448686a82ccf901","modified":1517391092890},{"_id":"public/img/okhttp/dispatcher02.png","hash":"de8050568c44292208816b039338381959c56985","modified":1517391092890},{"_id":"public/img/okhttp/http1xstream.jpg","hash":"1c873ed20778a4f6c0d4efb5ff23a91991badeef","modified":1517391092891},{"_id":"public/img/okhttp/platform01.png","hash":"1992019dbb6c165b216e0dcba95914cb28e7ac06","modified":1517391092891},{"_id":"public/img/okhttp/realcall01.jpg","hash":"b11b1d9460a19964a6612b925eb2839237bfb694","modified":1517391092891},{"_id":"public/img/okhttp/streamallocation01.jpg","hash":"cc3563c358ec99356ab6e115f781fcfb9fbe48a9","modified":1517391092891},{"_id":"public/img/okhttp/realcall03.jpg","hash":"3bd8d80a4fc2f01ba6a43fdc20dcd4937abf8ba0","modified":1517391092891},{"_id":"public/img/study/bwh_kiwi_new_os_info.jpg","hash":"7aba2f5aee9715b0e92f5bcf502aad14feaf4abe","modified":1517391092891},{"_id":"public/img/study/bwh_order_pay.jpg","hash":"2bbeaedd8426dcb5a62759c8cf6f8d129322085a","modified":1517391092891},{"_id":"public/img/study/bwh_order_location.jpg","hash":"3610dfcdd03d1ca938c41417c8d7300a1f8f4f04","modified":1517391092891},{"_id":"public/img/study/bwh_ss_client.jpg","hash":"8055a17779ea5654cdd1ea6cbab6a6abfea80a30","modified":1517391092891},{"_id":"public/img/study/bwh_ss_complete.jpg","hash":"2fa205b565d9ed16d881ea23bc4381df8d6dc205","modified":1517391092891},{"_id":"public/img/swift/swift-sin.png","hash":"7d77224eff300552a1cfd825187cca63f96545c9","modified":1517391092891},{"_id":"public/img/swift/ios01.jp2","hash":"007ab27bca42afcf491f1af09aaa85fa05dcf5e5","modified":1517391092891},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1517391092891},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1517391092891},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1517391092891},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1517391092891},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1517391092891},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1517391092891},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1517391092891},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1517391092891},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1517391092891},{"_id":"public/img/AliPay.jpeg","hash":"5dbe2d7575cffc7723952613be3ac2077d2aa30b","modified":1517391092900},{"_id":"public/img/Wechat.jpeg","hash":"d4a51681d99f12329357f39f3f674d10553990f9","modified":1517391092900},{"_id":"public/img/okhttp/callserverinterceptor01.jpg","hash":"c246d272c0208807935457d3125f83ca8613232b","modified":1517391092901},{"_id":"public/img/okhttp/connectinterceptor01.png","hash":"aca6bb68d6f188cf697c90558a97cdcc7e259aef","modified":1517391092901},{"_id":"public/img/okhttp/okhttpclient01.png","hash":"12ed2e62c750014ebfe0dba4d22f7d6b56de4c38","modified":1517391092901},{"_id":"public/img/okhttp/realcall02.jpg","hash":"e1ceef143c374ba93b5554a09694b1c45232b2c6","modified":1517391092902},{"_id":"public/img/okhttp/realconnection01.jpg","hash":"116e40a48b46d6fe8670f300d749f3b4244b91a0","modified":1517391092902},{"_id":"public/img/okhttp/realinterceptorchain01.jpg","hash":"520441630ed481d48361507b5844f2aae7578fe1","modified":1517391092902},{"_id":"public/img/study/bwh_home.jpg","hash":"51cffe9c9685e817e78fcd0698ba90ae5668f125","modified":1517391092902},{"_id":"public/img/okhttp/realconnection02.jpg","hash":"8aa8b5cdc99dcf7c7c0c91a0ebd29068d082d256","modified":1517391092902},{"_id":"public/img/okhttp/responsebody01.jpg","hash":"a34e8e5cfdc9bf95d33d3d15c8f7ff1abf04f82c","modified":1517391092902},{"_id":"public/img/study/bwh_home_client_area_top.jpg","hash":"f663f922acd26a70f0af57f4e0ce10160219a444","modified":1517391092902},{"_id":"public/img/study/bwh_home_services.jpg","hash":"f957fd1f14fed5ab34cda9a89509172f3f98ea55","modified":1517391092902},{"_id":"public/img/okhttp/streamallocation02.jpg","hash":"15bc92deec95c949c2d868f8056eda901275d5b0","modified":1517391092902},{"_id":"public/img/study/bwh_home_client_ares.jpg","hash":"8e3d742491af01ce71ad327a360dc8d9db7e32f9","modified":1517391092902},{"_id":"public/img/study/bwh_host.jpg","hash":"b579f820ccda3fcd2ccd6d4c582dca34343e10fa","modified":1517391092902},{"_id":"public/img/study/bwh_kiwi_all.jpg","hash":"8ea6373e39eea619d7cf817ab94821ce0a9ea932","modified":1517391092903},{"_id":"public/img/study/bwh_kiwi_main.jpg","hash":"25ddd8b63c9a62adeadcacfda17c2d738d27f015","modified":1517391092903},{"_id":"public/img/study/bwh_kiwi_new_os.jpg","hash":"f2c31714e20ed6760fa31e09981c242f9206b9f5","modified":1517391092903},{"_id":"public/img/study/bwh_kiwi_main_new.jpg","hash":"36d0224350ce8c7780f6428d3dd5b2cb339693d4","modified":1517391092903},{"_id":"public/img/study/bwh_home_services_detail.jpg","hash":"1bc513558289f267a6907669089818811eaf48ce","modified":1517391092903},{"_id":"public/img/study/bwh_kiwi_ss.jpg","hash":"215b060216bc5c1a408a9e249b55f2970eb1bc14","modified":1517391092903},{"_id":"public/img/study/bwh_kiwi_ss_install.jpg","hash":"a1e36cd0285b9ca99c3138f9761d36d3797c4a28","modified":1517391092903},{"_id":"public/img/study/bwh_order_cycle_more.jpg","hash":"90496fcbcb5899c6837c396fff230a8f112aa5b6","modified":1517391092903},{"_id":"public/img/study/bwh_order_cycle.jpg","hash":"ca383bbaf276aa06b269983614baf2cd794c42b2","modified":1517391092903},{"_id":"public/img/study/bwh_order_detail.jpg","hash":"0a9019b25504efca6c4da3546f6c73088a5bea29","modified":1517391092903},{"_id":"public/img/study/bwh_order_complete.jpg","hash":"8404e253d78a67c042fb4cc96745506cf6075aef","modified":1517391092904},{"_id":"public/img/study/bwh_order_detail_pc.jpg","hash":"897102bc6964308045357999811e205d6a0af345","modified":1517391092904},{"_id":"public/img/study/bwh_order_pay_complete.jpg","hash":"f7466dececd964f78a4e5f79632946f511e146a4","modified":1517391092904},{"_id":"public/img/study/bwh_service_info.jpg","hash":"2569f5faa1e777f5b268a37a52892931295c68aa","modified":1517391092904},{"_id":"public/img/study/bwh_service_detail.jpg","hash":"2c6fa688b5ded62a89d5dd18e18d54e9c9de361e","modified":1517391092904},{"_id":"public/img/swift/ios02.jpg","hash":"4130fad707d4a29eb2e4e85427ab0c6c86eb46c3","modified":1517391092904},{"_id":"public/img/swift/ios01.jpg","hash":"36e9c27f9a2adbd626f8e2c8046553cba219e18b","modified":1517391092904},{"_id":"public/img/study/bwh_ss_windows.jpg","hash":"fd77de9dc44c5469b879ff36423af330f94b1018","modified":1517391092904},{"_id":"public/img/study/bwh_ss_mac_os.jpg","hash":"d7240ad29c6417ac2b2f2ce51dbd890eb7ce6ccc","modified":1517391092904},{"_id":"public/img/swift/ios03.jpg","hash":"d0c0cade9c51ad15e3d9a46203be6baae8dc4667","modified":1517391092905},{"_id":"public/img/swift/ios04.jpg","hash":"279a5f7cf9d2af32f06fd892612e04c635d2ec4e","modified":1517391092905},{"_id":"public/img/swift/swift-playground.png","hash":"51bf1501eb27de68559f14a293f0d7273166de95","modified":1517391092905},{"_id":"public/img/study/command/bwh_kiwivm_command.jpg","hash":"c043eded88b5bf45a5d6176b5ad2247434786fc0","modified":1517391092905},{"_id":"public/img/study/command/termius_connect.jpg","hash":"3ee3a3df1b1e867176de7fcbb5bff53d9cdd85ea","modified":1517391092905},{"_id":"public/img/study/jenkins/jenkins_install_complete.jpg","hash":"1f20a36ebf5f02f9992ff9f2a5f6d83ee988f86a","modified":1517391092905},{"_id":"public/img/study/jenkins/jenkins_install_plugin_first.jpg","hash":"6fc8663d8a50a680636e584ec858c7299b470e61","modified":1517391092905},{"_id":"public/img/study/jenkins/centenos_jenkins_first.jpg","hash":"5df30946bff364687242cba76365bcdd5332f006","modified":1517391092905},{"_id":"public/img/study/jenkins/jenkins_install_setting.jpg","hash":"c17320d603b1b3bd76739768ff60434fbafc9794","modified":1517391092905},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1517391092910},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1517391092910},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1517391092910},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1517391092910},{"_id":"public/img/okhttp/realcall03.png","hash":"df86d3f53cabe41b33070cbe01a213d5ec08695a","modified":1517391092910},{"_id":"public/img/study/bwh_kiwi_ss_completed.jpg","hash":"98322b8919827aa9d7adf2627c2428b1f6b65a4e","modified":1517391092910},{"_id":"public/img/okhttp/http1xstream.png","hash":"60287e9c7a3ba895e70894270d1cae1c92bf5dd6","modified":1517391092910},{"_id":"public/img/study/bwh_kiwi_ss_info.jpg","hash":"d6a12ad5b6b9618023bb1a53dda7307f9e5a48b3","modified":1517391092910},{"_id":"public/img/swift/ios05.jpg","hash":"706d3c48b5d1d7e8b362fbbea5a48e757f98f4e9","modified":1517391092910},{"_id":"public/img/okhttp/dispatcher01.png","hash":"df05338891ca71520221c6e59d39433de63a66be","modified":1517391092916},{"_id":"public/img/okhttp/realcall01.png","hash":"fb060edbb560c4ee860e5cd7269780c0fe92124e","modified":1517391092916},{"_id":"public/img/okhttp/streamallocation01.png","hash":"84877023749d024938e07f5552be91a1dee3130d","modified":1517391092916},{"_id":"public/img/okhttp/realcall02.png","hash":"1219c2af91ba0a50a0a913ed7f5d5b521ae4146c","modified":1517391092922},{"_id":"public/img/okhttp/realconnection02.png","hash":"eeed8c4bd1398b02ed73929ff4f9fe430febf15b","modified":1517391092923},{"_id":"public/img/okhttp/realinterceptorchain01.png","hash":"af50327d33614287738fc874cd149a5fd298a2c2","modified":1517391092923},{"_id":"public/img/okhttp/responsebody01.png","hash":"eea70d7688782ee62b0a21866548a09e38526dda","modified":1517391092923},{"_id":"public/img/okhttp/callserverinterceptor01.png","hash":"1bcdd27bcd57abaa2e1fa4118492784a2b1c00c2","modified":1517391092924},{"_id":"public/img/okhttp/realconnection01.png","hash":"f7dcfcdeb9a0d18dc88230172728dec23c0b1eb9","modified":1517391092924},{"_id":"public/img/okhttp/streamallocation02.png","hash":"a54be015fd8d3beff372e9adbd376935190e7898","modified":1517391092925}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"about","date":"2016-05-18T15:16:31.000Z","_content":"\n人会长大三次。\n\n第一次是在发现自己不是世界中心的时候。\n\n第二次是在发现即使再怎么努力，终究还是有些事令人无能为力的时候。\n\n第三次是在明知道有些事可能会无能为力。但还是会尽力争取的时候。","source":"_posts/about.md","raw":"---\ntitle: about\ndate: 2016-05-18 23:16:31\ntags: me\n---\n\n人会长大三次。\n\n第一次是在发现自己不是世界中心的时候。\n\n第二次是在发现即使再怎么努力，终究还是有些事令人无能为力的时候。\n\n第三次是在明知道有些事可能会无能为力。但还是会尽力争取的时候。","slug":"about","published":1,"updated":"2017-01-10T08:11:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6s50000fq9muyypxqa3","content":"<p>人会长大三次。</p>\n<p>第一次是在发现自己不是世界中心的时候。</p>\n<p>第二次是在发现即使再怎么努力，终究还是有些事令人无能为力的时候。</p>\n<p>第三次是在明知道有些事可能会无能为力。但还是会尽力争取的时候。</p>\n","excerpt":"","more":"<p>人会长大三次。</p>\n<p>第一次是在发现自己不是世界中心的时候。</p>\n<p>第二次是在发现即使再怎么努力，终究还是有些事令人无能为力的时候。</p>\n<p>第三次是在明知道有些事可能会无能为力。但还是会尽力争取的时候。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- More -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- More -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-05-18T09:17:35.000Z","updated":"2016-05-18T15:13:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6s90001fq9mz5t5jstm","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"git.md","date":"2017-05-09T02:47:43.000Z","_content":"\n### git命令\n\n**查看分支**\n\n```java\n// 查看本地所有分支\ngit branch\n// 查看远程所有分支\ngit branch -r\n// 查看所有本地分支和远程分支\ngit branch -a\n```\n<!-- More -->\n\n**创建/切换分支**\n\n```java\n// 如果存在dev分支，则切换到该分支，否则新建分支\ngit checkout dev\n// 创建本地dev1分支,然后切换到dev1分支\ngit checkout -b dev1 => git branch dev1 git checkout dev1\n// 从远程分支dev创建本地分支dev1\ngit checkout -b dev1 origin/dev\n```\n\n**合并分支**\n\n```java\n// 合并dev1分支，这种模式下，删除分支后，会丢掉分支信息，可以用 --no-ff方法\ngit merge dev1\ngit merge --no-ff -m \"merge with no-ff\" dev1\n// 如果分支很多，这个分支历史可能就会变得很复杂了，可以使用 rebase，提交的历史会保持线性\ngit rebase dev1分支\n```\n\n**删除分支**\n\n```java\n// 删除分支，如果没有完成合并会有提示\ngit branch -d dev1\n// 强删除\ngit branch -D dev1\n  \n// 删除远程分支\ngit push origin --delete dev\nor\ngit push origin :dev\n```\n\n**提交分支**\n\n```java\n// 这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。\ngit push origin master:dev\n// 本地master提交到远程主分支master\ngit push origin master => git push origin master:master\n```\n\n**跟踪远程分支**\n\n从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git pull/push，Git 会自行推断应该向哪个服务器的哪个分支更新/推送数据。\n\n```java\n// 建立追踪关系\ngit branch -u origin/dev master\nor\ngit branch --set-upstream-to origin/dev master\n// 查看所有分支跟踪关系\ngit branch -vv\n```\n\n**打Tag**\n\n```java\n// 打tag\ngit tag -a v1.0 -m 'msg'\n// 推送tag\ngit push origin v1.0\n```\n\ngit push origin <branch> 推送分支\n\ngit rebase <branch> 合并分支\n\ngit tag -a <tag> -m 'msg' 打tag\n\ngit push orign <tag>  推送tag\n\ngit branch --set-upstream-to=origin/4.6.0 4.6.0 关连分支","source":"_posts/git-md.md","raw":"---\ntitle: git.md\ndate: 2017-05-09 10:47:43\ntags:\n---\n\n### git命令\n\n**查看分支**\n\n```java\n// 查看本地所有分支\ngit branch\n// 查看远程所有分支\ngit branch -r\n// 查看所有本地分支和远程分支\ngit branch -a\n```\n<!-- More -->\n\n**创建/切换分支**\n\n```java\n// 如果存在dev分支，则切换到该分支，否则新建分支\ngit checkout dev\n// 创建本地dev1分支,然后切换到dev1分支\ngit checkout -b dev1 => git branch dev1 git checkout dev1\n// 从远程分支dev创建本地分支dev1\ngit checkout -b dev1 origin/dev\n```\n\n**合并分支**\n\n```java\n// 合并dev1分支，这种模式下，删除分支后，会丢掉分支信息，可以用 --no-ff方法\ngit merge dev1\ngit merge --no-ff -m \"merge with no-ff\" dev1\n// 如果分支很多，这个分支历史可能就会变得很复杂了，可以使用 rebase，提交的历史会保持线性\ngit rebase dev1分支\n```\n\n**删除分支**\n\n```java\n// 删除分支，如果没有完成合并会有提示\ngit branch -d dev1\n// 强删除\ngit branch -D dev1\n  \n// 删除远程分支\ngit push origin --delete dev\nor\ngit push origin :dev\n```\n\n**提交分支**\n\n```java\n// 这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。\ngit push origin master:dev\n// 本地master提交到远程主分支master\ngit push origin master => git push origin master:master\n```\n\n**跟踪远程分支**\n\n从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git pull/push，Git 会自行推断应该向哪个服务器的哪个分支更新/推送数据。\n\n```java\n// 建立追踪关系\ngit branch -u origin/dev master\nor\ngit branch --set-upstream-to origin/dev master\n// 查看所有分支跟踪关系\ngit branch -vv\n```\n\n**打Tag**\n\n```java\n// 打tag\ngit tag -a v1.0 -m 'msg'\n// 推送tag\ngit push origin v1.0\n```\n\ngit push origin <branch> 推送分支\n\ngit rebase <branch> 合并分支\n\ngit tag -a <tag> -m 'msg' 打tag\n\ngit push orign <tag>  推送tag\n\ngit branch --set-upstream-to=origin/4.6.0 4.6.0 关连分支","slug":"git-md","published":1,"updated":"2018-01-26T09:30:50.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6sf0003fq9m3s6pzidu","content":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><p><strong>查看分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 查看本地所有分支</span></div><div class=\"line\">git branch</div><div class=\"line\"><span class=\"comment\">// 查看远程所有分支</span></div><div class=\"line\">git branch -r</div><div class=\"line\"><span class=\"comment\">// 查看所有本地分支和远程分支</span></div><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>创建/切换分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果存在dev分支，则切换到该分支，否则新建分支</span></div><div class=\"line\">git checkout dev</div><div class=\"line\"><span class=\"comment\">// 创建本地dev1分支,然后切换到dev1分支</span></div><div class=\"line\">git checkout -b dev1 =&gt; git branch dev1 git checkout dev1</div><div class=\"line\"><span class=\"comment\">// 从远程分支dev创建本地分支dev1</span></div><div class=\"line\">git checkout -b dev1 origin/dev</div></pre></td></tr></table></figure>\n<p><strong>合并分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 合并dev1分支，这种模式下，删除分支后，会丢掉分支信息，可以用 --no-ff方法</span></div><div class=\"line\">git merge dev1</div><div class=\"line\">git merge --no-ff -m <span class=\"string\">\"merge with no-ff\"</span> dev1</div><div class=\"line\"><span class=\"comment\">// 如果分支很多，这个分支历史可能就会变得很复杂了，可以使用 rebase，提交的历史会保持线性</span></div><div class=\"line\">git rebase dev1分支</div></pre></td></tr></table></figure>\n<p><strong>删除分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 删除分支，如果没有完成合并会有提示</span></div><div class=\"line\">git branch -d dev1</div><div class=\"line\"><span class=\"comment\">// 强删除</span></div><div class=\"line\">git branch -D dev1</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 删除远程分支</span></div><div class=\"line\">git push origin --delete dev</div><div class=\"line\">or</div><div class=\"line\">git push origin :dev</div></pre></td></tr></table></figure>\n<p><strong>提交分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。</span></div><div class=\"line\">git push origin master:dev</div><div class=\"line\"><span class=\"comment\">// 本地master提交到远程主分支master</span></div><div class=\"line\">git push origin master =&gt; git push origin master:master</div></pre></td></tr></table></figure>\n<p><strong>跟踪远程分支</strong></p>\n<p>从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git pull/push，Git 会自行推断应该向哪个服务器的哪个分支更新/推送数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 建立追踪关系</span></div><div class=\"line\">git branch -u origin/dev master</div><div class=\"line\">or</div><div class=\"line\">git branch --set-upstream-to origin/dev master</div><div class=\"line\"><span class=\"comment\">// 查看所有分支跟踪关系</span></div><div class=\"line\">git branch -vv</div></pre></td></tr></table></figure>\n<p><strong>打Tag</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 打tag</span></div><div class=\"line\">git tag -a v1.0 -m <span class=\"string\">'msg'</span></div><div class=\"line\"><span class=\"comment\">// 推送tag</span></div><div class=\"line\">git push origin v1.0</div></pre></td></tr></table></figure>\n<p>git push origin <branch> 推送分支</branch></p>\n<p>git rebase <branch> 合并分支</branch></p>\n<p>git tag -a <tag> -m ‘msg’ 打tag</tag></p>\n<p>git push orign <tag>  推送tag</tag></p>\n<p>git branch –set-upstream-to=origin/4.6.0 4.6.0 关连分支</p>\n","excerpt":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><p><strong>查看分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 查看本地所有分支</span></div><div class=\"line\">git branch</div><div class=\"line\"><span class=\"comment\">// 查看远程所有分支</span></div><div class=\"line\">git branch -r</div><div class=\"line\"><span class=\"comment\">// 查看所有本地分支和远程分支</span></div><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>","more":"<p><strong>创建/切换分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果存在dev分支，则切换到该分支，否则新建分支</span></div><div class=\"line\">git checkout dev</div><div class=\"line\"><span class=\"comment\">// 创建本地dev1分支,然后切换到dev1分支</span></div><div class=\"line\">git checkout -b dev1 =&gt; git branch dev1 git checkout dev1</div><div class=\"line\"><span class=\"comment\">// 从远程分支dev创建本地分支dev1</span></div><div class=\"line\">git checkout -b dev1 origin/dev</div></pre></td></tr></table></figure>\n<p><strong>合并分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 合并dev1分支，这种模式下，删除分支后，会丢掉分支信息，可以用 --no-ff方法</span></div><div class=\"line\">git merge dev1</div><div class=\"line\">git merge --no-ff -m <span class=\"string\">\"merge with no-ff\"</span> dev1</div><div class=\"line\"><span class=\"comment\">// 如果分支很多，这个分支历史可能就会变得很复杂了，可以使用 rebase，提交的历史会保持线性</span></div><div class=\"line\">git rebase dev1分支</div></pre></td></tr></table></figure>\n<p><strong>删除分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 删除分支，如果没有完成合并会有提示</span></div><div class=\"line\">git branch -d dev1</div><div class=\"line\"><span class=\"comment\">// 强删除</span></div><div class=\"line\">git branch -D dev1</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 删除远程分支</span></div><div class=\"line\">git push origin --delete dev</div><div class=\"line\">or</div><div class=\"line\">git push origin :dev</div></pre></td></tr></table></figure>\n<p><strong>提交分支</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。</span></div><div class=\"line\">git push origin master:dev</div><div class=\"line\"><span class=\"comment\">// 本地master提交到远程主分支master</span></div><div class=\"line\">git push origin master =&gt; git push origin master:master</div></pre></td></tr></table></figure>\n<p><strong>跟踪远程分支</strong></p>\n<p>从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git pull/push，Git 会自行推断应该向哪个服务器的哪个分支更新/推送数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 建立追踪关系</span></div><div class=\"line\">git branch -u origin/dev master</div><div class=\"line\">or</div><div class=\"line\">git branch --set-upstream-to origin/dev master</div><div class=\"line\"><span class=\"comment\">// 查看所有分支跟踪关系</span></div><div class=\"line\">git branch -vv</div></pre></td></tr></table></figure>\n<p><strong>打Tag</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 打tag</span></div><div class=\"line\">git tag -a v1.0 -m <span class=\"string\">'msg'</span></div><div class=\"line\"><span class=\"comment\">// 推送tag</span></div><div class=\"line\">git push origin v1.0</div></pre></td></tr></table></figure>\n<p>git push origin <branch> 推送分支</p>\n<p>git rebase <branch> 合并分支</p>\n<p>git tag -a <tag> -m ‘msg’ 打tag</p>\n<p>git push orign <tag>  推送tag</p>\n<p>git branch –set-upstream-to=origin/4.6.0 4.6.0 关连分支</p>"},{"title":"mac-os-tips","date":"2017-02-10T07:28:39.000Z","_content":"\n### Tips\n\n有时候，我们安装程序时，会提示文件已损坏，需要打开安全性与隐私中的任何来源选项\n\n```java\nsudo spctl --master-disable\n```","source":"_posts/mac-os-tips.md","raw":"---\ntitle: mac-os-tips\ndate: 2017-02-10 15:28:39\ntags: apple\n---\n\n### Tips\n\n有时候，我们安装程序时，会提示文件已损坏，需要打开安全性与隐私中的任何来源选项\n\n```java\nsudo spctl --master-disable\n```","slug":"mac-os-tips","published":1,"updated":"2017-02-10T07:55:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6sh0004fq9m7syjcn9k","content":"<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h3><p>有时候，我们安装程序时，会提示文件已损坏，需要打开安全性与隐私中的任何来源选项</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo spctl --master-disable</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h3><p>有时候，我们安装程序时，会提示文件已损坏，需要打开安全性与隐私中的任何来源选项</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo spctl --master-disable</div></pre></td></tr></table></figure>"},{"title":"android-blogs","date":"2017-01-10T08:25:55.000Z","_content":"\n### Blogs\n\n------\n\n[带你全面了解Glide 4的用法](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650242045&idx=1&sn=6250b01cb51387c546824e0a754ef153&chksm=88638a92bf140384df375e5424c04a21bbbd13fbd4b761c40fd556b83e3959fa900da4a33e0d&scene=38#wechat_redirect)\n\n[从零开始的Android新项目2 - Gradle篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/)\n\n[**贝塞尔风暴 － 超炫GABottleLoading效果**](https://gold.xitu.io/post/586d90d2ac502e00615c05d1)\n\n[Android APK反编译就这么简单 详解（附图）](http://blog.csdn.net/vipzjyno1/article/details/21039349/)\n\n[**APP淘宝，你为什么这么慢卡？**](http://www.jianshu.com/p/423b77c15af3)\n\n[**thinkSky1206**](https://github.com/thinkSky1206/android-blog)\n\n[Android — Smooth shared transitions in all android versions – Medium](https://medium.com/@Sserra90/android-smooth-shared-transitions-in-all-android-versions-9cd27fd3c80f#.gxof6c5lr)\n\n[nickbutcher/plaid: An Android app which provides design news & inspiration as well as being an example of implementing material design.](https://github.com/nickbutcher/plaid)\n\n[**五分钟带你看懂NestedScrolling嵌套滑动机制**](https://gold.xitu.io/post/581b1ba7bf22ec0068b61107)\n\n[**Android 自定义View合集**](http://www.jianshu.com/p/a5040fcfe8cb)\n\n[不要在Android的Application对象中缓存数据!](http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html)\n\n[这个项目碉堡了](https://gold.xitu.io/post/58948f1b0ce4630056f3a629)\n\n[Android7.0之拍照与图片裁剪适配](http://blog.csdn.net/yyh352091626/article/details/54908624)\n\n[Android性能优化系列之App启动优化](http://blog.csdn.net/u012124438/article/details/56340949)\n\n[Android application和activity标签详解](http://blog.csdn.net/self_study/article/details/54020909)\n\n[AndroidManifest.xml 最全详解](http://blog.csdn.net/u012486840/article/details/52468931)\n\n[自定义View Layout过程 - 最易懂的自定义View原理系列](http://blog.csdn.net/carson_ho/article/details/56011112)\n\n[**AndroidManifest--你真的理解了吗？**](http://www.jianshu.com/p/6ed30112d4a4)\n\n### View\n\n------\n\n[**那些你应该知道却不一定知道的——View坐标分析汇总**](http://blog.csdn.net/mr_immortalz/article/details/51168278)\n\n[召唤，光能使者--玩转PathMeasure](http://www.jianshu.com/p/4bb16cefca23)\n\n### Android\n\n------\n\n[Guides](https://github.com/codepath/android_guides/wiki#getting-started)\n\nTabLayout\n\nhttp://www.jianshu.com/p/2b2bb6be83a8\n\nAnima\n\nhttp://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/\n\n[5分钟搞定开机引导界面](https://juejin.im/post/590b4fa5128fe10058f9209a)\n\n[自定义Behavior的艺术探索-仿UC浏览器主页](http://www.jianshu.com/p/f7989a2a3ec2)\n\nhttp://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/\n\n[Android轮播图控件的实现详解(附GitHub开源链接)](https://juejin.im/post/590b107c61ff4b00698dc2c0)\n\n[CoordinatorLayout介绍](https://juejin.im/post/590a860944d904006d8cfebb)\n\n[Android APK 瘦身 - JOOX Music项目实战](https://mp.weixin.qq.com/s/9IGYG6hNKL1V7N_p16p2Hg)\n\n[Android 翻页效果加苹果桌面应用抖动效果](https://juejin.im/post/5936b783a22b9d005806b9b7)\n\n[简单高效的实现Android App全局字体替换](http://www.jianshu.com/p/4e1e96fe6d26)\n\n[Android开发人员不得不收集的代码](http://rance935.com/blog/?p=152)\n\n[可能是最火的开源项目 —— Java 篇](https://my.oschina.net/editorial-story/blog/1525158?utm_source=tuicool&utm_medium=referral)\n\n[Aspect Oriented Programming in Android](https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/)\n\n[史上最详细仿QQ消息拖拽粘性效果](https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&mid=2247486976&idx=1&sn=2567fc6ba788e064ad7f355bd4df4df7)\n\n[高级UI特效仿直播点赞效果—一个优美炫酷的点赞动画](https://juejin.im/post/59bf1a896fb9a00a67613628)\n\n[Debug 7.1.1源码一步步写Android换肤框架](http://www.jianshu.com/p/c8748fbf6f60)\n\n[MIUI 系统 BUG，Android 调用相机崩溃？将拍照适配方案进行到底！](https://mp.weixin.qq.com/s/dWF9wiJYQFyM0NHgDj4nyA)\n\nhttp://zhengxiaoyong.me/categories/\n\n[你最不想错过的 2017 早期 25 个 Android 开源库](https://juejin.im/post/59e5fc92f265da43283fee89)\n\n[Android开发：RecyclerView平滑流畅的滑动到指定位置](https://juejin.im/post/59e5f3a8518825579d131417)\n\n[Android 项目总结(一)：弧形ViewPager 和弧形HeaderView](https://juejin.im/post/59e363a26fb9a045055d29e6)\n\n[苹果核 - 一种动态为apk写入信息的方案](http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html)\n\n[Android学习文档和工具](https://github.com/foxleezh/AndroidDoc)\n\n[手把手教你写高质量Android技术博客，画图工具，录像工具，Markdown写法](https://juejin.im/post/59df34a5518825422c0ca6fc)\n\n[仿淘宝、京东拖拽商品详情(可嵌套ViewPager、ListView、WebView、FragmentTabhost)](https://juejin.im/post/5878dd72128fe1006bea57d8)\n\n[【开发利器】中国国内可用API合集](https://microzz.com/2017/02/03/API/)\n\n[当你只有一个设备的时候，如何做好屏幕适配](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484743&idx=1&sn=28a18c03d375a4f5761d6cf7429870ef&chksm=97851c66a0f29570fbb4922d06ac578aac8c0feae1b6bb81048380299219a5d2bf526d20a1f1&scene=21#wechat_redirect)\n\n[Android 源码，在线阅读更方便！！！](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484741&idx=1&sn=69215d5b524ffb352ad96b8301a91b8f&chksm=97851c64a0f295725d9177cd6ee4422330c9a2184cf842fe06db84fa5aadbf1e2189ba77ec00&scene=21#wechat_redirect)\n\n[Glide 这样用，更省内存！！！](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484787&idx=1&sn=655e94f3c18bc4af5f3184ab439412b7&chksm=97851c52a0f29544128ee2f485a7e30c83215d8e33d769910e375777abec01deae26ffb64ee9&scene=21#wechat_redirect)\n\n[View.post() 不靠谱的地方你知道吗？](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484729&idx=1&sn=bb1ba2f5b15ff77e9e6fe81b9aee4482&chksm=97851c18a0f2950eed481b700efa85d915eccaa8e7d61c5ab9498e7234f6822372968fcf1838&scene=21#wechat_redirect)\n\n[把倒计时做到极致](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484410&idx=1&sn=f324276767fe61f13aa0d5abf26a5c0d&chksm=97851adba0f293cd0d6e6a95b9beddbf5e764e11a30eb1a72be3e56534db84faac2614b41684&scene=21#wechat_redirect)\n\n[使用 Router 实现的模块化，如何优雅的回到主页面](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484485&idx=1&sn=35ee06bb53056c831d8973f0a6496f08&chksm=97851d64a0f2947220f8977dcc06ec810e56928018e96438cd9ca6ef7ce0b78b4c71ef89b9a0&scene=21#wechat_redirect)\n\n[Android：手把手教你构建 WebView 的缓存机制 & 资源预加载方案](https://juejin.im/post/59366700b123db0064396c1f)\n\n[自定义view系列之——Android贝塞尔曲线--基础篇](http://www.jianshu.com/p/3b2ac05ae3c7)\n\n[一篇文章，学会Git和Gitflow工作流](http://www.jianshu.com/p/84dd2da33c82)\n\n[Android 软键盘的显示和隐藏，这样操作就对了](https://juejin.im/post/5a2525396fb9a0451463e129)\n\n[Android 系统中，那些能大幅提高工作效率的 API 汇总（持续更新中...）](https://juejin.im/post/58c407ee44d90400698757d8)\n\n[Android 开发中，与屏幕有关的三个小众知识](https://juejin.im/post/5a287f16f265da43176a062e)\n\n[图解ConcurrentHashMap](https://juejin.im/post/5a2f2f7851882554b837823a)\n\n[AOP编程之AspectJ实战实现数据无痕埋点](https://mp.weixin.qq.com/s/neH9JXL5AYzjaAaxF-ZF-g)\n\n[2017下半年掘金日报优质文章合集：Android篇](https://juejin.im/post/5a430ac05188252b145b51ad)\n\n[堪比阿里插件的 Android Studio 插件集合(IDE通用)（下）](https://juejin.im/entry/59f13a1af265da4315232058?utm_medium=an&utm_source=weixinqun)\n\n[诡异的空指针](https://mp.weixin.qq.com/s/o_ZdrNosk7OZDS2s5Skvuw)\n\n[Android 开发，你遇上 Emoji 头疼吗?](https://juejin.im/post/5a45b38451882512d823076a)\n\n[如何避免使用onActivityResult，以提高代码可读性](https://juejin.im/post/5a4611786fb9a0451a76b565)\n\n","source":"_posts/blogs/android-blogs.md","raw":"---\ntitle: android-blogs\ndate: 2017-01-10 16:25:55\ntags: blog\n---\n\n### Blogs\n\n------\n\n[带你全面了解Glide 4的用法](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650242045&idx=1&sn=6250b01cb51387c546824e0a754ef153&chksm=88638a92bf140384df375e5424c04a21bbbd13fbd4b761c40fd556b83e3959fa900da4a33e0d&scene=38#wechat_redirect)\n\n[从零开始的Android新项目2 - Gradle篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/)\n\n[**贝塞尔风暴 － 超炫GABottleLoading效果**](https://gold.xitu.io/post/586d90d2ac502e00615c05d1)\n\n[Android APK反编译就这么简单 详解（附图）](http://blog.csdn.net/vipzjyno1/article/details/21039349/)\n\n[**APP淘宝，你为什么这么慢卡？**](http://www.jianshu.com/p/423b77c15af3)\n\n[**thinkSky1206**](https://github.com/thinkSky1206/android-blog)\n\n[Android — Smooth shared transitions in all android versions – Medium](https://medium.com/@Sserra90/android-smooth-shared-transitions-in-all-android-versions-9cd27fd3c80f#.gxof6c5lr)\n\n[nickbutcher/plaid: An Android app which provides design news & inspiration as well as being an example of implementing material design.](https://github.com/nickbutcher/plaid)\n\n[**五分钟带你看懂NestedScrolling嵌套滑动机制**](https://gold.xitu.io/post/581b1ba7bf22ec0068b61107)\n\n[**Android 自定义View合集**](http://www.jianshu.com/p/a5040fcfe8cb)\n\n[不要在Android的Application对象中缓存数据!](http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html)\n\n[这个项目碉堡了](https://gold.xitu.io/post/58948f1b0ce4630056f3a629)\n\n[Android7.0之拍照与图片裁剪适配](http://blog.csdn.net/yyh352091626/article/details/54908624)\n\n[Android性能优化系列之App启动优化](http://blog.csdn.net/u012124438/article/details/56340949)\n\n[Android application和activity标签详解](http://blog.csdn.net/self_study/article/details/54020909)\n\n[AndroidManifest.xml 最全详解](http://blog.csdn.net/u012486840/article/details/52468931)\n\n[自定义View Layout过程 - 最易懂的自定义View原理系列](http://blog.csdn.net/carson_ho/article/details/56011112)\n\n[**AndroidManifest--你真的理解了吗？**](http://www.jianshu.com/p/6ed30112d4a4)\n\n### View\n\n------\n\n[**那些你应该知道却不一定知道的——View坐标分析汇总**](http://blog.csdn.net/mr_immortalz/article/details/51168278)\n\n[召唤，光能使者--玩转PathMeasure](http://www.jianshu.com/p/4bb16cefca23)\n\n### Android\n\n------\n\n[Guides](https://github.com/codepath/android_guides/wiki#getting-started)\n\nTabLayout\n\nhttp://www.jianshu.com/p/2b2bb6be83a8\n\nAnima\n\nhttp://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/\n\n[5分钟搞定开机引导界面](https://juejin.im/post/590b4fa5128fe10058f9209a)\n\n[自定义Behavior的艺术探索-仿UC浏览器主页](http://www.jianshu.com/p/f7989a2a3ec2)\n\nhttp://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/\n\n[Android轮播图控件的实现详解(附GitHub开源链接)](https://juejin.im/post/590b107c61ff4b00698dc2c0)\n\n[CoordinatorLayout介绍](https://juejin.im/post/590a860944d904006d8cfebb)\n\n[Android APK 瘦身 - JOOX Music项目实战](https://mp.weixin.qq.com/s/9IGYG6hNKL1V7N_p16p2Hg)\n\n[Android 翻页效果加苹果桌面应用抖动效果](https://juejin.im/post/5936b783a22b9d005806b9b7)\n\n[简单高效的实现Android App全局字体替换](http://www.jianshu.com/p/4e1e96fe6d26)\n\n[Android开发人员不得不收集的代码](http://rance935.com/blog/?p=152)\n\n[可能是最火的开源项目 —— Java 篇](https://my.oschina.net/editorial-story/blog/1525158?utm_source=tuicool&utm_medium=referral)\n\n[Aspect Oriented Programming in Android](https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/)\n\n[史上最详细仿QQ消息拖拽粘性效果](https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&mid=2247486976&idx=1&sn=2567fc6ba788e064ad7f355bd4df4df7)\n\n[高级UI特效仿直播点赞效果—一个优美炫酷的点赞动画](https://juejin.im/post/59bf1a896fb9a00a67613628)\n\n[Debug 7.1.1源码一步步写Android换肤框架](http://www.jianshu.com/p/c8748fbf6f60)\n\n[MIUI 系统 BUG，Android 调用相机崩溃？将拍照适配方案进行到底！](https://mp.weixin.qq.com/s/dWF9wiJYQFyM0NHgDj4nyA)\n\nhttp://zhengxiaoyong.me/categories/\n\n[你最不想错过的 2017 早期 25 个 Android 开源库](https://juejin.im/post/59e5fc92f265da43283fee89)\n\n[Android开发：RecyclerView平滑流畅的滑动到指定位置](https://juejin.im/post/59e5f3a8518825579d131417)\n\n[Android 项目总结(一)：弧形ViewPager 和弧形HeaderView](https://juejin.im/post/59e363a26fb9a045055d29e6)\n\n[苹果核 - 一种动态为apk写入信息的方案](http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html)\n\n[Android学习文档和工具](https://github.com/foxleezh/AndroidDoc)\n\n[手把手教你写高质量Android技术博客，画图工具，录像工具，Markdown写法](https://juejin.im/post/59df34a5518825422c0ca6fc)\n\n[仿淘宝、京东拖拽商品详情(可嵌套ViewPager、ListView、WebView、FragmentTabhost)](https://juejin.im/post/5878dd72128fe1006bea57d8)\n\n[【开发利器】中国国内可用API合集](https://microzz.com/2017/02/03/API/)\n\n[当你只有一个设备的时候，如何做好屏幕适配](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484743&idx=1&sn=28a18c03d375a4f5761d6cf7429870ef&chksm=97851c66a0f29570fbb4922d06ac578aac8c0feae1b6bb81048380299219a5d2bf526d20a1f1&scene=21#wechat_redirect)\n\n[Android 源码，在线阅读更方便！！！](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484741&idx=1&sn=69215d5b524ffb352ad96b8301a91b8f&chksm=97851c64a0f295725d9177cd6ee4422330c9a2184cf842fe06db84fa5aadbf1e2189ba77ec00&scene=21#wechat_redirect)\n\n[Glide 这样用，更省内存！！！](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484787&idx=1&sn=655e94f3c18bc4af5f3184ab439412b7&chksm=97851c52a0f29544128ee2f485a7e30c83215d8e33d769910e375777abec01deae26ffb64ee9&scene=21#wechat_redirect)\n\n[View.post() 不靠谱的地方你知道吗？](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484729&idx=1&sn=bb1ba2f5b15ff77e9e6fe81b9aee4482&chksm=97851c18a0f2950eed481b700efa85d915eccaa8e7d61c5ab9498e7234f6822372968fcf1838&scene=21#wechat_redirect)\n\n[把倒计时做到极致](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484410&idx=1&sn=f324276767fe61f13aa0d5abf26a5c0d&chksm=97851adba0f293cd0d6e6a95b9beddbf5e764e11a30eb1a72be3e56534db84faac2614b41684&scene=21#wechat_redirect)\n\n[使用 Router 实现的模块化，如何优雅的回到主页面](https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247484485&idx=1&sn=35ee06bb53056c831d8973f0a6496f08&chksm=97851d64a0f2947220f8977dcc06ec810e56928018e96438cd9ca6ef7ce0b78b4c71ef89b9a0&scene=21#wechat_redirect)\n\n[Android：手把手教你构建 WebView 的缓存机制 & 资源预加载方案](https://juejin.im/post/59366700b123db0064396c1f)\n\n[自定义view系列之——Android贝塞尔曲线--基础篇](http://www.jianshu.com/p/3b2ac05ae3c7)\n\n[一篇文章，学会Git和Gitflow工作流](http://www.jianshu.com/p/84dd2da33c82)\n\n[Android 软键盘的显示和隐藏，这样操作就对了](https://juejin.im/post/5a2525396fb9a0451463e129)\n\n[Android 系统中，那些能大幅提高工作效率的 API 汇总（持续更新中...）](https://juejin.im/post/58c407ee44d90400698757d8)\n\n[Android 开发中，与屏幕有关的三个小众知识](https://juejin.im/post/5a287f16f265da43176a062e)\n\n[图解ConcurrentHashMap](https://juejin.im/post/5a2f2f7851882554b837823a)\n\n[AOP编程之AspectJ实战实现数据无痕埋点](https://mp.weixin.qq.com/s/neH9JXL5AYzjaAaxF-ZF-g)\n\n[2017下半年掘金日报优质文章合集：Android篇](https://juejin.im/post/5a430ac05188252b145b51ad)\n\n[堪比阿里插件的 Android Studio 插件集合(IDE通用)（下）](https://juejin.im/entry/59f13a1af265da4315232058?utm_medium=an&utm_source=weixinqun)\n\n[诡异的空指针](https://mp.weixin.qq.com/s/o_ZdrNosk7OZDS2s5Skvuw)\n\n[Android 开发，你遇上 Emoji 头疼吗?](https://juejin.im/post/5a45b38451882512d823076a)\n\n[如何避免使用onActivityResult，以提高代码可读性](https://juejin.im/post/5a4611786fb9a0451a76b565)\n\n","slug":"blogs/android-blogs","published":1,"updated":"2018-01-02T03:53:59.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tn0008fq9maeg56yjb","content":"<h3 id=\"Blogs\"><a href=\"#Blogs\" class=\"headerlink\" title=\"Blogs\"></a>Blogs</h3><hr>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650242045&amp;idx=1&amp;sn=6250b01cb51387c546824e0a754ef153&amp;chksm=88638a92bf140384df375e5424c04a21bbbd13fbd4b761c40fd556b83e3959fa900da4a33e0d&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"external\">带你全面了解Glide 4的用法</a></p>\n<p><a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/\" target=\"_blank\" rel=\"external\">从零开始的Android新项目2 - Gradle篇</a></p>\n<p><a href=\"https://gold.xitu.io/post/586d90d2ac502e00615c05d1\" target=\"_blank\" rel=\"external\"><strong>贝塞尔风暴 － 超炫GABottleLoading效果</strong></a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/21039349/\" target=\"_blank\" rel=\"external\">Android APK反编译就这么简单 详解（附图）</a></p>\n<p><a href=\"http://www.jianshu.com/p/423b77c15af3\" target=\"_blank\" rel=\"external\"><strong>APP淘宝，你为什么这么慢卡？</strong></a></p>\n<p><a href=\"https://github.com/thinkSky1206/android-blog\" target=\"_blank\" rel=\"external\"><strong>thinkSky1206</strong></a></p>\n<p><a href=\"https://medium.com/@Sserra90/android-smooth-shared-transitions-in-all-android-versions-9cd27fd3c80f#.gxof6c5lr\" target=\"_blank\" rel=\"external\">Android — Smooth shared transitions in all android versions – Medium</a></p>\n<p><a href=\"https://github.com/nickbutcher/plaid\" target=\"_blank\" rel=\"external\">nickbutcher/plaid: An Android app which provides design news &amp; inspiration as well as being an example of implementing material design.</a></p>\n<p><a href=\"https://gold.xitu.io/post/581b1ba7bf22ec0068b61107\" target=\"_blank\" rel=\"external\"><strong>五分钟带你看懂NestedScrolling嵌套滑动机制</strong></a></p>\n<p><a href=\"http://www.jianshu.com/p/a5040fcfe8cb\" target=\"_blank\" rel=\"external\"><strong>Android 自定义View合集</strong></a></p>\n<p><a href=\"http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html\" target=\"_blank\" rel=\"external\">不要在Android的Application对象中缓存数据!</a></p>\n<p><a href=\"https://gold.xitu.io/post/58948f1b0ce4630056f3a629\" target=\"_blank\" rel=\"external\">这个项目碉堡了</a></p>\n<p><a href=\"http://blog.csdn.net/yyh352091626/article/details/54908624\" target=\"_blank\" rel=\"external\">Android7.0之拍照与图片裁剪适配</a></p>\n<p><a href=\"http://blog.csdn.net/u012124438/article/details/56340949\" target=\"_blank\" rel=\"external\">Android性能优化系列之App启动优化</a></p>\n<p><a href=\"http://blog.csdn.net/self_study/article/details/54020909\" target=\"_blank\" rel=\"external\">Android application和activity标签详解</a></p>\n<p><a href=\"http://blog.csdn.net/u012486840/article/details/52468931\" target=\"_blank\" rel=\"external\">AndroidManifest.xml 最全详解</a></p>\n<p><a href=\"http://blog.csdn.net/carson_ho/article/details/56011112\" target=\"_blank\" rel=\"external\">自定义View Layout过程 - 最易懂的自定义View原理系列</a></p>\n<p><a href=\"http://www.jianshu.com/p/6ed30112d4a4\" target=\"_blank\" rel=\"external\"><strong>AndroidManifest–你真的理解了吗？</strong></a></p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><hr>\n<p><a href=\"http://blog.csdn.net/mr_immortalz/article/details/51168278\" target=\"_blank\" rel=\"external\"><strong>那些你应该知道却不一定知道的——View坐标分析汇总</strong></a></p>\n<p><a href=\"http://www.jianshu.com/p/4bb16cefca23\" target=\"_blank\" rel=\"external\">召唤，光能使者–玩转PathMeasure</a></p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><hr>\n<p><a href=\"https://github.com/codepath/android_guides/wiki#getting-started\" target=\"_blank\" rel=\"external\">Guides</a></p>\n<p>TabLayout</p>\n<p><a href=\"http://www.jianshu.com/p/2b2bb6be83a8\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/2b2bb6be83a8</a></p>\n<p>Anima</p>\n<p><a href=\"http://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/\" target=\"_blank\" rel=\"external\">http://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/</a></p>\n<p><a href=\"https://juejin.im/post/590b4fa5128fe10058f9209a\" target=\"_blank\" rel=\"external\">5分钟搞定开机引导界面</a></p>\n<p><a href=\"http://www.jianshu.com/p/f7989a2a3ec2\" target=\"_blank\" rel=\"external\">自定义Behavior的艺术探索-仿UC浏览器主页</a></p>\n<p><a href=\"http://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/\" target=\"_blank\" rel=\"external\">http://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/</a></p>\n<p><a href=\"https://juejin.im/post/590b107c61ff4b00698dc2c0\" target=\"_blank\" rel=\"external\">Android轮播图控件的实现详解(附GitHub开源链接)</a></p>\n<p><a href=\"https://juejin.im/post/590a860944d904006d8cfebb\" target=\"_blank\" rel=\"external\">CoordinatorLayout介绍</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/9IGYG6hNKL1V7N_p16p2Hg\" target=\"_blank\" rel=\"external\">Android APK 瘦身 - JOOX Music项目实战</a></p>\n<p><a href=\"https://juejin.im/post/5936b783a22b9d005806b9b7\" target=\"_blank\" rel=\"external\">Android 翻页效果加苹果桌面应用抖动效果</a></p>\n<p><a href=\"http://www.jianshu.com/p/4e1e96fe6d26\" target=\"_blank\" rel=\"external\">简单高效的实现Android App全局字体替换</a></p>\n<p><a href=\"http://rance935.com/blog/?p=152\" target=\"_blank\" rel=\"external\">Android开发人员不得不收集的代码</a></p>\n<p><a href=\"https://my.oschina.net/editorial-story/blog/1525158?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">可能是最火的开源项目 —— Java 篇</a></p>\n<p><a href=\"https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/\" target=\"_blank\" rel=\"external\">Aspect Oriented Programming in Android</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&amp;mid=2247486976&amp;idx=1&amp;sn=2567fc6ba788e064ad7f355bd4df4df7\" target=\"_blank\" rel=\"external\">史上最详细仿QQ消息拖拽粘性效果</a></p>\n<p><a href=\"https://juejin.im/post/59bf1a896fb9a00a67613628\" target=\"_blank\" rel=\"external\">高级UI特效仿直播点赞效果—一个优美炫酷的点赞动画</a></p>\n<p><a href=\"http://www.jianshu.com/p/c8748fbf6f60\" target=\"_blank\" rel=\"external\">Debug 7.1.1源码一步步写Android换肤框架</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/dWF9wiJYQFyM0NHgDj4nyA\" target=\"_blank\" rel=\"external\">MIUI 系统 BUG，Android 调用相机崩溃？将拍照适配方案进行到底！</a></p>\n<p><a href=\"http://zhengxiaoyong.me/categories/\" target=\"_blank\" rel=\"external\">http://zhengxiaoyong.me/categories/</a></p>\n<p><a href=\"https://juejin.im/post/59e5fc92f265da43283fee89\" target=\"_blank\" rel=\"external\">你最不想错过的 2017 早期 25 个 Android 开源库</a></p>\n<p><a href=\"https://juejin.im/post/59e5f3a8518825579d131417\" target=\"_blank\" rel=\"external\">Android开发：RecyclerView平滑流畅的滑动到指定位置</a></p>\n<p><a href=\"https://juejin.im/post/59e363a26fb9a045055d29e6\" target=\"_blank\" rel=\"external\">Android 项目总结(一)：弧形ViewPager 和弧形HeaderView</a></p>\n<p><a href=\"http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html\" target=\"_blank\" rel=\"external\">苹果核 - 一种动态为apk写入信息的方案</a></p>\n<p><a href=\"https://github.com/foxleezh/AndroidDoc\" target=\"_blank\" rel=\"external\">Android学习文档和工具</a></p>\n<p><a href=\"https://juejin.im/post/59df34a5518825422c0ca6fc\" target=\"_blank\" rel=\"external\">手把手教你写高质量Android技术博客，画图工具，录像工具，Markdown写法</a></p>\n<p><a href=\"https://juejin.im/post/5878dd72128fe1006bea57d8\" target=\"_blank\" rel=\"external\">仿淘宝、京东拖拽商品详情(可嵌套ViewPager、ListView、WebView、FragmentTabhost)</a></p>\n<p><a href=\"https://microzz.com/2017/02/03/API/\" target=\"_blank\" rel=\"external\">【开发利器】中国国内可用API合集</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484743&amp;idx=1&amp;sn=28a18c03d375a4f5761d6cf7429870ef&amp;chksm=97851c66a0f29570fbb4922d06ac578aac8c0feae1b6bb81048380299219a5d2bf526d20a1f1&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">当你只有一个设备的时候，如何做好屏幕适配</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484741&amp;idx=1&amp;sn=69215d5b524ffb352ad96b8301a91b8f&amp;chksm=97851c64a0f295725d9177cd6ee4422330c9a2184cf842fe06db84fa5aadbf1e2189ba77ec00&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">Android 源码，在线阅读更方便！！！</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484787&amp;idx=1&amp;sn=655e94f3c18bc4af5f3184ab439412b7&amp;chksm=97851c52a0f29544128ee2f485a7e30c83215d8e33d769910e375777abec01deae26ffb64ee9&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">Glide 这样用，更省内存！！！</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484729&amp;idx=1&amp;sn=bb1ba2f5b15ff77e9e6fe81b9aee4482&amp;chksm=97851c18a0f2950eed481b700efa85d915eccaa8e7d61c5ab9498e7234f6822372968fcf1838&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">View.post() 不靠谱的地方你知道吗？</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484410&amp;idx=1&amp;sn=f324276767fe61f13aa0d5abf26a5c0d&amp;chksm=97851adba0f293cd0d6e6a95b9beddbf5e764e11a30eb1a72be3e56534db84faac2614b41684&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">把倒计时做到极致</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484485&amp;idx=1&amp;sn=35ee06bb53056c831d8973f0a6496f08&amp;chksm=97851d64a0f2947220f8977dcc06ec810e56928018e96438cd9ca6ef7ce0b78b4c71ef89b9a0&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">使用 Router 实现的模块化，如何优雅的回到主页面</a></p>\n<p><a href=\"https://juejin.im/post/59366700b123db0064396c1f\" target=\"_blank\" rel=\"external\">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a></p>\n<p><a href=\"http://www.jianshu.com/p/3b2ac05ae3c7\" target=\"_blank\" rel=\"external\">自定义view系列之——Android贝塞尔曲线–基础篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/84dd2da33c82\" target=\"_blank\" rel=\"external\">一篇文章，学会Git和Gitflow工作流</a></p>\n<p><a href=\"https://juejin.im/post/5a2525396fb9a0451463e129\" target=\"_blank\" rel=\"external\">Android 软键盘的显示和隐藏，这样操作就对了</a></p>\n<p><a href=\"https://juejin.im/post/58c407ee44d90400698757d8\" target=\"_blank\" rel=\"external\">Android 系统中，那些能大幅提高工作效率的 API 汇总（持续更新中…）</a></p>\n<p><a href=\"https://juejin.im/post/5a287f16f265da43176a062e\" target=\"_blank\" rel=\"external\">Android 开发中，与屏幕有关的三个小众知识</a></p>\n<p><a href=\"https://juejin.im/post/5a2f2f7851882554b837823a\" target=\"_blank\" rel=\"external\">图解ConcurrentHashMap</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/neH9JXL5AYzjaAaxF-ZF-g\" target=\"_blank\" rel=\"external\">AOP编程之AspectJ实战实现数据无痕埋点</a></p>\n<p><a href=\"https://juejin.im/post/5a430ac05188252b145b51ad\" target=\"_blank\" rel=\"external\">2017下半年掘金日报优质文章合集：Android篇</a></p>\n<p><a href=\"https://juejin.im/entry/59f13a1af265da4315232058?utm_medium=an&amp;utm_source=weixinqun\" target=\"_blank\" rel=\"external\">堪比阿里插件的 Android Studio 插件集合(IDE通用)（下）</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o_ZdrNosk7OZDS2s5Skvuw\" target=\"_blank\" rel=\"external\">诡异的空指针</a></p>\n<p><a href=\"https://juejin.im/post/5a45b38451882512d823076a\" target=\"_blank\" rel=\"external\">Android 开发，你遇上 Emoji 头疼吗?</a></p>\n<p><a href=\"https://juejin.im/post/5a4611786fb9a0451a76b565\" target=\"_blank\" rel=\"external\">如何避免使用onActivityResult，以提高代码可读性</a></p>\n","excerpt":"","more":"<h3 id=\"Blogs\"><a href=\"#Blogs\" class=\"headerlink\" title=\"Blogs\"></a>Blogs</h3><hr>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650242045&amp;idx=1&amp;sn=6250b01cb51387c546824e0a754ef153&amp;chksm=88638a92bf140384df375e5424c04a21bbbd13fbd4b761c40fd556b83e3959fa900da4a33e0d&amp;scene=38#wechat_redirect\">带你全面了解Glide 4的用法</a></p>\n<p><a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/\">从零开始的Android新项目2 - Gradle篇</a></p>\n<p><a href=\"https://gold.xitu.io/post/586d90d2ac502e00615c05d1\"><strong>贝塞尔风暴 － 超炫GABottleLoading效果</strong></a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/21039349/\">Android APK反编译就这么简单 详解（附图）</a></p>\n<p><a href=\"http://www.jianshu.com/p/423b77c15af3\"><strong>APP淘宝，你为什么这么慢卡？</strong></a></p>\n<p><a href=\"https://github.com/thinkSky1206/android-blog\"><strong>thinkSky1206</strong></a></p>\n<p><a href=\"https://medium.com/@Sserra90/android-smooth-shared-transitions-in-all-android-versions-9cd27fd3c80f#.gxof6c5lr\">Android — Smooth shared transitions in all android versions – Medium</a></p>\n<p><a href=\"https://github.com/nickbutcher/plaid\">nickbutcher/plaid: An Android app which provides design news &amp; inspiration as well as being an example of implementing material design.</a></p>\n<p><a href=\"https://gold.xitu.io/post/581b1ba7bf22ec0068b61107\"><strong>五分钟带你看懂NestedScrolling嵌套滑动机制</strong></a></p>\n<p><a href=\"http://www.jianshu.com/p/a5040fcfe8cb\"><strong>Android 自定义View合集</strong></a></p>\n<p><a href=\"http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html\">不要在Android的Application对象中缓存数据!</a></p>\n<p><a href=\"https://gold.xitu.io/post/58948f1b0ce4630056f3a629\">这个项目碉堡了</a></p>\n<p><a href=\"http://blog.csdn.net/yyh352091626/article/details/54908624\">Android7.0之拍照与图片裁剪适配</a></p>\n<p><a href=\"http://blog.csdn.net/u012124438/article/details/56340949\">Android性能优化系列之App启动优化</a></p>\n<p><a href=\"http://blog.csdn.net/self_study/article/details/54020909\">Android application和activity标签详解</a></p>\n<p><a href=\"http://blog.csdn.net/u012486840/article/details/52468931\">AndroidManifest.xml 最全详解</a></p>\n<p><a href=\"http://blog.csdn.net/carson_ho/article/details/56011112\">自定义View Layout过程 - 最易懂的自定义View原理系列</a></p>\n<p><a href=\"http://www.jianshu.com/p/6ed30112d4a4\"><strong>AndroidManifest–你真的理解了吗？</strong></a></p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><hr>\n<p><a href=\"http://blog.csdn.net/mr_immortalz/article/details/51168278\"><strong>那些你应该知道却不一定知道的——View坐标分析汇总</strong></a></p>\n<p><a href=\"http://www.jianshu.com/p/4bb16cefca23\">召唤，光能使者–玩转PathMeasure</a></p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><hr>\n<p><a href=\"https://github.com/codepath/android_guides/wiki#getting-started\">Guides</a></p>\n<p>TabLayout</p>\n<p><a href=\"http://www.jianshu.com/p/2b2bb6be83a8\">http://www.jianshu.com/p/2b2bb6be83a8</a></p>\n<p>Anima</p>\n<p><a href=\"http://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/\">http://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/</a></p>\n<p><a href=\"https://juejin.im/post/590b4fa5128fe10058f9209a\">5分钟搞定开机引导界面</a></p>\n<p><a href=\"http://www.jianshu.com/p/f7989a2a3ec2\">自定义Behavior的艺术探索-仿UC浏览器主页</a></p>\n<p><a href=\"http://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/\">http://ailoli.me/2017/05/03/Android粒子特效之-萤火虫飞舞效果/</a></p>\n<p><a href=\"https://juejin.im/post/590b107c61ff4b00698dc2c0\">Android轮播图控件的实现详解(附GitHub开源链接)</a></p>\n<p><a href=\"https://juejin.im/post/590a860944d904006d8cfebb\">CoordinatorLayout介绍</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/9IGYG6hNKL1V7N_p16p2Hg\">Android APK 瘦身 - JOOX Music项目实战</a></p>\n<p><a href=\"https://juejin.im/post/5936b783a22b9d005806b9b7\">Android 翻页效果加苹果桌面应用抖动效果</a></p>\n<p><a href=\"http://www.jianshu.com/p/4e1e96fe6d26\">简单高效的实现Android App全局字体替换</a></p>\n<p><a href=\"http://rance935.com/blog/?p=152\">Android开发人员不得不收集的代码</a></p>\n<p><a href=\"https://my.oschina.net/editorial-story/blog/1525158?utm_source=tuicool&amp;utm_medium=referral\">可能是最火的开源项目 —— Java 篇</a></p>\n<p><a href=\"https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/\">Aspect Oriented Programming in Android</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&amp;mid=2247486976&amp;idx=1&amp;sn=2567fc6ba788e064ad7f355bd4df4df7\">史上最详细仿QQ消息拖拽粘性效果</a></p>\n<p><a href=\"https://juejin.im/post/59bf1a896fb9a00a67613628\">高级UI特效仿直播点赞效果—一个优美炫酷的点赞动画</a></p>\n<p><a href=\"http://www.jianshu.com/p/c8748fbf6f60\">Debug 7.1.1源码一步步写Android换肤框架</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/dWF9wiJYQFyM0NHgDj4nyA\">MIUI 系统 BUG，Android 调用相机崩溃？将拍照适配方案进行到底！</a></p>\n<p><a href=\"http://zhengxiaoyong.me/categories/\">http://zhengxiaoyong.me/categories/</a></p>\n<p><a href=\"https://juejin.im/post/59e5fc92f265da43283fee89\">你最不想错过的 2017 早期 25 个 Android 开源库</a></p>\n<p><a href=\"https://juejin.im/post/59e5f3a8518825579d131417\">Android开发：RecyclerView平滑流畅的滑动到指定位置</a></p>\n<p><a href=\"https://juejin.im/post/59e363a26fb9a045055d29e6\">Android 项目总结(一)：弧形ViewPager 和弧形HeaderView</a></p>\n<p><a href=\"http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html\">苹果核 - 一种动态为apk写入信息的方案</a></p>\n<p><a href=\"https://github.com/foxleezh/AndroidDoc\">Android学习文档和工具</a></p>\n<p><a href=\"https://juejin.im/post/59df34a5518825422c0ca6fc\">手把手教你写高质量Android技术博客，画图工具，录像工具，Markdown写法</a></p>\n<p><a href=\"https://juejin.im/post/5878dd72128fe1006bea57d8\">仿淘宝、京东拖拽商品详情(可嵌套ViewPager、ListView、WebView、FragmentTabhost)</a></p>\n<p><a href=\"https://microzz.com/2017/02/03/API/\">【开发利器】中国国内可用API合集</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484743&amp;idx=1&amp;sn=28a18c03d375a4f5761d6cf7429870ef&amp;chksm=97851c66a0f29570fbb4922d06ac578aac8c0feae1b6bb81048380299219a5d2bf526d20a1f1&amp;scene=21#wechat_redirect\">当你只有一个设备的时候，如何做好屏幕适配</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484741&amp;idx=1&amp;sn=69215d5b524ffb352ad96b8301a91b8f&amp;chksm=97851c64a0f295725d9177cd6ee4422330c9a2184cf842fe06db84fa5aadbf1e2189ba77ec00&amp;scene=21#wechat_redirect\">Android 源码，在线阅读更方便！！！</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484787&amp;idx=1&amp;sn=655e94f3c18bc4af5f3184ab439412b7&amp;chksm=97851c52a0f29544128ee2f485a7e30c83215d8e33d769910e375777abec01deae26ffb64ee9&amp;scene=21#wechat_redirect\">Glide 这样用，更省内存！！！</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484729&amp;idx=1&amp;sn=bb1ba2f5b15ff77e9e6fe81b9aee4482&amp;chksm=97851c18a0f2950eed481b700efa85d915eccaa8e7d61c5ab9498e7234f6822372968fcf1838&amp;scene=21#wechat_redirect\">View.post() 不靠谱的地方你知道吗？</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484410&amp;idx=1&amp;sn=f324276767fe61f13aa0d5abf26a5c0d&amp;chksm=97851adba0f293cd0d6e6a95b9beddbf5e764e11a30eb1a72be3e56534db84faac2614b41684&amp;scene=21#wechat_redirect\">把倒计时做到极致</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&amp;mid=2247484485&amp;idx=1&amp;sn=35ee06bb53056c831d8973f0a6496f08&amp;chksm=97851d64a0f2947220f8977dcc06ec810e56928018e96438cd9ca6ef7ce0b78b4c71ef89b9a0&amp;scene=21#wechat_redirect\">使用 Router 实现的模块化，如何优雅的回到主页面</a></p>\n<p><a href=\"https://juejin.im/post/59366700b123db0064396c1f\">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a></p>\n<p><a href=\"http://www.jianshu.com/p/3b2ac05ae3c7\">自定义view系列之——Android贝塞尔曲线–基础篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/84dd2da33c82\">一篇文章，学会Git和Gitflow工作流</a></p>\n<p><a href=\"https://juejin.im/post/5a2525396fb9a0451463e129\">Android 软键盘的显示和隐藏，这样操作就对了</a></p>\n<p><a href=\"https://juejin.im/post/58c407ee44d90400698757d8\">Android 系统中，那些能大幅提高工作效率的 API 汇总（持续更新中…）</a></p>\n<p><a href=\"https://juejin.im/post/5a287f16f265da43176a062e\">Android 开发中，与屏幕有关的三个小众知识</a></p>\n<p><a href=\"https://juejin.im/post/5a2f2f7851882554b837823a\">图解ConcurrentHashMap</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/neH9JXL5AYzjaAaxF-ZF-g\">AOP编程之AspectJ实战实现数据无痕埋点</a></p>\n<p><a href=\"https://juejin.im/post/5a430ac05188252b145b51ad\">2017下半年掘金日报优质文章合集：Android篇</a></p>\n<p><a href=\"https://juejin.im/entry/59f13a1af265da4315232058?utm_medium=an&amp;utm_source=weixinqun\">堪比阿里插件的 Android Studio 插件集合(IDE通用)（下）</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/o_ZdrNosk7OZDS2s5Skvuw\">诡异的空指针</a></p>\n<p><a href=\"https://juejin.im/post/5a45b38451882512d823076a\">Android 开发，你遇上 Emoji 头疼吗?</a></p>\n<p><a href=\"https://juejin.im/post/5a4611786fb9a0451a76b565\">如何避免使用onActivityResult，以提高代码可读性</a></p>\n"},{"title":"blogs","date":"2017-01-10T08:12:44.000Z","_content":"\n### 简书\n\n------\n\n[milter](http://www.jianshu.com/u/511ba5d71aef)\n\n### CSDN\n\n------\n\n[CGD精讲(Swift3)](http://blog.csdn.net/Hello_Hwc/article/details/54293280?winzoom=1)\n\nhttp://www.jianshu.com/p/929f8a56eef6","source":"_posts/blogs/blogs.md","raw":"---\ntitle: blogs\ndate: 2017-01-10 16:12:44\ntags: blog\n---\n\n### 简书\n\n------\n\n[milter](http://www.jianshu.com/u/511ba5d71aef)\n\n### CSDN\n\n------\n\n[CGD精讲(Swift3)](http://blog.csdn.net/Hello_Hwc/article/details/54293280?winzoom=1)\n\nhttp://www.jianshu.com/p/929f8a56eef6","slug":"blogs/blogs","published":1,"updated":"2017-10-19T09:33:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6to0009fq9mpdckshp7","content":"<h3 id=\"简书\"><a href=\"#简书\" class=\"headerlink\" title=\"简书\"></a>简书</h3><hr>\n<p><a href=\"http://www.jianshu.com/u/511ba5d71aef\" target=\"_blank\" rel=\"external\">milter</a></p>\n<h3 id=\"CSDN\"><a href=\"#CSDN\" class=\"headerlink\" title=\"CSDN\"></a>CSDN</h3><hr>\n<p><a href=\"http://blog.csdn.net/Hello_Hwc/article/details/54293280?winzoom=1\" target=\"_blank\" rel=\"external\">CGD精讲(Swift3)</a></p>\n<p><a href=\"http://www.jianshu.com/p/929f8a56eef6\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/929f8a56eef6</a></p>\n","excerpt":"","more":"<h3 id=\"简书\"><a href=\"#简书\" class=\"headerlink\" title=\"简书\"></a>简书</h3><hr>\n<p><a href=\"http://www.jianshu.com/u/511ba5d71aef\">milter</a></p>\n<h3 id=\"CSDN\"><a href=\"#CSDN\" class=\"headerlink\" title=\"CSDN\"></a>CSDN</h3><hr>\n<p><a href=\"http://blog.csdn.net/Hello_Hwc/article/details/54293280?winzoom=1\">CGD精讲(Swift3)</a></p>\n<p><a href=\"http://www.jianshu.com/p/929f8a56eef6\">http://www.jianshu.com/p/929f8a56eef6</a></p>\n"},{"title":"js-blogs","date":"2017-01-10T08:33:54.000Z","_content":"\n[**微信小程序 加载 HTML 标签**](https://github.com/ZCLegendary/WXNews/tree/master/wxParse)\n","source":"_posts/blogs/js-blogs.md","raw":"---\ntitle: js-blogs\ndate: 2017-01-10 16:33:54\ntags: blog\n---\n\n[**微信小程序 加载 HTML 标签**](https://github.com/ZCLegendary/WXNews/tree/master/wxParse)\n","slug":"blogs/js-blogs","published":1,"updated":"2017-02-07T06:48:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tr000bfq9mk7sfpz1o","content":"<p><a href=\"https://github.com/ZCLegendary/WXNews/tree/master/wxParse\" target=\"_blank\" rel=\"external\"><strong>微信小程序 加载 HTML 标签</strong></a></p>\n","excerpt":"","more":"<p><a href=\"https://github.com/ZCLegendary/WXNews/tree/master/wxParse\"><strong>微信小程序 加载 HTML 标签</strong></a></p>\n"},{"title":"android-animation","date":"2016-05-19T02:54:29.000Z","_content":"\n### 动画描述\n| XML配置     | Java 类             | 描述           | 动画类型       |\n| :-------- | :----------------- | ------------ | ---------- |\n| alph      | AlphaAnimation     | 渐变透明度动画效果    | 渐变动画       |\n| scale     | ScaleAnimation     | 渐变尺寸伸缩动画效果   | 伸缩动画       |\n| translate | TranslateAnimation | 画面转换位置移动动画效果 | 画面转换动画(位移) |\n| rotate    | RotateAnimation    | 画面转移旋转动画效果   | 画面旋转动画     |\n\n<!-- More -->\n\n### 插入器\n\n| 属性                                 | 描述    |\n| ---------------------------------- | ----- |\n| accelerate_decelerate_interpolator | 加速-减速 |\n| accelerate_interpolator            | 加速    |\n| decelerate_interpolator            | 减速    |\n\n### XML配置\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <alpha //渐变\n        android:duration=\"1000\" //动画时长，单位毫秒\n        android:fromAlpha=\"0.0\" //动画起始时的透明度 0.0表示完全透明\n        android:toAlpha=\"1.0\" /> //动画结束时的透明度 1.0表示完全不透明\n          \n     <scale //伸缩\n        android:duration=\"1000\" //动画时长，单位毫秒\n        android:fillAfter=\"false\" //当设置为true,该动画转化在动画结束后被应用\n        android:fromXScale=\"0.0\" //动画起始时 X坐标上的伸缩尺寸 0表示收缩到没有\n        android:fromYScale=\"0.0\" //动画起始时 Y坐标上的伸缩尺寸 1表示正常无伸缩\n        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\" //插入器\n        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置\n        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置\n        android:toXScale=\"1.4\" //动画起始时 X坐标上的伸缩尺寸 小于1表示收缩\n        android:toYScale=\"1.4\" /> //动画起始时 Y坐标上的伸缩尺寸 大于1表示放大\n          \n     <translate //位置转移\n        android:duration=\"2000\" //动画时长，单位毫秒\n        android:fromXDelta=\"30\" //动画开始时 X坐标的位置\n        android:fromYDelta=\"30\" //动画开始时 Y坐标的位置\n        android:toXDelta=\"-80\" //动画结束时 X坐标的位置\n        android:toYDelta=\"300\" /> //动画结束时 Y坐标的位置\n          \n      <rotate\n        android:duration=\"3000\" //动画时长，单位毫秒\n        android:fromDegrees=\"0\" //起始角度 \n        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\"//插入器\n        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置\n        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置\n        android:toDegrees=\"+350\" /> //结束角度，可以大于360度\n</set>\n```","source":"_posts/android/android-animation.md","raw":"---\ntitle: android-animation\ndate: 2016-05-19 10:54:29\ntags: android\n---\n\n### 动画描述\n| XML配置     | Java 类             | 描述           | 动画类型       |\n| :-------- | :----------------- | ------------ | ---------- |\n| alph      | AlphaAnimation     | 渐变透明度动画效果    | 渐变动画       |\n| scale     | ScaleAnimation     | 渐变尺寸伸缩动画效果   | 伸缩动画       |\n| translate | TranslateAnimation | 画面转换位置移动动画效果 | 画面转换动画(位移) |\n| rotate    | RotateAnimation    | 画面转移旋转动画效果   | 画面旋转动画     |\n\n<!-- More -->\n\n### 插入器\n\n| 属性                                 | 描述    |\n| ---------------------------------- | ----- |\n| accelerate_decelerate_interpolator | 加速-减速 |\n| accelerate_interpolator            | 加速    |\n| decelerate_interpolator            | 减速    |\n\n### XML配置\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <alpha //渐变\n        android:duration=\"1000\" //动画时长，单位毫秒\n        android:fromAlpha=\"0.0\" //动画起始时的透明度 0.0表示完全透明\n        android:toAlpha=\"1.0\" /> //动画结束时的透明度 1.0表示完全不透明\n          \n     <scale //伸缩\n        android:duration=\"1000\" //动画时长，单位毫秒\n        android:fillAfter=\"false\" //当设置为true,该动画转化在动画结束后被应用\n        android:fromXScale=\"0.0\" //动画起始时 X坐标上的伸缩尺寸 0表示收缩到没有\n        android:fromYScale=\"0.0\" //动画起始时 Y坐标上的伸缩尺寸 1表示正常无伸缩\n        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\" //插入器\n        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置\n        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置\n        android:toXScale=\"1.4\" //动画起始时 X坐标上的伸缩尺寸 小于1表示收缩\n        android:toYScale=\"1.4\" /> //动画起始时 Y坐标上的伸缩尺寸 大于1表示放大\n          \n     <translate //位置转移\n        android:duration=\"2000\" //动画时长，单位毫秒\n        android:fromXDelta=\"30\" //动画开始时 X坐标的位置\n        android:fromYDelta=\"30\" //动画开始时 Y坐标的位置\n        android:toXDelta=\"-80\" //动画结束时 X坐标的位置\n        android:toYDelta=\"300\" /> //动画结束时 Y坐标的位置\n          \n      <rotate\n        android:duration=\"3000\" //动画时长，单位毫秒\n        android:fromDegrees=\"0\" //起始角度 \n        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\"//插入器\n        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置\n        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置\n        android:toDegrees=\"+350\" /> //结束角度，可以大于360度\n</set>\n```","slug":"android/android-animation","published":1,"updated":"2016-12-23T08:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tt000cfq9mlrf7yzeg","content":"<h3 id=\"动画描述\"><a href=\"#动画描述\" class=\"headerlink\" title=\"动画描述\"></a>动画描述</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">XML配置</th>\n<th style=\"text-align:left\">Java 类</th>\n<th>描述</th>\n<th>动画类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alph</td>\n<td style=\"text-align:left\">AlphaAnimation</td>\n<td>渐变透明度动画效果</td>\n<td>渐变动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scale</td>\n<td style=\"text-align:left\">ScaleAnimation</td>\n<td>渐变尺寸伸缩动画效果</td>\n<td>伸缩动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">translate</td>\n<td style=\"text-align:left\">TranslateAnimation</td>\n<td>画面转换位置移动动画效果</td>\n<td>画面转换动画(位移)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rotate</td>\n<td style=\"text-align:left\">RotateAnimation</td>\n<td>画面转移旋转动画效果</td>\n<td>画面旋转动画</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h3 id=\"插入器\"><a href=\"#插入器\" class=\"headerlink\" title=\"插入器\"></a>插入器</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accelerate_decelerate_interpolator</td>\n<td>加速-减速</td>\n</tr>\n<tr>\n<td>accelerate_interpolator</td>\n<td>加速</td>\n</tr>\n<tr>\n<td>decelerate_interpolator</td>\n<td>减速</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"XML配置\"><a href=\"#XML配置\" class=\"headerlink\" title=\"XML配置\"></a>XML配置</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt;</div><div class=\"line\">    &lt;alpha //渐变</div><div class=\"line\">        android:duration=\"1000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromAlpha=\"0.0\" //动画起始时的透明度 0.0表示完全透明</div><div class=\"line\">        android:toAlpha=\"1.0\" /&gt; //动画结束时的透明度 1.0表示完全不透明</div><div class=\"line\">          </div><div class=\"line\">     &lt;scale //伸缩</div><div class=\"line\">        android:duration=\"1000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fillAfter=\"false\" //当设置为true,该动画转化在动画结束后被应用</div><div class=\"line\">        android:fromXScale=\"0.0\" //动画起始时 X坐标上的伸缩尺寸 0表示收缩到没有</div><div class=\"line\">        android:fromYScale=\"0.0\" //动画起始时 Y坐标上的伸缩尺寸 1表示正常无伸缩</div><div class=\"line\">        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\" //插入器</div><div class=\"line\">        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置</div><div class=\"line\">        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置</div><div class=\"line\">        android:toXScale=\"1.4\" //动画起始时 X坐标上的伸缩尺寸 小于1表示收缩</div><div class=\"line\">        android:toYScale=\"1.4\" /&gt; //动画起始时 Y坐标上的伸缩尺寸 大于1表示放大</div><div class=\"line\">          </div><div class=\"line\">     &lt;translate //位置转移</div><div class=\"line\">        android:duration=\"2000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromXDelta=\"30\" //动画开始时 X坐标的位置</div><div class=\"line\">        android:fromYDelta=\"30\" //动画开始时 Y坐标的位置</div><div class=\"line\">        android:toXDelta=\"-80\" //动画结束时 X坐标的位置</div><div class=\"line\">        android:toYDelta=\"300\" /&gt; //动画结束时 Y坐标的位置</div><div class=\"line\">          </div><div class=\"line\">      &lt;rotate</div><div class=\"line\">        android:duration=\"3000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromDegrees=\"0\" //起始角度 </div><div class=\"line\">        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\"//插入器</div><div class=\"line\">        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置</div><div class=\"line\">        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置</div><div class=\"line\">        android:toDegrees=\"+350\" /&gt; //结束角度，可以大于360度</div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure>","excerpt":"<h3 id=\"动画描述\"><a href=\"#动画描述\" class=\"headerlink\" title=\"动画描述\"></a>动画描述</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">XML配置</th>\n<th style=\"text-align:left\">Java 类</th>\n<th>描述</th>\n<th>动画类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alph</td>\n<td style=\"text-align:left\">AlphaAnimation</td>\n<td>渐变透明度动画效果</td>\n<td>渐变动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scale</td>\n<td style=\"text-align:left\">ScaleAnimation</td>\n<td>渐变尺寸伸缩动画效果</td>\n<td>伸缩动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">translate</td>\n<td style=\"text-align:left\">TranslateAnimation</td>\n<td>画面转换位置移动动画效果</td>\n<td>画面转换动画(位移)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rotate</td>\n<td style=\"text-align:left\">RotateAnimation</td>\n<td>画面转移旋转动画效果</td>\n<td>画面旋转动画</td>\n</tr>\n</tbody>\n</table>","more":"<h3 id=\"插入器\"><a href=\"#插入器\" class=\"headerlink\" title=\"插入器\"></a>插入器</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accelerate_decelerate_interpolator</td>\n<td>加速-减速</td>\n</tr>\n<tr>\n<td>accelerate_interpolator</td>\n<td>加速</td>\n</tr>\n<tr>\n<td>decelerate_interpolator</td>\n<td>减速</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"XML配置\"><a href=\"#XML配置\" class=\"headerlink\" title=\"XML配置\"></a>XML配置</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt;</div><div class=\"line\">    &lt;alpha //渐变</div><div class=\"line\">        android:duration=\"1000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromAlpha=\"0.0\" //动画起始时的透明度 0.0表示完全透明</div><div class=\"line\">        android:toAlpha=\"1.0\" /&gt; //动画结束时的透明度 1.0表示完全不透明</div><div class=\"line\">          </div><div class=\"line\">     &lt;scale //伸缩</div><div class=\"line\">        android:duration=\"1000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fillAfter=\"false\" //当设置为true,该动画转化在动画结束后被应用</div><div class=\"line\">        android:fromXScale=\"0.0\" //动画起始时 X坐标上的伸缩尺寸 0表示收缩到没有</div><div class=\"line\">        android:fromYScale=\"0.0\" //动画起始时 Y坐标上的伸缩尺寸 1表示正常无伸缩</div><div class=\"line\">        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\" //插入器</div><div class=\"line\">        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置</div><div class=\"line\">        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置</div><div class=\"line\">        android:toXScale=\"1.4\" //动画起始时 X坐标上的伸缩尺寸 小于1表示收缩</div><div class=\"line\">        android:toYScale=\"1.4\" /&gt; //动画起始时 Y坐标上的伸缩尺寸 大于1表示放大</div><div class=\"line\">          </div><div class=\"line\">     &lt;translate //位置转移</div><div class=\"line\">        android:duration=\"2000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromXDelta=\"30\" //动画开始时 X坐标的位置</div><div class=\"line\">        android:fromYDelta=\"30\" //动画开始时 Y坐标的位置</div><div class=\"line\">        android:toXDelta=\"-80\" //动画结束时 X坐标的位置</div><div class=\"line\">        android:toYDelta=\"300\" /&gt; //动画结束时 Y坐标的位置</div><div class=\"line\">          </div><div class=\"line\">      &lt;rotate</div><div class=\"line\">        android:duration=\"3000\" //动画时长，单位毫秒</div><div class=\"line\">        android:fromDegrees=\"0\" //起始角度 </div><div class=\"line\">        android:interpolator=\"@android:anim/accelerate_decelerate_interpolator\"//插入器</div><div class=\"line\">        android:pivotX=\"50%\" //动画相对于物件的X坐标的开始位置,从0%~100%取值，50%为中点位置</div><div class=\"line\">        android:pivotY=\"50%\" //动画相对于物件的Y坐标的开始位置</div><div class=\"line\">        android:toDegrees=\"+350\" /&gt; //结束角度，可以大于360度</div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure>"},{"title":"android-guides","date":"2017-02-13T08:33:02.000Z","_content":"\n## 基本用法\n### Button\n对于Button上的文本，系统会对Button中的所有英文字母自动进行大写转换，如果这不是你想要的效果，可以使用如下配置来禁用这一默认特性\n```java\n// android:textAllCaps=\"false\"\n<Button\n  \tandroid:id=\"@+id/button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button\"\n    android:textAllCaps=\"false\" />\n```\n\n<!--more-->\n\n### ProgressBar\n\n```java\n// style 默认圆形\nstyle=\"?android:attr/progressBarStyleLarge\"\nstyle=\"?android:attr/progressBarStyleSmall\"\nstyle=\"?android:attr/progressBarStyleSmallTitle\"\nstyle=\"?android:attr/progressBarStyleHorizonal\" //水平\n```\n\n### ProgressDialog\n\n### Broadcast \n\n> 不允许开启线程，不能做耗时操作(10秒左右)\n>\n> 注册：registerReceiver(本地广播需要使用LocalBroadcastManager)\n>\n> 取消注册：unregisterReceiver\n\n##### 广播类型：\n\n- 无序广播(默认)：所有广播接收器都可以接受到。调用`sendBroadcast()`发送广播\n\n- 有序广播：优先级比较高的广播接收器(`android:priority`)可以先收到广播，使用`abortBroadcast`可以截断广播。调用`sendOrderedBroadcast`发送广播\n\n  ```java\n  <intent-filter android:priority=\"100\">\n  \t......\n  </intent-filter>\n  ```\n\n- 本地广播：发出的广播只能本程序才能收到。调用`LocalBroadcastManager`的`sendBroadcast`发送广播\n\n##### ACTION\n\n```java\nandroid.net.conn.CONNECTIVITY_CHANGE // 网络状态发生变化  权限：ACCESS_NETWORK_STATE\nandroid.intent.action.BOOT_COMPLETED // 开机广播 权限：RECEIVE_BOOT_COMPLETED\n```\n\n### Shader\n\n\n\n## 权限\n\n> 可以使用[RxPermissions](https://github.com/tbruyelle/RxPermissions)简化权限操作\n\n下表列出了Android中所有的危险权限，一共是9组24个权限。\n\n|    权限组名    |                   权限名                    |\n| :--------: | :--------------------------------------: |\n|  CALENDAR  |     READ_CALENDAR<br>WRITE_CALENDAR      |\n|   CAMERA   |                  CAMERA                  |\n|  CONTACTS  | READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS |\n|  LOCATION  | ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION |\n| MICROPHONE |               RECORD_AUDIO               |\n|   PHONE    | READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS |\n|  SENSORS   |               BODY_SENSORS               |\n|    SMS     | SEND_SMS<br>RECCEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS |\n|  STORAGE   | READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE |\n\n| 密度             | 建议尺寸      |\n| -------------- | --------- |\n| mipmap-mdpi    | 48 * 48   |\n| mipmap-hdpi    | 72 * 72   |\n| mipmap-xhdpi   | 96 * 96   |\n| mipmap-xxhdpi  | 144 * 144 |\n| mipmap-xxxhdpi | 192 * 192 |\n\nfloat xdpi = getResources().getDisplayMetrics().xdpi;\nfloat ydpi = getResources().getDisplayMetrics().ydpi;\n\n| dpi范围           | 密度      |\n| --------------- | ------- |\n| 0dpi ~ 120dpi   | ldpi    |\n| 120dpi ~ 160dpi | mdpi    |\n| 160dpi ~ 240dpi | hdpi    |\n| 240dpi ~ 320dpi | xhdpi   |\n| 320dpi ~ 480dpi | xxhdpi  |\n| 480dpi ~ 640dpi | xxxhdpi |\n\n**子线程更新UI**\n\n因为在 OnCreate 的 时候，View 是还没有被 ViewRootImpl\n加载到 Window，所以子线程修改 View 的代码没有经过 ViewRootImpl 的检测。贯穿全文，就告诉了大家在 onResum 之前在子线程可以修改 UI，具体原因没讲清楚。可以讲讲 contentView 是怎样被ViewRootImplement 加载到 Window。Window、Activity、View、ViewRootImpl 之间的关系？","source":"_posts/android/android-guides.md","raw":"---\ntitle: android-guides\ndate: 2017-02-13 16:33:02\ntags: android\n---\n\n## 基本用法\n### Button\n对于Button上的文本，系统会对Button中的所有英文字母自动进行大写转换，如果这不是你想要的效果，可以使用如下配置来禁用这一默认特性\n```java\n// android:textAllCaps=\"false\"\n<Button\n  \tandroid:id=\"@+id/button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button\"\n    android:textAllCaps=\"false\" />\n```\n\n<!--more-->\n\n### ProgressBar\n\n```java\n// style 默认圆形\nstyle=\"?android:attr/progressBarStyleLarge\"\nstyle=\"?android:attr/progressBarStyleSmall\"\nstyle=\"?android:attr/progressBarStyleSmallTitle\"\nstyle=\"?android:attr/progressBarStyleHorizonal\" //水平\n```\n\n### ProgressDialog\n\n### Broadcast \n\n> 不允许开启线程，不能做耗时操作(10秒左右)\n>\n> 注册：registerReceiver(本地广播需要使用LocalBroadcastManager)\n>\n> 取消注册：unregisterReceiver\n\n##### 广播类型：\n\n- 无序广播(默认)：所有广播接收器都可以接受到。调用`sendBroadcast()`发送广播\n\n- 有序广播：优先级比较高的广播接收器(`android:priority`)可以先收到广播，使用`abortBroadcast`可以截断广播。调用`sendOrderedBroadcast`发送广播\n\n  ```java\n  <intent-filter android:priority=\"100\">\n  \t......\n  </intent-filter>\n  ```\n\n- 本地广播：发出的广播只能本程序才能收到。调用`LocalBroadcastManager`的`sendBroadcast`发送广播\n\n##### ACTION\n\n```java\nandroid.net.conn.CONNECTIVITY_CHANGE // 网络状态发生变化  权限：ACCESS_NETWORK_STATE\nandroid.intent.action.BOOT_COMPLETED // 开机广播 权限：RECEIVE_BOOT_COMPLETED\n```\n\n### Shader\n\n\n\n## 权限\n\n> 可以使用[RxPermissions](https://github.com/tbruyelle/RxPermissions)简化权限操作\n\n下表列出了Android中所有的危险权限，一共是9组24个权限。\n\n|    权限组名    |                   权限名                    |\n| :--------: | :--------------------------------------: |\n|  CALENDAR  |     READ_CALENDAR<br>WRITE_CALENDAR      |\n|   CAMERA   |                  CAMERA                  |\n|  CONTACTS  | READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS |\n|  LOCATION  | ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION |\n| MICROPHONE |               RECORD_AUDIO               |\n|   PHONE    | READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS |\n|  SENSORS   |               BODY_SENSORS               |\n|    SMS     | SEND_SMS<br>RECCEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS |\n|  STORAGE   | READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE |\n\n| 密度             | 建议尺寸      |\n| -------------- | --------- |\n| mipmap-mdpi    | 48 * 48   |\n| mipmap-hdpi    | 72 * 72   |\n| mipmap-xhdpi   | 96 * 96   |\n| mipmap-xxhdpi  | 144 * 144 |\n| mipmap-xxxhdpi | 192 * 192 |\n\nfloat xdpi = getResources().getDisplayMetrics().xdpi;\nfloat ydpi = getResources().getDisplayMetrics().ydpi;\n\n| dpi范围           | 密度      |\n| --------------- | ------- |\n| 0dpi ~ 120dpi   | ldpi    |\n| 120dpi ~ 160dpi | mdpi    |\n| 160dpi ~ 240dpi | hdpi    |\n| 240dpi ~ 320dpi | xhdpi   |\n| 320dpi ~ 480dpi | xxhdpi  |\n| 480dpi ~ 640dpi | xxxhdpi |\n\n**子线程更新UI**\n\n因为在 OnCreate 的 时候，View 是还没有被 ViewRootImpl\n加载到 Window，所以子线程修改 View 的代码没有经过 ViewRootImpl 的检测。贯穿全文，就告诉了大家在 onResum 之前在子线程可以修改 UI，具体原因没讲清楚。可以讲讲 contentView 是怎样被ViewRootImplement 加载到 Window。Window、Activity、View、ViewRootImpl 之间的关系？","slug":"android/android-guides","published":1,"updated":"2017-11-27T02:40:31.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tu000dfq9mepevtwjw","content":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>对于Button上的文本，系统会对Button中的所有英文字母自动进行大写转换，如果这不是你想要的效果，可以使用如下配置来禁用这一默认特性<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// android:textAllCaps=\"false\"</span></div><div class=\"line\">&lt;Button</div><div class=\"line\">  \tandroid:id=<span class=\"string\">\"@+id/button\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    android:text=<span class=\"string\">\"Button\"</span></div><div class=\"line\">    android:textAllCaps=<span class=\"string\">\"false\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// style 默认圆形</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleLarge\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleSmall\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleSmallTitle\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleHorizonal\"</span> <span class=\"comment\">//水平</span></div></pre></td></tr></table></figure>\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><h3 id=\"Broadcast\"><a href=\"#Broadcast\" class=\"headerlink\" title=\"Broadcast\"></a>Broadcast</h3><blockquote>\n<p>不允许开启线程，不能做耗时操作(10秒左右)</p>\n<p>注册：registerReceiver(本地广播需要使用LocalBroadcastManager)</p>\n<p>取消注册：unregisterReceiver</p>\n</blockquote>\n<h5 id=\"广播类型：\"><a href=\"#广播类型：\" class=\"headerlink\" title=\"广播类型：\"></a>广播类型：</h5><ul>\n<li><p>无序广播(默认)：所有广播接收器都可以接受到。调用<code>sendBroadcast()</code>发送广播</p>\n</li>\n<li><p>有序广播：优先级比较高的广播接收器(<code>android:priority</code>)可以先收到广播，使用<code>abortBroadcast</code>可以截断广播。调用<code>sendOrderedBroadcast</code>发送广播</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter android:priority=\"100\"&gt;</div><div class=\"line\">\t......</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>本地广播：发出的广播只能本程序才能收到。调用<code>LocalBroadcastManager</code>的<code>sendBroadcast</code>发送广播</p>\n</li>\n</ul>\n<h5 id=\"ACTION\"><a href=\"#ACTION\" class=\"headerlink\" title=\"ACTION\"></a>ACTION</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.net.conn.CONNECTIVITY_CHANGE <span class=\"comment\">// 网络状态发生变化  权限：ACCESS_NETWORK_STATE</span></div><div class=\"line\">android.intent.action.BOOT_COMPLETED <span class=\"comment\">// 开机广播 权限：RECEIVE_BOOT_COMPLETED</span></div></pre></td></tr></table></figure>\n<h3 id=\"Shader\"><a href=\"#Shader\" class=\"headerlink\" title=\"Shader\"></a>Shader</h3><h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><blockquote>\n<p>可以使用<a href=\"https://github.com/tbruyelle/RxPermissions\" target=\"_blank\" rel=\"external\">RxPermissions</a>简化权限操作</p>\n</blockquote>\n<p>下表列出了Android中所有的危险权限，一共是9组24个权限。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">权限组名</th>\n<th style=\"text-align:center\">权限名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CALENDAR</td>\n<td style=\"text-align:center\">READ_CALENDAR<br>WRITE_CALENDAR</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CAMERA</td>\n<td style=\"text-align:center\">CAMERA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CONTACTS</td>\n<td style=\"text-align:center\">READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LOCATION</td>\n<td style=\"text-align:center\">ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MICROPHONE</td>\n<td style=\"text-align:center\">RECORD_AUDIO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PHONE</td>\n<td style=\"text-align:center\">READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SENSORS</td>\n<td style=\"text-align:center\">BODY_SENSORS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SMS</td>\n<td style=\"text-align:center\">SEND_SMS<br>RECCEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STORAGE</td>\n<td style=\"text-align:center\">READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>密度</th>\n<th>建议尺寸</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mipmap-mdpi</td>\n<td>48 * 48</td>\n</tr>\n<tr>\n<td>mipmap-hdpi</td>\n<td>72 * 72</td>\n</tr>\n<tr>\n<td>mipmap-xhdpi</td>\n<td>96 * 96</td>\n</tr>\n<tr>\n<td>mipmap-xxhdpi</td>\n<td>144 * 144</td>\n</tr>\n<tr>\n<td>mipmap-xxxhdpi</td>\n<td>192 * 192</td>\n</tr>\n</tbody>\n</table>\n<p>float xdpi = getResources().getDisplayMetrics().xdpi;<br>float ydpi = getResources().getDisplayMetrics().ydpi;</p>\n<table>\n<thead>\n<tr>\n<th>dpi范围</th>\n<th>密度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0dpi ~ 120dpi</td>\n<td>ldpi</td>\n</tr>\n<tr>\n<td>120dpi ~ 160dpi</td>\n<td>mdpi</td>\n</tr>\n<tr>\n<td>160dpi ~ 240dpi</td>\n<td>hdpi</td>\n</tr>\n<tr>\n<td>240dpi ~ 320dpi</td>\n<td>xhdpi</td>\n</tr>\n<tr>\n<td>320dpi ~ 480dpi</td>\n<td>xxhdpi</td>\n</tr>\n<tr>\n<td>480dpi ~ 640dpi</td>\n<td>xxxhdpi</td>\n</tr>\n</tbody>\n</table>\n<p><strong>子线程更新UI</strong></p>\n<p>因为在 OnCreate 的 时候，View 是还没有被 ViewRootImpl<br>加载到 Window，所以子线程修改 View 的代码没有经过 ViewRootImpl 的检测。贯穿全文，就告诉了大家在 onResum 之前在子线程可以修改 UI，具体原因没讲清楚。可以讲讲 contentView 是怎样被ViewRootImplement 加载到 Window。Window、Activity、View、ViewRootImpl 之间的关系？</p>\n","excerpt":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>对于Button上的文本，系统会对Button中的所有英文字母自动进行大写转换，如果这不是你想要的效果，可以使用如下配置来禁用这一默认特性<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// android:textAllCaps=\"false\"</span></div><div class=\"line\">&lt;Button</div><div class=\"line\">  \tandroid:id=<span class=\"string\">\"@+id/button\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    android:text=<span class=\"string\">\"Button\"</span></div><div class=\"line\">    android:textAllCaps=<span class=\"string\">\"false\"</span> /&gt;</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// style 默认圆形</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleLarge\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleSmall\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleSmallTitle\"</span></div><div class=\"line\">style=<span class=\"string\">\"?android:attr/progressBarStyleHorizonal\"</span> <span class=\"comment\">//水平</span></div></pre></td></tr></table></figure>\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><h3 id=\"Broadcast\"><a href=\"#Broadcast\" class=\"headerlink\" title=\"Broadcast\"></a>Broadcast</h3><blockquote>\n<p>不允许开启线程，不能做耗时操作(10秒左右)</p>\n<p>注册：registerReceiver(本地广播需要使用LocalBroadcastManager)</p>\n<p>取消注册：unregisterReceiver</p>\n</blockquote>\n<h5 id=\"广播类型：\"><a href=\"#广播类型：\" class=\"headerlink\" title=\"广播类型：\"></a>广播类型：</h5><ul>\n<li><p>无序广播(默认)：所有广播接收器都可以接受到。调用<code>sendBroadcast()</code>发送广播</p>\n</li>\n<li><p>有序广播：优先级比较高的广播接收器(<code>android:priority</code>)可以先收到广播，使用<code>abortBroadcast</code>可以截断广播。调用<code>sendOrderedBroadcast</code>发送广播</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter android:priority=\"100\"&gt;</div><div class=\"line\">\t......</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>本地广播：发出的广播只能本程序才能收到。调用<code>LocalBroadcastManager</code>的<code>sendBroadcast</code>发送广播</p>\n</li>\n</ul>\n<h5 id=\"ACTION\"><a href=\"#ACTION\" class=\"headerlink\" title=\"ACTION\"></a>ACTION</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.net.conn.CONNECTIVITY_CHANGE <span class=\"comment\">// 网络状态发生变化  权限：ACCESS_NETWORK_STATE</span></div><div class=\"line\">android.intent.action.BOOT_COMPLETED <span class=\"comment\">// 开机广播 权限：RECEIVE_BOOT_COMPLETED</span></div></pre></td></tr></table></figure>\n<h3 id=\"Shader\"><a href=\"#Shader\" class=\"headerlink\" title=\"Shader\"></a>Shader</h3><h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><blockquote>\n<p>可以使用<a href=\"https://github.com/tbruyelle/RxPermissions\">RxPermissions</a>简化权限操作</p>\n</blockquote>\n<p>下表列出了Android中所有的危险权限，一共是9组24个权限。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">权限组名</th>\n<th style=\"text-align:center\">权限名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CALENDAR</td>\n<td style=\"text-align:center\">READ_CALENDAR<br>WRITE_CALENDAR</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CAMERA</td>\n<td style=\"text-align:center\">CAMERA</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CONTACTS</td>\n<td style=\"text-align:center\">READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LOCATION</td>\n<td style=\"text-align:center\">ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MICROPHONE</td>\n<td style=\"text-align:center\">RECORD_AUDIO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PHONE</td>\n<td style=\"text-align:center\">READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SENSORS</td>\n<td style=\"text-align:center\">BODY_SENSORS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SMS</td>\n<td style=\"text-align:center\">SEND_SMS<br>RECCEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">STORAGE</td>\n<td style=\"text-align:center\">READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>密度</th>\n<th>建议尺寸</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mipmap-mdpi</td>\n<td>48 * 48</td>\n</tr>\n<tr>\n<td>mipmap-hdpi</td>\n<td>72 * 72</td>\n</tr>\n<tr>\n<td>mipmap-xhdpi</td>\n<td>96 * 96</td>\n</tr>\n<tr>\n<td>mipmap-xxhdpi</td>\n<td>144 * 144</td>\n</tr>\n<tr>\n<td>mipmap-xxxhdpi</td>\n<td>192 * 192</td>\n</tr>\n</tbody>\n</table>\n<p>float xdpi = getResources().getDisplayMetrics().xdpi;<br>float ydpi = getResources().getDisplayMetrics().ydpi;</p>\n<table>\n<thead>\n<tr>\n<th>dpi范围</th>\n<th>密度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0dpi ~ 120dpi</td>\n<td>ldpi</td>\n</tr>\n<tr>\n<td>120dpi ~ 160dpi</td>\n<td>mdpi</td>\n</tr>\n<tr>\n<td>160dpi ~ 240dpi</td>\n<td>hdpi</td>\n</tr>\n<tr>\n<td>240dpi ~ 320dpi</td>\n<td>xhdpi</td>\n</tr>\n<tr>\n<td>320dpi ~ 480dpi</td>\n<td>xxhdpi</td>\n</tr>\n<tr>\n<td>480dpi ~ 640dpi</td>\n<td>xxxhdpi</td>\n</tr>\n</tbody>\n</table>\n<p><strong>子线程更新UI</strong></p>\n<p>因为在 OnCreate 的 时候，View 是还没有被 ViewRootImpl<br>加载到 Window，所以子线程修改 View 的代码没有经过 ViewRootImpl 的检测。贯穿全文，就告诉了大家在 onResum 之前在子线程可以修改 UI，具体原因没讲清楚。可以讲讲 contentView 是怎样被ViewRootImplement 加载到 Window。Window、Activity、View、ViewRootImpl 之间的关系？</p>"},{"title":"android-context","date":"2016-05-21T10:53:02.000Z","_content":"\n## Context的能力\n\nContext能做的通用操作决定于这个context最初来源于哪里。下表所列的是，在应用中常见的会收到context对象，以及对应的每种情况，它可以用于哪些地方：\n\n|                     | Application | Activity | Service | ContentProvider | BroadcaseReceiver |\n| ------------------- | ----------- | -------- | ------- | --------------- | ----------------- |\n| 显示Dialog            | NO          | YEA      | NO      | NO              | NO                |\n| 启动Activity          | NO1         | YES      | NO1     | NO1             | NO1               |\n| Layout Inflation    | NO2         | YES      | NO2     | NO2             | NO2               |\n| 启动Service           | YES         | YES      | YES     | YES             | YES               |\n| 绑定Service           | YES         | YES      | YES     | YES             | NO                |\n| 发送Broadcast         | YES         | YES      | YES     | YES             | YES               |\n| 注册BroadcastReceiver | YES         | YES      | YES     | YES             | NO3               |\n| 加载Resource          | YES         | YES      | YES     | YES             | YES               |\n\n> 注：\n>\n> 1. NO1表示Application context的确可以开始一个Activity，但是它需要创建一个新的task。这可能会满足一些特定的需求，但是在你的应用中会创建一个不标准的回退栈（back stack），这通常是不推荐的或者不是最好的实践。","source":"_posts/android/android-context.md","raw":"---\ntitle: android-context\ndate: 2016-05-21 18:53:02\ntags: android\n---\n\n## Context的能力\n\nContext能做的通用操作决定于这个context最初来源于哪里。下表所列的是，在应用中常见的会收到context对象，以及对应的每种情况，它可以用于哪些地方：\n\n|                     | Application | Activity | Service | ContentProvider | BroadcaseReceiver |\n| ------------------- | ----------- | -------- | ------- | --------------- | ----------------- |\n| 显示Dialog            | NO          | YEA      | NO      | NO              | NO                |\n| 启动Activity          | NO1         | YES      | NO1     | NO1             | NO1               |\n| Layout Inflation    | NO2         | YES      | NO2     | NO2             | NO2               |\n| 启动Service           | YES         | YES      | YES     | YES             | YES               |\n| 绑定Service           | YES         | YES      | YES     | YES             | NO                |\n| 发送Broadcast         | YES         | YES      | YES     | YES             | YES               |\n| 注册BroadcastReceiver | YES         | YES      | YES     | YES             | NO3               |\n| 加载Resource          | YES         | YES      | YES     | YES             | YES               |\n\n> 注：\n>\n> 1. NO1表示Application context的确可以开始一个Activity，但是它需要创建一个新的task。这可能会满足一些特定的需求，但是在你的应用中会创建一个不标准的回退栈（back stack），这通常是不推荐的或者不是最好的实践。","slug":"android/android-context","published":1,"updated":"2016-12-23T08:47:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tw000gfq9m8pud4v1w","content":"<h2 id=\"Context的能力\"><a href=\"#Context的能力\" class=\"headerlink\" title=\"Context的能力\"></a>Context的能力</h2><p>Context能做的通用操作决定于这个context最初来源于哪里。下表所列的是，在应用中常见的会收到context对象，以及对应的每种情况，它可以用于哪些地方：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Application</th>\n<th>Activity</th>\n<th>Service</th>\n<th>ContentProvider</th>\n<th>BroadcaseReceiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>显示Dialog</td>\n<td>NO</td>\n<td>YEA</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>启动Activity</td>\n<td>NO1</td>\n<td>YES</td>\n<td>NO1</td>\n<td>NO1</td>\n<td>NO1</td>\n</tr>\n<tr>\n<td>Layout Inflation</td>\n<td>NO2</td>\n<td>YES</td>\n<td>NO2</td>\n<td>NO2</td>\n<td>NO2</td>\n</tr>\n<tr>\n<td>启动Service</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>绑定Service</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>发送Broadcast</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>注册BroadcastReceiver</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO3</td>\n</tr>\n<tr>\n<td>加载Resource</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：</p>\n<ol>\n<li>NO1表示Application context的确可以开始一个Activity，但是它需要创建一个新的task。这可能会满足一些特定的需求，但是在你的应用中会创建一个不标准的回退栈（back stack），这通常是不推荐的或者不是最好的实践。</li>\n</ol>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Context的能力\"><a href=\"#Context的能力\" class=\"headerlink\" title=\"Context的能力\"></a>Context的能力</h2><p>Context能做的通用操作决定于这个context最初来源于哪里。下表所列的是，在应用中常见的会收到context对象，以及对应的每种情况，它可以用于哪些地方：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Application</th>\n<th>Activity</th>\n<th>Service</th>\n<th>ContentProvider</th>\n<th>BroadcaseReceiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>显示Dialog</td>\n<td>NO</td>\n<td>YEA</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>启动Activity</td>\n<td>NO1</td>\n<td>YES</td>\n<td>NO1</td>\n<td>NO1</td>\n<td>NO1</td>\n</tr>\n<tr>\n<td>Layout Inflation</td>\n<td>NO2</td>\n<td>YES</td>\n<td>NO2</td>\n<td>NO2</td>\n<td>NO2</td>\n</tr>\n<tr>\n<td>启动Service</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>绑定Service</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>发送Broadcast</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>注册BroadcastReceiver</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO3</td>\n</tr>\n<tr>\n<td>加载Resource</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：</p>\n<ol>\n<li>NO1表示Application context的确可以开始一个Activity，但是它需要创建一个新的task。这可能会满足一些特定的需求，但是在你的应用中会创建一个不标准的回退栈（back stack），这通常是不推荐的或者不是最好的实践。</li>\n</ol>\n</blockquote>\n"},{"title":"Android配置文件详解-Activity","date":"2017-02-23T03:00:18.000Z","_content":"\n## Activity\n\n```java\n<activity android:allowEmbedded=[\"true\" | \"false\"]\n          android:allowTaskReparenting=[\"true\" | \"false\"]\n          android:alwaysRetainTaskState=[\"true\" | \"false\"]\n          android:alwaysRetainTaskState=[\"true\" | \"false\"]\n          android:autoRemoveFromRecents=[\"true\" | \"false\"]\n          android:banner=”drawable resource”\n          android:clearTaskOnLaunch=[\"true\" | \"false\"]\n          android:configChanges=[\"mcc\", \"mnc\", \"locale\",\n                                 \"touchscreen\", \"keyboard\", \"keyboardHidden\",\n                                 \"navigation\", \"screenLayout\", \"fontScale\",\n                                 \"uiMode\", \"orientation\",\"screenSize\",\n                                 \"smallestScreenSize\"]\n          android:documentLaunchMode=[\"intoExisting\" | \"always\" | \n“none” | “never”]\n          android:enabled=[\"true\" | \"false\"]\n          android:excludeFromRecents=[\"true\" | \"false\"]\n          android:exported=[\"true\" | \"false\"]\n          android:finishOnTaskLaunch=[\"true\" | \"false\"]\n          android:hardwareAccelerated=[\"true\" | \"false\"]\n          android:icon=\"drawable resource\"\n          android:label=\"string resource\"\n          android:launchMode=[\"standard\" | \"singleTop\" |\n                              \"singleTask\" | \"singleInstance\"]\n          android:maxRecents=\"integer\"\n          android:multiprocess=[\"true\" | \"false\"]\n          android:name=\"string\"\n          android:noHistory=[\"true\" | \"false\"]  \n          android:parentActivityName=\"string\"\n          android:permission=\"string\"\n          android:process=\"string\"\n          android:relinquishTaskIdentity=[\"true\" | \"false\"]\n          android:resizeableActivity=[\"true\" | \"false\"]\n          android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" |\n                                     \"portrait\" | \"reverseLandscape\" | \"sensorLandscape\" |\n                                     \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" |\n                                     \"sensor\" | \"fullSensor\" | \"nosensor\"]\n                                     \"user\" | \"fullUser\" | \"locked\"\n          android:stateNotNeeded=[\"true\" | \"false\"]\n          android:supportsPictureInPicture=[\"true\" | \"false\"]\n          android:taskAffinity=\"string\"\n          android:theme=\"resource or theme\"\n          android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]\n          android:windowSoftInputMode=[\"stateUnspecified\",\n                                       \"stateUnchanged\", \"stateHidden\",\n                                       \"stateAlwaysHidden\", \"stateVisible\",\n                                       \"stateAlwaysVisible\", \"adjustUnspecified\",\n                                       \"adjustResize\", \"adjustPan\"] >   \n</activity>\n```\n\n<!-- more -->\n\nandroid:allowEmbedded=[“true” | “false”]**\n这个标识一般为开发可穿戴设备时使用，表示该 Activity 可作为另一 Activity 的嵌入式子项启动。 它尤其适用于子项所在的容器（如 Display）为另一 Activity 所拥有的情况。 例如，用于 Wear 自定义通知的 Activity 必须声明此项，以便 Wear 在其上下文流中显示 Activity，后者位于另一进程中。该属性的默认值为 false。\n\n**android:allowTaskReparenting=[“true” | “false”]**\n这个标示和 Application 的标识意义一样，所以如果同时声明该标识，这个标识会覆盖 Application 的标识\n\n**android:alwaysRetainTaskState**\n这个标识用来指示系统是否始终保持 Activity 所在任务的状态 —“true”表示保持，“false”表示允许系统在特定情况下将任务重置到其初始状态。 默认值为“false”。该属性只对任务的根 Activity 有意义；对于所有其他 Activity，均忽略该属性。\n正常情况下，当用户从主屏幕重新选择某个任务时，系统会在特定情况下清除该任务（从根 Activity 之上的堆栈中移除所有 Activity）。 系统通常会在用户一段时间（如 30 分钟）内未访问任务时执行此操作。\n不过，如果该属性的值是“true”，则无论用户如何到达任务，将始终返回到最后状态的任务。 例如，在网络浏览器这类存在大量用户不愿失去的状态（如多个打开的标签）的应用中，该属性会很有用。\n\n**android:autoRemoveFromRecents=[\"true\" | \"false\"]**\n这个标识为 API21 版本添加，由具有该属性的 Activity 启动的任务是否一直保留在概览屏幕中，直至任务中的最后一个 Activity 完成为止。 若为 true，则自动从概览屏幕中移除任务。 它会替换调用方使用的 FLAG_ACTIVITY_RETAIN_IN_RECENTS。 它必须是布尔值“true”或“false”。\n\nandroid:banner=”drawable resource”\n这个和 application 里面的 banner 标识一样，也是用在 android TV 上的\n\n**android:clearTaskOnLaunch** \n这个标识用来指明当应用从主屏幕重新启动时是否都从中移除除根 Activity 之外的所有 Activity，true 表示始终将任务清除到只剩其根 Activity，false 表示不清除，默认值为 false。需要注意的是该属性只对启动新任务的 Activity（根 Activity）有意义；对于任务中的所有其他 Activity，均忽略该属性。当值为“false”时，可在某些情况下清除任务中的 Activity（参考结合 alwaysRetainTaskState 属性），但并非一律可以。如果该属性和 allowTaskReparenting 的值均为“true”，则如上所述，任何可以更改父项的 Activity 都将转移到与其有亲和关系的任务；其余 Activity 随即被移除。\n例如，假定有人从主屏幕启动了 Activity P，然后从那里转到 Activity Q。该用户接着按了主屏幕按钮，然后返回到 Activity P。正常情况下，用户将看到 Activity Q，因为那是其最后在 P 的任务中执行的 Activity。 不过，如果 P 将此标志设置为“true”，则当用户按下主屏幕将任务转入后台时，其上的所有 Activity（在本例中为 Q）都会被移除。 因此用户返回任务时只会看到 P。\n\n**android:configChanges**\n列出 Activity 将自行处理的配置更改。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity 重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged() 方法。以下为该属性的值，多个值使用“|”分隔 — 例如，“locale|navigation|orientation”：\n| **Value**            | **Description**                          |\n| -------------------- | ---------------------------------------- |\n| “mcc”                | IMSI 移动国家/地区代码 (MCC) 发生了变化 - 检测到了 SIM 并更新了 MCC。 |\n| “mnc”                | IMSI 移动网络代码 (MNC) 发生了变化 - 检测到了 SIM 并更新了 MNC。 |\n| locale”              | 语言区域发生了变化 — 用户为文本选择了新的显示语言。              |\n| “touchscreen”        | 触摸屏发生了变化。（这种情况通常永远不会发生。）                 |\n| “keyboard”           | 键盘类型发生了变化 — 例如，用户插入了一个外置键盘。              |\n| “keyboardHidden”     | 键盘无障碍功能发生了变化 — 例如，用户显示了硬件键盘。             |\n| “navigation”         | 导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）       |\n| “screenLayout”       | 屏幕布局发生了变化 — 这可能是由激活了其他显示方式所致。            |\n| “fontScale”          | 字体缩放系数发生了变化 — 用户选择了新的全局字号。               |\n| “uiMode”             | 用户界面模式发生了变化 — 这可能是因用户将设备放入桌面/车载基座或夜间模式发生变化所致。 请参阅 [UiModeManager](https://developer.android.com/reference/android/app/UiModeManager.html)。 此项为 API 级别 8 中新增配置。 |\n| “orientation”        | 屏幕方向发生了变化 — 用户旋转了设备。 注：如果您的应用面向 API 级别 13 或更高级别（按照 minSdkVersion 和 targetSdkVersion 属性所声明的级别），则还应声明 “screenSize” 配置，因为当设备在横向与纵向之间切换时，该配置也会发生变化。 |\n| “screenSize”         | 当前可用屏幕尺寸发生了变化。它表示当前可用尺寸相对于当前纵横比的变化，因此会在用户在横向与纵向之间切换时发生变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |\n| “smallestScreenSize” | 物理屏幕尺寸发生了变化。它表示与方向无关的尺寸变化，因此只有在实际物理屏幕尺寸发生变化（如切换到外部显示器）时才会变化。对此配置的变更对应于smallestWidth 配置的变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |\n| “layoutDirection”    | 布局方向发生了变化。例如，从从左至右 (LTR) 更改为从右至左 (RTL)。 此项为 API 级别 17 中新增配置。 |\n所有这些配置变更都可能影响应用看到的资源值。 因此，调用 onConfigurationChanged() 时，通常有必要再次获取所有资源（包括视图布局、可绘制对象等），以正确处理变化。 \n　　我们平常接触到最多的就是屏幕的旋转，屏幕的旋转如果在没有特殊设置的情况下会销毁当前的 Activity 重新创建一个新的，为了避免创建新的，就可以在 AndroidMainfest.xml 中对指定 Activity 对应的 配置android:configChanges=”orientation”，这样，每次旋转方向时，只有 onConfigurationChanged 方法被调用，没有了销毁重建的过程。\n　　\n**android:documentLaunchMode=[“intoExisting” | “always” | “none” | “never”]**\n指定每次启动任务时应如何向其中添加新的 Activity 实例。 该属性允许用户让多个来自同一应用的文档出现在概览屏幕（recent app）中。该属性有四个值，会在用户使用该应用打开文档时产生以下效果：\n\n| **Value**      | **Description**                          |\n| -------------- | ---------------------------------------- |\n| “intoExisting” | Activity 会为文档重复使用现有任务。使用该值与不设置 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志、但设置 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 标志所产生的效果相同，如使用 [Intent 标志添加任务中](https://developer.android.com/guide/components/recents.html#flag-new-doc)所述。 |\n| “always”       | Activity 为文档创建新任务，即便文档已打开也是如此。 这与同时设置 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 和 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志的效果相同。 |\n| “none”         | 该 Activity 不会为 Activity 创建新任务。这是默认值，它只会在设置了 [FLAG_ACTIVITY_NEW_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK) 时创建新任务。 概览屏幕将按其默认方式对待此 Activity：为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。 |\n| “never”        | 即使 Intent 包含 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT)，该 Activity 也不会启动到新文档之中。 设置此值会替代 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 和 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志的行为（如果在 Activity 中设置了其中一个标志），并且概览屏幕将为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。 |\n> 注：对于除“none”和“never”以外的值，必须使用 launchMode=”standard” 定义 Activity。 如果未指定此属性，则使用 documentLaunchMode=”none”。\n\n**android:enabled=[“true” | “false”]**\n该属性用来标示系统是否可将 Activity 实例化 — “true” 表示可以，“false”表示不可以。 默认值为“true”。\n上面提到了 元素具有自己的 enabled 属性，该属性适用于所有应用组件，包括 Activity。 和 属性必须都是“true”（因为它们都默认使用该值），系统才能将 Activity 实例化。 如果任何一个属性是“false”，则无法进行实例化。\n\n**android:excludeFromRecents**\n该标识用来标示是否应将该 Activity 启动的任务排除在最近使用的应用列表（即概览屏幕）之外。 也就是说，当该 Activity 是新任务的根 Activity 时，此属性确定任务是否应出现在最近使用的应用列表中。 如果应将任务排除在列表之外，请设置“true”；如果应将其包括在内，则设置“false”。 默认值为“false”。\n\n**android:exported=[“true” | “false”]**\n该标识用来指明Activity 是否可由其他应用的组件启动 —“true”表示可以，“false”表示不可以。若为“false”，则 Activity 只能由同一应用的组件或使用同一用户 ID 的不同应用启动。\n需要注意的是该默认值取决于 Activity 是否包含 Intent 过滤器。没有任何过滤器意味着 Activity 只能通过指定其确切的类名称进行调用。 这意味着 Activity 专供应用内部使用（因为其他应用不知晓其类名称）。 因此，在这种情况下，默认值为“false”。另一方面，至少存在一个过滤器意味着 Activity 专供外部使用，因此默认值为“true”。\n该属性并非限制 Activity 对其他应用开放度的唯一手段。 您还可以利用权限来限制哪些外部实体可以调用 Activity。\n\n**android:finishOnTaskLaunch**\n该标识用来标示每当用户再次启动其任务（在主屏幕上选择任务）时，是否应关闭（完成）现有 Activity 实例 —“true”表示应关闭，“false”表示不应关闭。 默认值为“false”。如果该属性和 allowTaskReparenting 均为“true”，则优先使用该属性。 Activity 的亲和关系会被忽略。 系统不是更改 Activity 的父项，而是将其销毁。\n\n**android:hardwareAccelerated=[“true” | “false”]**\n该标识用来表明是否应为此 Activity 启用硬件加速渲染 —“true”表示应启用，“false”表示不应启用，默认值为“false”。和 application 的标识不一样的是，该标示只针对 Activity。\n从 Android 3.0 开始，为应用提供了硬件加速 OpenGL 渲染器，以改善许多常见 2D 图形运算的性能。 启用硬件加速渲染器时，Canvas、Paint、Xfermode、ColorFilter、Shader 和 Camera 中的大多数运算都会得到加速。这可以提高动画、滚动的流畅度和总体响应速度，即便是并不明确使用框架 OpenGL 库的应用也会受益。 由于启用硬件加速会增加资源消耗，因此您的应用将占用更多内存。 \n需要注意的是，并非所有 OpenGL 2D 运算都会得到加速。如果您启用硬件加速渲染器，请对应用进行测试，以确保其在利用渲染器时不会出错。\n\n**android:icon**\n一个表示 Activity 的图标。该图标会在需要在屏幕上表示 Activity 时显示给用户。 例如，代表启动任务的 Activity 的图标显示在启动器窗口中。该图标通常附带标签（请参阅 android:label 属性）。\n必须将该属性设置为对包含图像定义的可绘制资源的引用。 如果未设置该属性，则改为使用为应用整体指定的图标（请参阅 元素的 icon 属性），activity 的该属性会覆盖 application 的该属性。这个 Activity 的图标 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认图标（请参阅 元素的 icon 属性）。\n\n**android:label=”string resource”**\n一种可由用户读取的 Activity 标签。该标签会在必须将 Activity 呈现给用户时显示在屏幕上。 它通常与 Activity 图标一并显示。如果未设置该属性，则改为使用为应用整体设置的标签（请参阅 元素的 label 属性），activity 的该属性会覆盖 application 的该属性。\n这个 Activity 的标签 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认标签（请参阅 元素的 label 属性）。应将该标签设置为对字符串资源的引用，以便可以像用户界面中的其他字符串那样进行本地化。不过，为便于开发应用，也可将其设置为原始字符串。\n\n**android:launchMode(Activity加载模式)**\n在多Activity开发中，有可能是自己应用之间的Activity跳转，或者夹带其他应用的可复用Activity。可能会希望跳转到原来某个Activity实例，而不是产生大量重复的Activity。这需要为Activity配置特定的加载模式，而不是使用默认的加载模式\n\nActivity有四种加载模式：\n\n`standard`、`singleTop`、`singleTask`、`singleInstance`(其中前两个是一组、后两个是一组)，默认为`standard`\n\n`standard`：就是intent将发送给新的实例，所以每次跳转都会生成新的activity。\n\n`singleTop`：也是发送新的实例，但不同standard的一点是，在请求的Activity正好位于栈顶时(配置成singleTop的Activity)，不会构造新的实例\n\n`singleTask`：和后面的singleInstance都只创建一个实例，当intent到来，需要创建设置为singleTask的Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。\n\n`singleInstance`：\n首先说明一下task这个概念，Task可以认为是一个栈，可放入多个Activity。比如启动一个应用，那么Android就创建了一个Task，然后启动这个应用的入口Activity，那在它的界面上调用其他的Activity也只是在这个task里面。那如果在多个task中共享一个Activity的话怎么办呢。举个例来说，如果开启一个导游服务类的应用程序，里面有个Activity是开启GOOGLE地图的，当按下home键退回到主菜单又启动GOOGLE地图的应用时，显示的就是刚才的地图，实际上是同一个Activity，实际上这就引入了singleInstance。singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示，这样就做到了共享。当然前提是这些应用都没有被销毁，所以刚才是按下的HOME键，如果按下了返回键，则无效\n\n**android:maxRecents=”integer”**\n该标识用来指明概览屏幕中位于此 Activity 根位置的任务数上限。 达到该条目数时，系统会从概览屏幕中移除最近最少使用的实例。 有效值为 1-50（低内存设备使用 25）；0 为无效值。 该值必须是整数，例如 50。默认值为 16。\n\n**android:multiprocess**\n该标识用来指明是否可以将 Activity 实例启动到启动该实例的组件进程内 —“true”表示可以，“false”表示不可以。默认值为“false”。\n正常情况下，新的 Activity 实例会启动到定义它的应用进程内，因此所有 Activity 实例都在同一进程内运行。 不过，如果该标志设置为“true”，Activity 实例便可在多个进程内运行，这样系统就能在任何使用实例的地方创建实例（前提是权限允许这样做），但是貌似使用的场景和案例不是很多。\n\n**android:name=”string”**\n该标识应该不用介绍了，用来指定 Activity 的类的名称，是 Activity 的子类。 该属性值应为完全限定类名称（例如，“com.example.project.DemoActivity”）。不过，为了简便起见，如果名称的第一个字符是句点（例如，“.DemoActivity”），则名称将追加到 元素中指定的软件包 com.example.project 名称之后。还有一个需要注意的是，应用一旦发布，即不应更改该名称（除非您设置了 android:exported=”false”），也就是说如果您的 Activity 有让其他应用使用到，那么最好不要修改名字，因为有可能其他应用是通过显式的方式指定的 Activity 名字，修改名字可能会造成其他应用无法正常使用甚至崩溃。\n该标识没有默认值。必须指定该名称。\n\n**android:noHistory**\n当用户离开 Activity 并且其在屏幕上不再可见时，是否应从 Activity 堆栈中将其移除并完成（调用其 finish() 方法）—“true”表示应将其完成，“false”表示不应将其完成。 默认值为“false”。“true”一值表示 Activity 不会留下历史轨迹。 它不会留在任务的 Activity 堆栈内，因此用户将无法返回 Activity。 所以有一点需要特别注意的是，在此情况下，如果从这个定义了 noHistory 的 Activity 启动另一个 Activity 来获取它的结果，系统永远不会调用 onActivityResult()，因为此时这个 Activity 已经关闭了。\n\n**android:parentActivityName=”string”**\nActivity 逻辑父项的类名称。此处的名称必须与为相应 元素的 android:name 属性指定的类名称一致。系统会读取该属性，以确定当用户按下操作栏中的“向上”按钮时应该启动哪一个 Activity。 系统还可以利用这些信息通过 TaskStackBuilder 合成 Activity 的返回栈\n关于向上导航的详细信息，可以看看  [Providing Up Navigation](https://developer.android.com/training/implementing-navigation/ancestral.html#NavigateUp)\n\n**android:permission=”string”**\n参见[android permission 1](http://blog.csdn.net/self_study/article/details/50074781)  和 [android permission 2](http://blog.csdn.net/self_study/article/details/50186435)\n\n**android:process=”string”**\n应在其中运行 Activity 的进程的名称。正常情况下，应用的所有组件都在为应用创建的默认进程名称内运行，您无需使用该属性。 但在必要时，您可以使用该属性替换默认进程名称，以便让应用组件散布到多个进程中。如果为该属性分配的名称以冒号（“:”）开头，则会在需要时创建应用专用的新进程，并且 Activity 会在该进程中运行。如果进程名称以小写字符开头，Activity 将在该名称的全局进程中运行，前提是它拥有相应的权限。这可以让不同应用中的组件共享一个进程，从而减少资源占用。\n上面提到的 Application 元素的 process 属性可为所有组件设置一个不同的默认进程名称。\n\n**android:relinquishTaskIdentity**\nActivity 是否将其任务标识符交给任务栈中在其之上的 Activity。 如果任务根 Activity 的该属性设置为“true”，则任务会用其内的下一个 Activity 的 Intent 替换基本 Intent。 如果下一个 Activity 的该属性也设置为“true”，则该 Activity 会将基本 Intent 给予其在同一任务中启动的任何 Activity。 系统继续为每个 Activity 执行此过程，直至遇到的某个 Activity 将该属性设置为“false”为止。 默认值为“false”。\n还有一个很有意思的功能是，如果该属性设置为“true”，则 Activity 还可利用 ActivityManager.TaskDescription 来更改概览屏幕中的标签、颜色和图标。\n\n**android:resizeableActivity=[“true” | “false”]**\n这个标识和 里面的作用一样，如果在 activity 里面定义的话则代表这个 activity 是否支持分屏模式。如果您将该属性设置为 true，则用户可以分屏和自由形状模式启动 Activity。 如果您将该属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。\n该属性是在 API 级别 24 添加的，如果您的应用面向 API 级别 24 或更高级别，但未对该属性指定值，则该属性的值默认设为 true。\n\n**android:screenOrientation**\nActivity 在设备上的显示方向。如果 Activity 是在多窗口模式下运行，系统会忽略该属性。它的取值可以是如下：\n| **Value**          | **Description**                          |\n| ------------------ | ---------------------------------------- |\n| “unspecified”      | 默认值。由系统选择方向。在不同设备上，系统使用的政策以及基于政策在特定上下文所做的选择可能有所差异。 |\n| “behind”           | 与 Activity 栈中紧接着它的 Activity 的方向相同。       |\n| “landscape”        | 横向方向（显示的宽度大于高度）。                         |\n| “portrait”         | 纵向方向（显示的高度大于宽度）。                         |\n| “reverseLandscape” | 与正常横向方向相反的横向方向。API 级别 9 中的新增配置。          |\n| “reversePortrait”  | 与正常纵向方向相反的纵向方向。API 级别 9 中的新增配置。          |\n| “sensorLandscape”  | 横向方向，但根据设备传感器，可以是正常或反向的横向方向。API 级别 9 中的新增配置。 |\n| “sensorPortrait”   | 纵向方向，但根据设备传感器，可以是正常或反向的纵向方向。API 级别 9 中的新增配置。 |\n| “userLandscape”    | 横向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的横向方向。 如果用户锁定了基于传感器的旋转，其行为与 landscape 相同，否则，其行为与 sensorLandscape 相同。API 级别 18 中的新增配置。 |\n| “userPortrait”     | 纵向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的纵向方向。 如果用户锁定了基于传感器的旋转，其行为与 portrait 相同，否则，其行为与 sensorPortrait 相同。API 级别 18 中的新增配置。 |\n| “sensor”           | 方向由设备方向传感器决定。显示方向取决于用户如何手持设备，它会在用户旋转设备时发生变化。 但一些设备默认情况下不会旋转到所有四种可能的方向。要允许全部四种方向，请使用 “fullSensor”。 |\n| “fullSensor”       | 方向由 4 种方向中任一方向的设备方向传感器决定。这与 “sensor” 类似，不同的是它允许所有 4 种可能的屏幕方向，无论设备正常情况下采用什么方向（例如，一些设备正常情况下不使用反向纵向或反向横向，但它支持这些方向）。 API 级别 9 中的新增配置。 |\n| “nosensor”         | 决定方向时不考虑物理方向传感器。传感器会被忽略，因此显示不会随用户对设备的移动而旋转。 除了这个区别，系统在选择方向时使用的政策与“unspecified”设置相同。 |\n| “user”             | 用户当前的首选方向。                               |\n| “fullUser”         | 如果用户锁定了基于传感器的旋转，其行为与 user 相同，否则，其行为与 fullSensor 相同，允许所有 4 种可能的屏幕方向。 API 级别 18 中的新增配置。 |\n| “locked”           | 将方向锁定在其当前的任意旋转方向。API 级别 18 中的新增配置。       |\n> 注：如果您声明其中一个横向或纵向值，系统将其视为对 Activity 运行方向的硬性要求。 因此，您声明的值支持通过 Google Play 之类的服务进行过滤，这样就能将您的应用只提供给支持 Activity 所要求方向的设备。 例如，如果您声明了 “landscape”、”reverseLandscape” 或 “sensorLandscape”，则您的应用将只提供给支持横向方向的设备。 不过，您还应通过 元素明确声明，您的应用要求采用纵向或横向方向。 例如，。这纯粹是 Google Play（以及其他支持它的服务）提供的一种过滤行为，平台本身并不能控制当设备仅支持特定方向时您的应用能否安装\n\n**android:stateNotNeeded**\n该标识用来指明能否在不保存 Activity 状态的情况下将其终止并成功重新启动 —“true”表示可在不考虑其之前状态的情况下重新启动，“false”表示需要之前状态，默认值为“false”。一般情况下，为保存资源而暂时关闭 Activity 前，系统会调用 onSaveInstanceState() 方法，该方法将 Activity 的当前状态存储在一个 Bundle 对象中，然后在 Activity 重新启动时将其传递给 onCreate() 。如果该属性设置为 true，系统可能不会调用 onSaveInstanceState()，并且会向 onCreate() 传递 null 而不是 Bundle，这样就与它在 Activity 首次启动时完全一样。\n这个标识又一个特别有用的地方是，true 设置可确保 Activity 能够在未保留状态时重新启动。 例如，显示主屏幕的 Activity 可以使用该设置来确保其由于某种原因崩溃时不会被移除。\n\n**android:supportsPictureInPicture=[“true” | “false”]**\n指定 Activity 是否支持画中画显示，设置该属性的同时，需要将 android:resizeableActivity 标识设置为 true，要不然系统会忽略该属性，可以看到设置完该属性之后，android TV 就可以实现手机端一个悬浮 activity 的效果，类似于 youtube 。\n所以同样这个标识和 android:resizeableActivity 一样都是 API24 版本添加的。\n\n**android:taskAffinity=”string”**\n这个标识用来指明一个 Activity 的亲和性，使用方案可以看看我的博客：android深入解析Activity的launchMode启动模式，Intent Flag，taskAffinity。从概念上讲，具有相同亲和关系的 Activity 归属同一任务（从用户的角度来看，则是归属同一“应用”）。 任务的亲和关系由其根 Activity 的亲和关系确定。亲和关系确定两件事 - Activity 更改到的父项任务（请参阅上面提到的 allowTaskReparenting 属性）和通过 FLAG_ACTIVITY_NEW_TASK 标志启动 Activity 时将用来容纳它的任务。默认情况下，应用中的所有 Activity 都具有相同的亲和关系。您可以设置该属性来以不同方式组合它们，甚至可以将在不同应用中定义的 Activity 置于同一任务内。 要指定 Activity 与任何任务均无亲和关系，请将其设置为空字符串。如果未设置该属性，则 Activity 继承为应用设置的亲和关系（可以参考 元素的 taskAffinity 属性），应用默认亲和关系的名称是 元素设置的 packageName。\n\n**android:theme=”resource or theme”**\n这个标识用的应该很多了，用来定义一个 activity 的样式，为一个资源的引用，它会自动将 Activity 的上下文设置为使用该主题（请参阅 setTheme()），它还可以引发 Activity 启动前的“启动”动画（以更加符合 Activity 的实际外观）。如果未设置该属性，则 Activity 继承通过 application 元素的 theme 属性为应用整体设置的主题。 如果该属性也未设置，则使用默认系统主题。\n\n**android:uiOptions=[“none” | “splitActionBarWhenNarrow”]**\n这个标识主要是用来针对 action bar 的，它有两个值：\n\n| **Value**                  | **Description**                          |\n| -------------------------- | ---------------------------------------- |\n| “none”                     | 无附加 UI 选项。这是默认值。                         |\n| “splitActionBarWhenNarrow” | 当水平空间受限时（例如在手持设备上的纵向模式下时）在屏幕底部添加一个栏以显示应用栏（也称为操作栏）中的操作项）。 应用栏不是以少量操作项形式出现在屏幕顶部的应用栏中，而是分成了顶部导航区和底部操作项栏。 这可以确保操作项以及顶部的导航和标题元素都能获得合理的空间。 菜单项不会拆分到两个栏中，它们始终一起出现。 |\n\n**android:windowSoftInputMode**\nactivity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。\n这个属性能影响两件事情：\n- 当 Activity 成为用户注意的焦点时软键盘的状态 — 隐藏还是可见\n- 对 Activity 主窗口所做的调整 — 是否将其尺寸调小以为软键盘腾出空间，或者当窗口部分被软键盘遮挡时是否平移其内容以使当前焦点可见\n  各值的含义：\n- stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置\n- stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示\n- stateHidden：用户选择activity时，软键盘总是被隐藏\n- stateAlwaysHidden：当用户选择 Activity 时 — 也就是说，当用户确实是向前导航到 Activity，而不是因离开另一 Activity 而返回时 — 隐藏软键盘。（当该Activity主窗口获取焦点时，软键盘也总是被隐藏的）\n- stateVisible：软键盘通常是可见的\n- stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态\n- adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示\n- adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间\n- adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分\n> adjustResize 和 adjustPan 的区别就在于前者是调整 Activity 的窗口尺寸来达到适配的目的，而 adjustPan 仅仅只是将窗口平移，界面的一部分就会被软键盘覆盖住，就不会被挤到软键盘之上了。","source":"_posts/android/android-config-activity.md","raw":"---\ntitle: Android配置文件详解-Activity\ndate: 2017-02-23 11:00:18\ntags: android\n---\n\n## Activity\n\n```java\n<activity android:allowEmbedded=[\"true\" | \"false\"]\n          android:allowTaskReparenting=[\"true\" | \"false\"]\n          android:alwaysRetainTaskState=[\"true\" | \"false\"]\n          android:alwaysRetainTaskState=[\"true\" | \"false\"]\n          android:autoRemoveFromRecents=[\"true\" | \"false\"]\n          android:banner=”drawable resource”\n          android:clearTaskOnLaunch=[\"true\" | \"false\"]\n          android:configChanges=[\"mcc\", \"mnc\", \"locale\",\n                                 \"touchscreen\", \"keyboard\", \"keyboardHidden\",\n                                 \"navigation\", \"screenLayout\", \"fontScale\",\n                                 \"uiMode\", \"orientation\",\"screenSize\",\n                                 \"smallestScreenSize\"]\n          android:documentLaunchMode=[\"intoExisting\" | \"always\" | \n“none” | “never”]\n          android:enabled=[\"true\" | \"false\"]\n          android:excludeFromRecents=[\"true\" | \"false\"]\n          android:exported=[\"true\" | \"false\"]\n          android:finishOnTaskLaunch=[\"true\" | \"false\"]\n          android:hardwareAccelerated=[\"true\" | \"false\"]\n          android:icon=\"drawable resource\"\n          android:label=\"string resource\"\n          android:launchMode=[\"standard\" | \"singleTop\" |\n                              \"singleTask\" | \"singleInstance\"]\n          android:maxRecents=\"integer\"\n          android:multiprocess=[\"true\" | \"false\"]\n          android:name=\"string\"\n          android:noHistory=[\"true\" | \"false\"]  \n          android:parentActivityName=\"string\"\n          android:permission=\"string\"\n          android:process=\"string\"\n          android:relinquishTaskIdentity=[\"true\" | \"false\"]\n          android:resizeableActivity=[\"true\" | \"false\"]\n          android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" |\n                                     \"portrait\" | \"reverseLandscape\" | \"sensorLandscape\" |\n                                     \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" |\n                                     \"sensor\" | \"fullSensor\" | \"nosensor\"]\n                                     \"user\" | \"fullUser\" | \"locked\"\n          android:stateNotNeeded=[\"true\" | \"false\"]\n          android:supportsPictureInPicture=[\"true\" | \"false\"]\n          android:taskAffinity=\"string\"\n          android:theme=\"resource or theme\"\n          android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]\n          android:windowSoftInputMode=[\"stateUnspecified\",\n                                       \"stateUnchanged\", \"stateHidden\",\n                                       \"stateAlwaysHidden\", \"stateVisible\",\n                                       \"stateAlwaysVisible\", \"adjustUnspecified\",\n                                       \"adjustResize\", \"adjustPan\"] >   \n</activity>\n```\n\n<!-- more -->\n\nandroid:allowEmbedded=[“true” | “false”]**\n这个标识一般为开发可穿戴设备时使用，表示该 Activity 可作为另一 Activity 的嵌入式子项启动。 它尤其适用于子项所在的容器（如 Display）为另一 Activity 所拥有的情况。 例如，用于 Wear 自定义通知的 Activity 必须声明此项，以便 Wear 在其上下文流中显示 Activity，后者位于另一进程中。该属性的默认值为 false。\n\n**android:allowTaskReparenting=[“true” | “false”]**\n这个标示和 Application 的标识意义一样，所以如果同时声明该标识，这个标识会覆盖 Application 的标识\n\n**android:alwaysRetainTaskState**\n这个标识用来指示系统是否始终保持 Activity 所在任务的状态 —“true”表示保持，“false”表示允许系统在特定情况下将任务重置到其初始状态。 默认值为“false”。该属性只对任务的根 Activity 有意义；对于所有其他 Activity，均忽略该属性。\n正常情况下，当用户从主屏幕重新选择某个任务时，系统会在特定情况下清除该任务（从根 Activity 之上的堆栈中移除所有 Activity）。 系统通常会在用户一段时间（如 30 分钟）内未访问任务时执行此操作。\n不过，如果该属性的值是“true”，则无论用户如何到达任务，将始终返回到最后状态的任务。 例如，在网络浏览器这类存在大量用户不愿失去的状态（如多个打开的标签）的应用中，该属性会很有用。\n\n**android:autoRemoveFromRecents=[\"true\" | \"false\"]**\n这个标识为 API21 版本添加，由具有该属性的 Activity 启动的任务是否一直保留在概览屏幕中，直至任务中的最后一个 Activity 完成为止。 若为 true，则自动从概览屏幕中移除任务。 它会替换调用方使用的 FLAG_ACTIVITY_RETAIN_IN_RECENTS。 它必须是布尔值“true”或“false”。\n\nandroid:banner=”drawable resource”\n这个和 application 里面的 banner 标识一样，也是用在 android TV 上的\n\n**android:clearTaskOnLaunch** \n这个标识用来指明当应用从主屏幕重新启动时是否都从中移除除根 Activity 之外的所有 Activity，true 表示始终将任务清除到只剩其根 Activity，false 表示不清除，默认值为 false。需要注意的是该属性只对启动新任务的 Activity（根 Activity）有意义；对于任务中的所有其他 Activity，均忽略该属性。当值为“false”时，可在某些情况下清除任务中的 Activity（参考结合 alwaysRetainTaskState 属性），但并非一律可以。如果该属性和 allowTaskReparenting 的值均为“true”，则如上所述，任何可以更改父项的 Activity 都将转移到与其有亲和关系的任务；其余 Activity 随即被移除。\n例如，假定有人从主屏幕启动了 Activity P，然后从那里转到 Activity Q。该用户接着按了主屏幕按钮，然后返回到 Activity P。正常情况下，用户将看到 Activity Q，因为那是其最后在 P 的任务中执行的 Activity。 不过，如果 P 将此标志设置为“true”，则当用户按下主屏幕将任务转入后台时，其上的所有 Activity（在本例中为 Q）都会被移除。 因此用户返回任务时只会看到 P。\n\n**android:configChanges**\n列出 Activity 将自行处理的配置更改。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity 重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged() 方法。以下为该属性的值，多个值使用“|”分隔 — 例如，“locale|navigation|orientation”：\n| **Value**            | **Description**                          |\n| -------------------- | ---------------------------------------- |\n| “mcc”                | IMSI 移动国家/地区代码 (MCC) 发生了变化 - 检测到了 SIM 并更新了 MCC。 |\n| “mnc”                | IMSI 移动网络代码 (MNC) 发生了变化 - 检测到了 SIM 并更新了 MNC。 |\n| locale”              | 语言区域发生了变化 — 用户为文本选择了新的显示语言。              |\n| “touchscreen”        | 触摸屏发生了变化。（这种情况通常永远不会发生。）                 |\n| “keyboard”           | 键盘类型发生了变化 — 例如，用户插入了一个外置键盘。              |\n| “keyboardHidden”     | 键盘无障碍功能发生了变化 — 例如，用户显示了硬件键盘。             |\n| “navigation”         | 导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）       |\n| “screenLayout”       | 屏幕布局发生了变化 — 这可能是由激活了其他显示方式所致。            |\n| “fontScale”          | 字体缩放系数发生了变化 — 用户选择了新的全局字号。               |\n| “uiMode”             | 用户界面模式发生了变化 — 这可能是因用户将设备放入桌面/车载基座或夜间模式发生变化所致。 请参阅 [UiModeManager](https://developer.android.com/reference/android/app/UiModeManager.html)。 此项为 API 级别 8 中新增配置。 |\n| “orientation”        | 屏幕方向发生了变化 — 用户旋转了设备。 注：如果您的应用面向 API 级别 13 或更高级别（按照 minSdkVersion 和 targetSdkVersion 属性所声明的级别），则还应声明 “screenSize” 配置，因为当设备在横向与纵向之间切换时，该配置也会发生变化。 |\n| “screenSize”         | 当前可用屏幕尺寸发生了变化。它表示当前可用尺寸相对于当前纵横比的变化，因此会在用户在横向与纵向之间切换时发生变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |\n| “smallestScreenSize” | 物理屏幕尺寸发生了变化。它表示与方向无关的尺寸变化，因此只有在实际物理屏幕尺寸发生变化（如切换到外部显示器）时才会变化。对此配置的变更对应于smallestWidth 配置的变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |\n| “layoutDirection”    | 布局方向发生了变化。例如，从从左至右 (LTR) 更改为从右至左 (RTL)。 此项为 API 级别 17 中新增配置。 |\n所有这些配置变更都可能影响应用看到的资源值。 因此，调用 onConfigurationChanged() 时，通常有必要再次获取所有资源（包括视图布局、可绘制对象等），以正确处理变化。 \n　　我们平常接触到最多的就是屏幕的旋转，屏幕的旋转如果在没有特殊设置的情况下会销毁当前的 Activity 重新创建一个新的，为了避免创建新的，就可以在 AndroidMainfest.xml 中对指定 Activity 对应的 配置android:configChanges=”orientation”，这样，每次旋转方向时，只有 onConfigurationChanged 方法被调用，没有了销毁重建的过程。\n　　\n**android:documentLaunchMode=[“intoExisting” | “always” | “none” | “never”]**\n指定每次启动任务时应如何向其中添加新的 Activity 实例。 该属性允许用户让多个来自同一应用的文档出现在概览屏幕（recent app）中。该属性有四个值，会在用户使用该应用打开文档时产生以下效果：\n\n| **Value**      | **Description**                          |\n| -------------- | ---------------------------------------- |\n| “intoExisting” | Activity 会为文档重复使用现有任务。使用该值与不设置 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志、但设置 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 标志所产生的效果相同，如使用 [Intent 标志添加任务中](https://developer.android.com/guide/components/recents.html#flag-new-doc)所述。 |\n| “always”       | Activity 为文档创建新任务，即便文档已打开也是如此。 这与同时设置 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 和 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志的效果相同。 |\n| “none”         | 该 Activity 不会为 Activity 创建新任务。这是默认值，它只会在设置了 [FLAG_ACTIVITY_NEW_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK) 时创建新任务。 概览屏幕将按其默认方式对待此 Activity：为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。 |\n| “never”        | 即使 Intent 包含 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT)，该 Activity 也不会启动到新文档之中。 设置此值会替代 [FLAG_ACTIVITY_NEW_DOCUMENT](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT) 和 [FLAG_ACTIVITY_MULTIPLE_TASK](https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK) 标志的行为（如果在 Activity 中设置了其中一个标志），并且概览屏幕将为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。 |\n> 注：对于除“none”和“never”以外的值，必须使用 launchMode=”standard” 定义 Activity。 如果未指定此属性，则使用 documentLaunchMode=”none”。\n\n**android:enabled=[“true” | “false”]**\n该属性用来标示系统是否可将 Activity 实例化 — “true” 表示可以，“false”表示不可以。 默认值为“true”。\n上面提到了 元素具有自己的 enabled 属性，该属性适用于所有应用组件，包括 Activity。 和 属性必须都是“true”（因为它们都默认使用该值），系统才能将 Activity 实例化。 如果任何一个属性是“false”，则无法进行实例化。\n\n**android:excludeFromRecents**\n该标识用来标示是否应将该 Activity 启动的任务排除在最近使用的应用列表（即概览屏幕）之外。 也就是说，当该 Activity 是新任务的根 Activity 时，此属性确定任务是否应出现在最近使用的应用列表中。 如果应将任务排除在列表之外，请设置“true”；如果应将其包括在内，则设置“false”。 默认值为“false”。\n\n**android:exported=[“true” | “false”]**\n该标识用来指明Activity 是否可由其他应用的组件启动 —“true”表示可以，“false”表示不可以。若为“false”，则 Activity 只能由同一应用的组件或使用同一用户 ID 的不同应用启动。\n需要注意的是该默认值取决于 Activity 是否包含 Intent 过滤器。没有任何过滤器意味着 Activity 只能通过指定其确切的类名称进行调用。 这意味着 Activity 专供应用内部使用（因为其他应用不知晓其类名称）。 因此，在这种情况下，默认值为“false”。另一方面，至少存在一个过滤器意味着 Activity 专供外部使用，因此默认值为“true”。\n该属性并非限制 Activity 对其他应用开放度的唯一手段。 您还可以利用权限来限制哪些外部实体可以调用 Activity。\n\n**android:finishOnTaskLaunch**\n该标识用来标示每当用户再次启动其任务（在主屏幕上选择任务）时，是否应关闭（完成）现有 Activity 实例 —“true”表示应关闭，“false”表示不应关闭。 默认值为“false”。如果该属性和 allowTaskReparenting 均为“true”，则优先使用该属性。 Activity 的亲和关系会被忽略。 系统不是更改 Activity 的父项，而是将其销毁。\n\n**android:hardwareAccelerated=[“true” | “false”]**\n该标识用来表明是否应为此 Activity 启用硬件加速渲染 —“true”表示应启用，“false”表示不应启用，默认值为“false”。和 application 的标识不一样的是，该标示只针对 Activity。\n从 Android 3.0 开始，为应用提供了硬件加速 OpenGL 渲染器，以改善许多常见 2D 图形运算的性能。 启用硬件加速渲染器时，Canvas、Paint、Xfermode、ColorFilter、Shader 和 Camera 中的大多数运算都会得到加速。这可以提高动画、滚动的流畅度和总体响应速度，即便是并不明确使用框架 OpenGL 库的应用也会受益。 由于启用硬件加速会增加资源消耗，因此您的应用将占用更多内存。 \n需要注意的是，并非所有 OpenGL 2D 运算都会得到加速。如果您启用硬件加速渲染器，请对应用进行测试，以确保其在利用渲染器时不会出错。\n\n**android:icon**\n一个表示 Activity 的图标。该图标会在需要在屏幕上表示 Activity 时显示给用户。 例如，代表启动任务的 Activity 的图标显示在启动器窗口中。该图标通常附带标签（请参阅 android:label 属性）。\n必须将该属性设置为对包含图像定义的可绘制资源的引用。 如果未设置该属性，则改为使用为应用整体指定的图标（请参阅 元素的 icon 属性），activity 的该属性会覆盖 application 的该属性。这个 Activity 的图标 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认图标（请参阅 元素的 icon 属性）。\n\n**android:label=”string resource”**\n一种可由用户读取的 Activity 标签。该标签会在必须将 Activity 呈现给用户时显示在屏幕上。 它通常与 Activity 图标一并显示。如果未设置该属性，则改为使用为应用整体设置的标签（请参阅 元素的 label 属性），activity 的该属性会覆盖 application 的该属性。\n这个 Activity 的标签 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认标签（请参阅 元素的 label 属性）。应将该标签设置为对字符串资源的引用，以便可以像用户界面中的其他字符串那样进行本地化。不过，为便于开发应用，也可将其设置为原始字符串。\n\n**android:launchMode(Activity加载模式)**\n在多Activity开发中，有可能是自己应用之间的Activity跳转，或者夹带其他应用的可复用Activity。可能会希望跳转到原来某个Activity实例，而不是产生大量重复的Activity。这需要为Activity配置特定的加载模式，而不是使用默认的加载模式\n\nActivity有四种加载模式：\n\n`standard`、`singleTop`、`singleTask`、`singleInstance`(其中前两个是一组、后两个是一组)，默认为`standard`\n\n`standard`：就是intent将发送给新的实例，所以每次跳转都会生成新的activity。\n\n`singleTop`：也是发送新的实例，但不同standard的一点是，在请求的Activity正好位于栈顶时(配置成singleTop的Activity)，不会构造新的实例\n\n`singleTask`：和后面的singleInstance都只创建一个实例，当intent到来，需要创建设置为singleTask的Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。\n\n`singleInstance`：\n首先说明一下task这个概念，Task可以认为是一个栈，可放入多个Activity。比如启动一个应用，那么Android就创建了一个Task，然后启动这个应用的入口Activity，那在它的界面上调用其他的Activity也只是在这个task里面。那如果在多个task中共享一个Activity的话怎么办呢。举个例来说，如果开启一个导游服务类的应用程序，里面有个Activity是开启GOOGLE地图的，当按下home键退回到主菜单又启动GOOGLE地图的应用时，显示的就是刚才的地图，实际上是同一个Activity，实际上这就引入了singleInstance。singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示，这样就做到了共享。当然前提是这些应用都没有被销毁，所以刚才是按下的HOME键，如果按下了返回键，则无效\n\n**android:maxRecents=”integer”**\n该标识用来指明概览屏幕中位于此 Activity 根位置的任务数上限。 达到该条目数时，系统会从概览屏幕中移除最近最少使用的实例。 有效值为 1-50（低内存设备使用 25）；0 为无效值。 该值必须是整数，例如 50。默认值为 16。\n\n**android:multiprocess**\n该标识用来指明是否可以将 Activity 实例启动到启动该实例的组件进程内 —“true”表示可以，“false”表示不可以。默认值为“false”。\n正常情况下，新的 Activity 实例会启动到定义它的应用进程内，因此所有 Activity 实例都在同一进程内运行。 不过，如果该标志设置为“true”，Activity 实例便可在多个进程内运行，这样系统就能在任何使用实例的地方创建实例（前提是权限允许这样做），但是貌似使用的场景和案例不是很多。\n\n**android:name=”string”**\n该标识应该不用介绍了，用来指定 Activity 的类的名称，是 Activity 的子类。 该属性值应为完全限定类名称（例如，“com.example.project.DemoActivity”）。不过，为了简便起见，如果名称的第一个字符是句点（例如，“.DemoActivity”），则名称将追加到 元素中指定的软件包 com.example.project 名称之后。还有一个需要注意的是，应用一旦发布，即不应更改该名称（除非您设置了 android:exported=”false”），也就是说如果您的 Activity 有让其他应用使用到，那么最好不要修改名字，因为有可能其他应用是通过显式的方式指定的 Activity 名字，修改名字可能会造成其他应用无法正常使用甚至崩溃。\n该标识没有默认值。必须指定该名称。\n\n**android:noHistory**\n当用户离开 Activity 并且其在屏幕上不再可见时，是否应从 Activity 堆栈中将其移除并完成（调用其 finish() 方法）—“true”表示应将其完成，“false”表示不应将其完成。 默认值为“false”。“true”一值表示 Activity 不会留下历史轨迹。 它不会留在任务的 Activity 堆栈内，因此用户将无法返回 Activity。 所以有一点需要特别注意的是，在此情况下，如果从这个定义了 noHistory 的 Activity 启动另一个 Activity 来获取它的结果，系统永远不会调用 onActivityResult()，因为此时这个 Activity 已经关闭了。\n\n**android:parentActivityName=”string”**\nActivity 逻辑父项的类名称。此处的名称必须与为相应 元素的 android:name 属性指定的类名称一致。系统会读取该属性，以确定当用户按下操作栏中的“向上”按钮时应该启动哪一个 Activity。 系统还可以利用这些信息通过 TaskStackBuilder 合成 Activity 的返回栈\n关于向上导航的详细信息，可以看看  [Providing Up Navigation](https://developer.android.com/training/implementing-navigation/ancestral.html#NavigateUp)\n\n**android:permission=”string”**\n参见[android permission 1](http://blog.csdn.net/self_study/article/details/50074781)  和 [android permission 2](http://blog.csdn.net/self_study/article/details/50186435)\n\n**android:process=”string”**\n应在其中运行 Activity 的进程的名称。正常情况下，应用的所有组件都在为应用创建的默认进程名称内运行，您无需使用该属性。 但在必要时，您可以使用该属性替换默认进程名称，以便让应用组件散布到多个进程中。如果为该属性分配的名称以冒号（“:”）开头，则会在需要时创建应用专用的新进程，并且 Activity 会在该进程中运行。如果进程名称以小写字符开头，Activity 将在该名称的全局进程中运行，前提是它拥有相应的权限。这可以让不同应用中的组件共享一个进程，从而减少资源占用。\n上面提到的 Application 元素的 process 属性可为所有组件设置一个不同的默认进程名称。\n\n**android:relinquishTaskIdentity**\nActivity 是否将其任务标识符交给任务栈中在其之上的 Activity。 如果任务根 Activity 的该属性设置为“true”，则任务会用其内的下一个 Activity 的 Intent 替换基本 Intent。 如果下一个 Activity 的该属性也设置为“true”，则该 Activity 会将基本 Intent 给予其在同一任务中启动的任何 Activity。 系统继续为每个 Activity 执行此过程，直至遇到的某个 Activity 将该属性设置为“false”为止。 默认值为“false”。\n还有一个很有意思的功能是，如果该属性设置为“true”，则 Activity 还可利用 ActivityManager.TaskDescription 来更改概览屏幕中的标签、颜色和图标。\n\n**android:resizeableActivity=[“true” | “false”]**\n这个标识和 里面的作用一样，如果在 activity 里面定义的话则代表这个 activity 是否支持分屏模式。如果您将该属性设置为 true，则用户可以分屏和自由形状模式启动 Activity。 如果您将该属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。\n该属性是在 API 级别 24 添加的，如果您的应用面向 API 级别 24 或更高级别，但未对该属性指定值，则该属性的值默认设为 true。\n\n**android:screenOrientation**\nActivity 在设备上的显示方向。如果 Activity 是在多窗口模式下运行，系统会忽略该属性。它的取值可以是如下：\n| **Value**          | **Description**                          |\n| ------------------ | ---------------------------------------- |\n| “unspecified”      | 默认值。由系统选择方向。在不同设备上，系统使用的政策以及基于政策在特定上下文所做的选择可能有所差异。 |\n| “behind”           | 与 Activity 栈中紧接着它的 Activity 的方向相同。       |\n| “landscape”        | 横向方向（显示的宽度大于高度）。                         |\n| “portrait”         | 纵向方向（显示的高度大于宽度）。                         |\n| “reverseLandscape” | 与正常横向方向相反的横向方向。API 级别 9 中的新增配置。          |\n| “reversePortrait”  | 与正常纵向方向相反的纵向方向。API 级别 9 中的新增配置。          |\n| “sensorLandscape”  | 横向方向，但根据设备传感器，可以是正常或反向的横向方向。API 级别 9 中的新增配置。 |\n| “sensorPortrait”   | 纵向方向，但根据设备传感器，可以是正常或反向的纵向方向。API 级别 9 中的新增配置。 |\n| “userLandscape”    | 横向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的横向方向。 如果用户锁定了基于传感器的旋转，其行为与 landscape 相同，否则，其行为与 sensorLandscape 相同。API 级别 18 中的新增配置。 |\n| “userPortrait”     | 纵向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的纵向方向。 如果用户锁定了基于传感器的旋转，其行为与 portrait 相同，否则，其行为与 sensorPortrait 相同。API 级别 18 中的新增配置。 |\n| “sensor”           | 方向由设备方向传感器决定。显示方向取决于用户如何手持设备，它会在用户旋转设备时发生变化。 但一些设备默认情况下不会旋转到所有四种可能的方向。要允许全部四种方向，请使用 “fullSensor”。 |\n| “fullSensor”       | 方向由 4 种方向中任一方向的设备方向传感器决定。这与 “sensor” 类似，不同的是它允许所有 4 种可能的屏幕方向，无论设备正常情况下采用什么方向（例如，一些设备正常情况下不使用反向纵向或反向横向，但它支持这些方向）。 API 级别 9 中的新增配置。 |\n| “nosensor”         | 决定方向时不考虑物理方向传感器。传感器会被忽略，因此显示不会随用户对设备的移动而旋转。 除了这个区别，系统在选择方向时使用的政策与“unspecified”设置相同。 |\n| “user”             | 用户当前的首选方向。                               |\n| “fullUser”         | 如果用户锁定了基于传感器的旋转，其行为与 user 相同，否则，其行为与 fullSensor 相同，允许所有 4 种可能的屏幕方向。 API 级别 18 中的新增配置。 |\n| “locked”           | 将方向锁定在其当前的任意旋转方向。API 级别 18 中的新增配置。       |\n> 注：如果您声明其中一个横向或纵向值，系统将其视为对 Activity 运行方向的硬性要求。 因此，您声明的值支持通过 Google Play 之类的服务进行过滤，这样就能将您的应用只提供给支持 Activity 所要求方向的设备。 例如，如果您声明了 “landscape”、”reverseLandscape” 或 “sensorLandscape”，则您的应用将只提供给支持横向方向的设备。 不过，您还应通过 元素明确声明，您的应用要求采用纵向或横向方向。 例如，。这纯粹是 Google Play（以及其他支持它的服务）提供的一种过滤行为，平台本身并不能控制当设备仅支持特定方向时您的应用能否安装\n\n**android:stateNotNeeded**\n该标识用来指明能否在不保存 Activity 状态的情况下将其终止并成功重新启动 —“true”表示可在不考虑其之前状态的情况下重新启动，“false”表示需要之前状态，默认值为“false”。一般情况下，为保存资源而暂时关闭 Activity 前，系统会调用 onSaveInstanceState() 方法，该方法将 Activity 的当前状态存储在一个 Bundle 对象中，然后在 Activity 重新启动时将其传递给 onCreate() 。如果该属性设置为 true，系统可能不会调用 onSaveInstanceState()，并且会向 onCreate() 传递 null 而不是 Bundle，这样就与它在 Activity 首次启动时完全一样。\n这个标识又一个特别有用的地方是，true 设置可确保 Activity 能够在未保留状态时重新启动。 例如，显示主屏幕的 Activity 可以使用该设置来确保其由于某种原因崩溃时不会被移除。\n\n**android:supportsPictureInPicture=[“true” | “false”]**\n指定 Activity 是否支持画中画显示，设置该属性的同时，需要将 android:resizeableActivity 标识设置为 true，要不然系统会忽略该属性，可以看到设置完该属性之后，android TV 就可以实现手机端一个悬浮 activity 的效果，类似于 youtube 。\n所以同样这个标识和 android:resizeableActivity 一样都是 API24 版本添加的。\n\n**android:taskAffinity=”string”**\n这个标识用来指明一个 Activity 的亲和性，使用方案可以看看我的博客：android深入解析Activity的launchMode启动模式，Intent Flag，taskAffinity。从概念上讲，具有相同亲和关系的 Activity 归属同一任务（从用户的角度来看，则是归属同一“应用”）。 任务的亲和关系由其根 Activity 的亲和关系确定。亲和关系确定两件事 - Activity 更改到的父项任务（请参阅上面提到的 allowTaskReparenting 属性）和通过 FLAG_ACTIVITY_NEW_TASK 标志启动 Activity 时将用来容纳它的任务。默认情况下，应用中的所有 Activity 都具有相同的亲和关系。您可以设置该属性来以不同方式组合它们，甚至可以将在不同应用中定义的 Activity 置于同一任务内。 要指定 Activity 与任何任务均无亲和关系，请将其设置为空字符串。如果未设置该属性，则 Activity 继承为应用设置的亲和关系（可以参考 元素的 taskAffinity 属性），应用默认亲和关系的名称是 元素设置的 packageName。\n\n**android:theme=”resource or theme”**\n这个标识用的应该很多了，用来定义一个 activity 的样式，为一个资源的引用，它会自动将 Activity 的上下文设置为使用该主题（请参阅 setTheme()），它还可以引发 Activity 启动前的“启动”动画（以更加符合 Activity 的实际外观）。如果未设置该属性，则 Activity 继承通过 application 元素的 theme 属性为应用整体设置的主题。 如果该属性也未设置，则使用默认系统主题。\n\n**android:uiOptions=[“none” | “splitActionBarWhenNarrow”]**\n这个标识主要是用来针对 action bar 的，它有两个值：\n\n| **Value**                  | **Description**                          |\n| -------------------------- | ---------------------------------------- |\n| “none”                     | 无附加 UI 选项。这是默认值。                         |\n| “splitActionBarWhenNarrow” | 当水平空间受限时（例如在手持设备上的纵向模式下时）在屏幕底部添加一个栏以显示应用栏（也称为操作栏）中的操作项）。 应用栏不是以少量操作项形式出现在屏幕顶部的应用栏中，而是分成了顶部导航区和底部操作项栏。 这可以确保操作项以及顶部的导航和标题元素都能获得合理的空间。 菜单项不会拆分到两个栏中，它们始终一起出现。 |\n\n**android:windowSoftInputMode**\nactivity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。\n这个属性能影响两件事情：\n- 当 Activity 成为用户注意的焦点时软键盘的状态 — 隐藏还是可见\n- 对 Activity 主窗口所做的调整 — 是否将其尺寸调小以为软键盘腾出空间，或者当窗口部分被软键盘遮挡时是否平移其内容以使当前焦点可见\n  各值的含义：\n- stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置\n- stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示\n- stateHidden：用户选择activity时，软键盘总是被隐藏\n- stateAlwaysHidden：当用户选择 Activity 时 — 也就是说，当用户确实是向前导航到 Activity，而不是因离开另一 Activity 而返回时 — 隐藏软键盘。（当该Activity主窗口获取焦点时，软键盘也总是被隐藏的）\n- stateVisible：软键盘通常是可见的\n- stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态\n- adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示\n- adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间\n- adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分\n> adjustResize 和 adjustPan 的区别就在于前者是调整 Activity 的窗口尺寸来达到适配的目的，而 adjustPan 仅仅只是将窗口平移，界面的一部分就会被软键盘覆盖住，就不会被挤到软键盘之上了。","slug":"android/android-config-activity","published":1,"updated":"2017-02-23T07:19:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ty000hfq9m2ox12zev","content":"<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity android:allowEmbedded=[\"true\" | \"false\"]</div><div class=\"line\">          android:allowTaskReparenting=[\"true\" | \"false\"]</div><div class=\"line\">          android:alwaysRetainTaskState=[\"true\" | \"false\"]</div><div class=\"line\">          android:alwaysRetainTaskState=[\"true\" | \"false\"]</div><div class=\"line\">          android:autoRemoveFromRecents=[\"true\" | \"false\"]</div><div class=\"line\">          android:banner=”drawable resource”</div><div class=\"line\">          android:clearTaskOnLaunch=[\"true\" | \"false\"]</div><div class=\"line\">          android:configChanges=[\"mcc\", \"mnc\", \"locale\",</div><div class=\"line\">                                 \"touchscreen\", \"keyboard\", \"keyboardHidden\",</div><div class=\"line\">                                 \"navigation\", \"screenLayout\", \"fontScale\",</div><div class=\"line\">                                 \"uiMode\", \"orientation\",\"screenSize\",</div><div class=\"line\">                                 \"smallestScreenSize\"]</div><div class=\"line\">          android:documentLaunchMode=[\"intoExisting\" | \"always\" | </div><div class=\"line\">“none” | “never”]</div><div class=\"line\">          android:enabled=[\"true\" | \"false\"]</div><div class=\"line\">          android:excludeFromRecents=[\"true\" | \"false\"]</div><div class=\"line\">          android:exported=[\"true\" | \"false\"]</div><div class=\"line\">          android:finishOnTaskLaunch=[\"true\" | \"false\"]</div><div class=\"line\">          android:hardwareAccelerated=[\"true\" | \"false\"]</div><div class=\"line\">          android:icon=\"drawable resource\"</div><div class=\"line\">          android:label=\"string resource\"</div><div class=\"line\">          android:launchMode=[\"standard\" | \"singleTop\" |</div><div class=\"line\">                              \"singleTask\" | \"singleInstance\"]</div><div class=\"line\">          android:maxRecents=\"integer\"</div><div class=\"line\">          android:multiprocess=[\"true\" | \"false\"]</div><div class=\"line\">          android:name=\"string\"</div><div class=\"line\">          android:noHistory=[\"true\" | \"false\"]  </div><div class=\"line\">          android:parentActivityName=\"string\"</div><div class=\"line\">          android:permission=\"string\"</div><div class=\"line\">          android:process=\"string\"</div><div class=\"line\">          android:relinquishTaskIdentity=[\"true\" | \"false\"]</div><div class=\"line\">          android:resizeableActivity=[\"true\" | \"false\"]</div><div class=\"line\">          android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" |</div><div class=\"line\">                                     \"portrait\" | \"reverseLandscape\" | \"sensorLandscape\" |</div><div class=\"line\">                                     \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" |</div><div class=\"line\">                                     \"sensor\" | \"fullSensor\" | \"nosensor\"]</div><div class=\"line\">                                     \"user\" | \"fullUser\" | \"locked\"</div><div class=\"line\">          android:stateNotNeeded=[\"true\" | \"false\"]</div><div class=\"line\">          android:supportsPictureInPicture=[\"true\" | \"false\"]</div><div class=\"line\">          android:taskAffinity=\"string\"</div><div class=\"line\">          android:theme=\"resource or theme\"</div><div class=\"line\">          android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]</div><div class=\"line\">          android:windowSoftInputMode=[\"stateUnspecified\",</div><div class=\"line\">                                       \"stateUnchanged\", \"stateHidden\",</div><div class=\"line\">                                       \"stateAlwaysHidden\", \"stateVisible\",</div><div class=\"line\">                                       \"stateAlwaysVisible\", \"adjustUnspecified\",</div><div class=\"line\">                                       \"adjustResize\", \"adjustPan\"] &gt;   </div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>android:allowEmbedded=[“true” | “false”]**<br>这个标识一般为开发可穿戴设备时使用，表示该 Activity 可作为另一 Activity 的嵌入式子项启动。 它尤其适用于子项所在的容器（如 Display）为另一 Activity 所拥有的情况。 例如，用于 Wear 自定义通知的 Activity 必须声明此项，以便 Wear 在其上下文流中显示 Activity，后者位于另一进程中。该属性的默认值为 false。</p>\n<p><strong>android:allowTaskReparenting=[“true” | “false”]</strong><br>这个标示和 Application 的标识意义一样，所以如果同时声明该标识，这个标识会覆盖 Application 的标识</p>\n<p><strong>android:alwaysRetainTaskState</strong><br>这个标识用来指示系统是否始终保持 Activity 所在任务的状态 —“true”表示保持，“false”表示允许系统在特定情况下将任务重置到其初始状态。 默认值为“false”。该属性只对任务的根 Activity 有意义；对于所有其他 Activity，均忽略该属性。<br>正常情况下，当用户从主屏幕重新选择某个任务时，系统会在特定情况下清除该任务（从根 Activity 之上的堆栈中移除所有 Activity）。 系统通常会在用户一段时间（如 30 分钟）内未访问任务时执行此操作。<br>不过，如果该属性的值是“true”，则无论用户如何到达任务，将始终返回到最后状态的任务。 例如，在网络浏览器这类存在大量用户不愿失去的状态（如多个打开的标签）的应用中，该属性会很有用。</p>\n<p><strong>android:autoRemoveFromRecents=[“true” | “false”]</strong><br>这个标识为 API21 版本添加，由具有该属性的 Activity 启动的任务是否一直保留在概览屏幕中，直至任务中的最后一个 Activity 完成为止。 若为 true，则自动从概览屏幕中移除任务。 它会替换调用方使用的 FLAG_ACTIVITY_RETAIN_IN_RECENTS。 它必须是布尔值“true”或“false”。</p>\n<p>android:banner=”drawable resource”<br>这个和 application 里面的 banner 标识一样，也是用在 android TV 上的</p>\n<p><strong>android:clearTaskOnLaunch</strong><br>这个标识用来指明当应用从主屏幕重新启动时是否都从中移除除根 Activity 之外的所有 Activity，true 表示始终将任务清除到只剩其根 Activity，false 表示不清除，默认值为 false。需要注意的是该属性只对启动新任务的 Activity（根 Activity）有意义；对于任务中的所有其他 Activity，均忽略该属性。当值为“false”时，可在某些情况下清除任务中的 Activity（参考结合 alwaysRetainTaskState 属性），但并非一律可以。如果该属性和 allowTaskReparenting 的值均为“true”，则如上所述，任何可以更改父项的 Activity 都将转移到与其有亲和关系的任务；其余 Activity 随即被移除。<br>例如，假定有人从主屏幕启动了 Activity P，然后从那里转到 Activity Q。该用户接着按了主屏幕按钮，然后返回到 Activity P。正常情况下，用户将看到 Activity Q，因为那是其最后在 P 的任务中执行的 Activity。 不过，如果 P 将此标志设置为“true”，则当用户按下主屏幕将任务转入后台时，其上的所有 Activity（在本例中为 Q）都会被移除。 因此用户返回任务时只会看到 P。</p>\n<p><strong>android:configChanges</strong><br>列出 Activity 将自行处理的配置更改。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity 重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged() 方法。以下为该属性的值，多个值使用“|”分隔 — 例如，“locale|navigation|orientation”：<br>| <strong>Value</strong>            | <strong>Description</strong>                          |<br>| ——————– | —————————————- |<br>| “mcc”                | IMSI 移动国家/地区代码 (MCC) 发生了变化 - 检测到了 SIM 并更新了 MCC。 |<br>| “mnc”                | IMSI 移动网络代码 (MNC) 发生了变化 - 检测到了 SIM 并更新了 MNC。 |<br>| locale”              | 语言区域发生了变化 — 用户为文本选择了新的显示语言。              |<br>| “touchscreen”        | 触摸屏发生了变化。（这种情况通常永远不会发生。）                 |<br>| “keyboard”           | 键盘类型发生了变化 — 例如，用户插入了一个外置键盘。              |<br>| “keyboardHidden”     | 键盘无障碍功能发生了变化 — 例如，用户显示了硬件键盘。             |<br>| “navigation”         | 导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）       |<br>| “screenLayout”       | 屏幕布局发生了变化 — 这可能是由激活了其他显示方式所致。            |<br>| “fontScale”          | 字体缩放系数发生了变化 — 用户选择了新的全局字号。               |<br>| “uiMode”             | 用户界面模式发生了变化 — 这可能是因用户将设备放入桌面/车载基座或夜间模式发生变化所致。 请参阅 <a href=\"https://developer.android.com/reference/android/app/UiModeManager.html\" target=\"_blank\" rel=\"external\">UiModeManager</a>。 此项为 API 级别 8 中新增配置。 |<br>| “orientation”        | 屏幕方向发生了变化 — 用户旋转了设备。 注：如果您的应用面向 API 级别 13 或更高级别（按照 minSdkVersion 和 targetSdkVersion 属性所声明的级别），则还应声明 “screenSize” 配置，因为当设备在横向与纵向之间切换时，该配置也会发生变化。 |<br>| “screenSize”         | 当前可用屏幕尺寸发生了变化。它表示当前可用尺寸相对于当前纵横比的变化，因此会在用户在横向与纵向之间切换时发生变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |<br>| “smallestScreenSize” | 物理屏幕尺寸发生了变化。它表示与方向无关的尺寸变化，因此只有在实际物理屏幕尺寸发生变化（如切换到外部显示器）时才会变化。对此配置的变更对应于smallestWidth 配置的变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |<br>| “layoutDirection”    | 布局方向发生了变化。例如，从从左至右 (LTR) 更改为从右至左 (RTL)。 此项为 API 级别 17 中新增配置。 |<br>所有这些配置变更都可能影响应用看到的资源值。 因此，调用 onConfigurationChanged() 时，通常有必要再次获取所有资源（包括视图布局、可绘制对象等），以正确处理变化。<br>　　我们平常接触到最多的就是屏幕的旋转，屏幕的旋转如果在没有特殊设置的情况下会销毁当前的 Activity 重新创建一个新的，为了避免创建新的，就可以在 AndroidMainfest.xml 中对指定 Activity 对应的 配置android:configChanges=”orientation”，这样，每次旋转方向时，只有 onConfigurationChanged 方法被调用，没有了销毁重建的过程。<br>　　<br><strong>android:documentLaunchMode=[“intoExisting” | “always” | “none” | “never”]</strong><br>指定每次启动任务时应如何向其中添加新的 Activity 实例。 该属性允许用户让多个来自同一应用的文档出现在概览屏幕（recent app）中。该属性有四个值，会在用户使用该应用打开文档时产生以下效果：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Value</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“intoExisting”</td>\n<td>Activity 会为文档重复使用现有任务。使用该值与不设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志、但设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 标志所产生的效果相同，如使用 <a href=\"https://developer.android.com/guide/components/recents.html#flag-new-doc\" target=\"_blank\" rel=\"external\">Intent 标志添加任务中</a>所述。</td>\n</tr>\n<tr>\n<td>“always”</td>\n<td>Activity 为文档创建新任务，即便文档已打开也是如此。 这与同时设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志的效果相同。</td>\n</tr>\n<tr>\n<td>“none”</td>\n<td>该 Activity 不会为 Activity 创建新任务。这是默认值，它只会在设置了 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_TASK</a> 时创建新任务。 概览屏幕将按其默认方式对待此 Activity：为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。</td>\n</tr>\n<tr>\n<td>“never”</td>\n<td>即使 Intent 包含 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_DOCUMENT</a>，该 Activity 也不会启动到新文档之中。 设置此值会替代 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\" target=\"_blank\" rel=\"external\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志的行为（如果在 Activity 中设置了其中一个标志），并且概览屏幕将为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：对于除“none”和“never”以外的值，必须使用 launchMode=”standard” 定义 Activity。 如果未指定此属性，则使用 documentLaunchMode=”none”。</p>\n</blockquote>\n<p><strong>android:enabled=[“true” | “false”]</strong><br>该属性用来标示系统是否可将 Activity 实例化 — “true” 表示可以，“false”表示不可以。 默认值为“true”。<br>上面提到了 元素具有自己的 enabled 属性，该属性适用于所有应用组件，包括 Activity。 和 属性必须都是“true”（因为它们都默认使用该值），系统才能将 Activity 实例化。 如果任何一个属性是“false”，则无法进行实例化。</p>\n<p><strong>android:excludeFromRecents</strong><br>该标识用来标示是否应将该 Activity 启动的任务排除在最近使用的应用列表（即概览屏幕）之外。 也就是说，当该 Activity 是新任务的根 Activity 时，此属性确定任务是否应出现在最近使用的应用列表中。 如果应将任务排除在列表之外，请设置“true”；如果应将其包括在内，则设置“false”。 默认值为“false”。</p>\n<p><strong>android:exported=[“true” | “false”]</strong><br>该标识用来指明Activity 是否可由其他应用的组件启动 —“true”表示可以，“false”表示不可以。若为“false”，则 Activity 只能由同一应用的组件或使用同一用户 ID 的不同应用启动。<br>需要注意的是该默认值取决于 Activity 是否包含 Intent 过滤器。没有任何过滤器意味着 Activity 只能通过指定其确切的类名称进行调用。 这意味着 Activity 专供应用内部使用（因为其他应用不知晓其类名称）。 因此，在这种情况下，默认值为“false”。另一方面，至少存在一个过滤器意味着 Activity 专供外部使用，因此默认值为“true”。<br>该属性并非限制 Activity 对其他应用开放度的唯一手段。 您还可以利用权限来限制哪些外部实体可以调用 Activity。</p>\n<p><strong>android:finishOnTaskLaunch</strong><br>该标识用来标示每当用户再次启动其任务（在主屏幕上选择任务）时，是否应关闭（完成）现有 Activity 实例 —“true”表示应关闭，“false”表示不应关闭。 默认值为“false”。如果该属性和 allowTaskReparenting 均为“true”，则优先使用该属性。 Activity 的亲和关系会被忽略。 系统不是更改 Activity 的父项，而是将其销毁。</p>\n<p><strong>android:hardwareAccelerated=[“true” | “false”]</strong><br>该标识用来表明是否应为此 Activity 启用硬件加速渲染 —“true”表示应启用，“false”表示不应启用，默认值为“false”。和 application 的标识不一样的是，该标示只针对 Activity。<br>从 Android 3.0 开始，为应用提供了硬件加速 OpenGL 渲染器，以改善许多常见 2D 图形运算的性能。 启用硬件加速渲染器时，Canvas、Paint、Xfermode、ColorFilter、Shader 和 Camera 中的大多数运算都会得到加速。这可以提高动画、滚动的流畅度和总体响应速度，即便是并不明确使用框架 OpenGL 库的应用也会受益。 由于启用硬件加速会增加资源消耗，因此您的应用将占用更多内存。<br>需要注意的是，并非所有 OpenGL 2D 运算都会得到加速。如果您启用硬件加速渲染器，请对应用进行测试，以确保其在利用渲染器时不会出错。</p>\n<p><strong>android:icon</strong><br>一个表示 Activity 的图标。该图标会在需要在屏幕上表示 Activity 时显示给用户。 例如，代表启动任务的 Activity 的图标显示在启动器窗口中。该图标通常附带标签（请参阅 android:label 属性）。<br>必须将该属性设置为对包含图像定义的可绘制资源的引用。 如果未设置该属性，则改为使用为应用整体指定的图标（请参阅 元素的 icon 属性），activity 的该属性会覆盖 application 的该属性。这个 Activity 的图标 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认图标（请参阅 元素的 icon 属性）。</p>\n<p><strong>android:label=”string resource”</strong><br>一种可由用户读取的 Activity 标签。该标签会在必须将 Activity 呈现给用户时显示在屏幕上。 它通常与 Activity 图标一并显示。如果未设置该属性，则改为使用为应用整体设置的标签（请参阅 元素的 label 属性），activity 的该属性会覆盖 application 的该属性。<br>这个 Activity 的标签 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认标签（请参阅 元素的 label 属性）。应将该标签设置为对字符串资源的引用，以便可以像用户界面中的其他字符串那样进行本地化。不过，为便于开发应用，也可将其设置为原始字符串。</p>\n<p><strong>android:launchMode(Activity加载模式)</strong><br>在多Activity开发中，有可能是自己应用之间的Activity跳转，或者夹带其他应用的可复用Activity。可能会希望跳转到原来某个Activity实例，而不是产生大量重复的Activity。这需要为Activity配置特定的加载模式，而不是使用默认的加载模式</p>\n<p>Activity有四种加载模式：</p>\n<p><code>standard</code>、<code>singleTop</code>、<code>singleTask</code>、<code>singleInstance</code>(其中前两个是一组、后两个是一组)，默认为<code>standard</code></p>\n<p><code>standard</code>：就是intent将发送给新的实例，所以每次跳转都会生成新的activity。</p>\n<p><code>singleTop</code>：也是发送新的实例，但不同standard的一点是，在请求的Activity正好位于栈顶时(配置成singleTop的Activity)，不会构造新的实例</p>\n<p><code>singleTask</code>：和后面的singleInstance都只创建一个实例，当intent到来，需要创建设置为singleTask的Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。</p>\n<p><code>singleInstance</code>：<br>首先说明一下task这个概念，Task可以认为是一个栈，可放入多个Activity。比如启动一个应用，那么Android就创建了一个Task，然后启动这个应用的入口Activity，那在它的界面上调用其他的Activity也只是在这个task里面。那如果在多个task中共享一个Activity的话怎么办呢。举个例来说，如果开启一个导游服务类的应用程序，里面有个Activity是开启GOOGLE地图的，当按下home键退回到主菜单又启动GOOGLE地图的应用时，显示的就是刚才的地图，实际上是同一个Activity，实际上这就引入了singleInstance。singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示，这样就做到了共享。当然前提是这些应用都没有被销毁，所以刚才是按下的HOME键，如果按下了返回键，则无效</p>\n<p><strong>android:maxRecents=”integer”</strong><br>该标识用来指明概览屏幕中位于此 Activity 根位置的任务数上限。 达到该条目数时，系统会从概览屏幕中移除最近最少使用的实例。 有效值为 1-50（低内存设备使用 25）；0 为无效值。 该值必须是整数，例如 50。默认值为 16。</p>\n<p><strong>android:multiprocess</strong><br>该标识用来指明是否可以将 Activity 实例启动到启动该实例的组件进程内 —“true”表示可以，“false”表示不可以。默认值为“false”。<br>正常情况下，新的 Activity 实例会启动到定义它的应用进程内，因此所有 Activity 实例都在同一进程内运行。 不过，如果该标志设置为“true”，Activity 实例便可在多个进程内运行，这样系统就能在任何使用实例的地方创建实例（前提是权限允许这样做），但是貌似使用的场景和案例不是很多。</p>\n<p><strong>android:name=”string”</strong><br>该标识应该不用介绍了，用来指定 Activity 的类的名称，是 Activity 的子类。 该属性值应为完全限定类名称（例如，“com.example.project.DemoActivity”）。不过，为了简便起见，如果名称的第一个字符是句点（例如，“.DemoActivity”），则名称将追加到 元素中指定的软件包 com.example.project 名称之后。还有一个需要注意的是，应用一旦发布，即不应更改该名称（除非您设置了 android:exported=”false”），也就是说如果您的 Activity 有让其他应用使用到，那么最好不要修改名字，因为有可能其他应用是通过显式的方式指定的 Activity 名字，修改名字可能会造成其他应用无法正常使用甚至崩溃。<br>该标识没有默认值。必须指定该名称。</p>\n<p><strong>android:noHistory</strong><br>当用户离开 Activity 并且其在屏幕上不再可见时，是否应从 Activity 堆栈中将其移除并完成（调用其 finish() 方法）—“true”表示应将其完成，“false”表示不应将其完成。 默认值为“false”。“true”一值表示 Activity 不会留下历史轨迹。 它不会留在任务的 Activity 堆栈内，因此用户将无法返回 Activity。 所以有一点需要特别注意的是，在此情况下，如果从这个定义了 noHistory 的 Activity 启动另一个 Activity 来获取它的结果，系统永远不会调用 onActivityResult()，因为此时这个 Activity 已经关闭了。</p>\n<p><strong>android:parentActivityName=”string”</strong><br>Activity 逻辑父项的类名称。此处的名称必须与为相应 元素的 android:name 属性指定的类名称一致。系统会读取该属性，以确定当用户按下操作栏中的“向上”按钮时应该启动哪一个 Activity。 系统还可以利用这些信息通过 TaskStackBuilder 合成 Activity 的返回栈<br>关于向上导航的详细信息，可以看看  <a href=\"https://developer.android.com/training/implementing-navigation/ancestral.html#NavigateUp\" target=\"_blank\" rel=\"external\">Providing Up Navigation</a></p>\n<p><strong>android:permission=”string”</strong><br>参见<a href=\"http://blog.csdn.net/self_study/article/details/50074781\" target=\"_blank\" rel=\"external\">android permission 1</a>  和 <a href=\"http://blog.csdn.net/self_study/article/details/50186435\" target=\"_blank\" rel=\"external\">android permission 2</a></p>\n<p><strong>android:process=”string”</strong><br>应在其中运行 Activity 的进程的名称。正常情况下，应用的所有组件都在为应用创建的默认进程名称内运行，您无需使用该属性。 但在必要时，您可以使用该属性替换默认进程名称，以便让应用组件散布到多个进程中。如果为该属性分配的名称以冒号（“:”）开头，则会在需要时创建应用专用的新进程，并且 Activity 会在该进程中运行。如果进程名称以小写字符开头，Activity 将在该名称的全局进程中运行，前提是它拥有相应的权限。这可以让不同应用中的组件共享一个进程，从而减少资源占用。<br>上面提到的 Application 元素的 process 属性可为所有组件设置一个不同的默认进程名称。</p>\n<p><strong>android:relinquishTaskIdentity</strong><br>Activity 是否将其任务标识符交给任务栈中在其之上的 Activity。 如果任务根 Activity 的该属性设置为“true”，则任务会用其内的下一个 Activity 的 Intent 替换基本 Intent。 如果下一个 Activity 的该属性也设置为“true”，则该 Activity 会将基本 Intent 给予其在同一任务中启动的任何 Activity。 系统继续为每个 Activity 执行此过程，直至遇到的某个 Activity 将该属性设置为“false”为止。 默认值为“false”。<br>还有一个很有意思的功能是，如果该属性设置为“true”，则 Activity 还可利用 ActivityManager.TaskDescription 来更改概览屏幕中的标签、颜色和图标。</p>\n<p><strong>android:resizeableActivity=[“true” | “false”]</strong><br>这个标识和 里面的作用一样，如果在 activity 里面定义的话则代表这个 activity 是否支持分屏模式。如果您将该属性设置为 true，则用户可以分屏和自由形状模式启动 Activity。 如果您将该属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。<br>该属性是在 API 级别 24 添加的，如果您的应用面向 API 级别 24 或更高级别，但未对该属性指定值，则该属性的值默认设为 true。</p>\n<p><strong>android:screenOrientation</strong><br>Activity 在设备上的显示方向。如果 Activity 是在多窗口模式下运行，系统会忽略该属性。它的取值可以是如下：<br>| <strong>Value</strong>          | <strong>Description</strong>                          |<br>| —————— | —————————————- |<br>| “unspecified”      | 默认值。由系统选择方向。在不同设备上，系统使用的政策以及基于政策在特定上下文所做的选择可能有所差异。 |<br>| “behind”           | 与 Activity 栈中紧接着它的 Activity 的方向相同。       |<br>| “landscape”        | 横向方向（显示的宽度大于高度）。                         |<br>| “portrait”         | 纵向方向（显示的高度大于宽度）。                         |<br>| “reverseLandscape” | 与正常横向方向相反的横向方向。API 级别 9 中的新增配置。          |<br>| “reversePortrait”  | 与正常纵向方向相反的纵向方向。API 级别 9 中的新增配置。          |<br>| “sensorLandscape”  | 横向方向，但根据设备传感器，可以是正常或反向的横向方向。API 级别 9 中的新增配置。 |<br>| “sensorPortrait”   | 纵向方向，但根据设备传感器，可以是正常或反向的纵向方向。API 级别 9 中的新增配置。 |<br>| “userLandscape”    | 横向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的横向方向。 如果用户锁定了基于传感器的旋转，其行为与 landscape 相同，否则，其行为与 sensorLandscape 相同。API 级别 18 中的新增配置。 |<br>| “userPortrait”     | 纵向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的纵向方向。 如果用户锁定了基于传感器的旋转，其行为与 portrait 相同，否则，其行为与 sensorPortrait 相同。API 级别 18 中的新增配置。 |<br>| “sensor”           | 方向由设备方向传感器决定。显示方向取决于用户如何手持设备，它会在用户旋转设备时发生变化。 但一些设备默认情况下不会旋转到所有四种可能的方向。要允许全部四种方向，请使用 “fullSensor”。 |<br>| “fullSensor”       | 方向由 4 种方向中任一方向的设备方向传感器决定。这与 “sensor” 类似，不同的是它允许所有 4 种可能的屏幕方向，无论设备正常情况下采用什么方向（例如，一些设备正常情况下不使用反向纵向或反向横向，但它支持这些方向）。 API 级别 9 中的新增配置。 |<br>| “nosensor”         | 决定方向时不考虑物理方向传感器。传感器会被忽略，因此显示不会随用户对设备的移动而旋转。 除了这个区别，系统在选择方向时使用的政策与“unspecified”设置相同。 |<br>| “user”             | 用户当前的首选方向。                               |<br>| “fullUser”         | 如果用户锁定了基于传感器的旋转，其行为与 user 相同，否则，其行为与 fullSensor 相同，允许所有 4 种可能的屏幕方向。 API 级别 18 中的新增配置。 |<br>| “locked”           | 将方向锁定在其当前的任意旋转方向。API 级别 18 中的新增配置。       |</p>\n<blockquote>\n<p>注：如果您声明其中一个横向或纵向值，系统将其视为对 Activity 运行方向的硬性要求。 因此，您声明的值支持通过 Google Play 之类的服务进行过滤，这样就能将您的应用只提供给支持 Activity 所要求方向的设备。 例如，如果您声明了 “landscape”、”reverseLandscape” 或 “sensorLandscape”，则您的应用将只提供给支持横向方向的设备。 不过，您还应通过 元素明确声明，您的应用要求采用纵向或横向方向。 例如，。这纯粹是 Google Play（以及其他支持它的服务）提供的一种过滤行为，平台本身并不能控制当设备仅支持特定方向时您的应用能否安装</p>\n</blockquote>\n<p><strong>android:stateNotNeeded</strong><br>该标识用来指明能否在不保存 Activity 状态的情况下将其终止并成功重新启动 —“true”表示可在不考虑其之前状态的情况下重新启动，“false”表示需要之前状态，默认值为“false”。一般情况下，为保存资源而暂时关闭 Activity 前，系统会调用 onSaveInstanceState() 方法，该方法将 Activity 的当前状态存储在一个 Bundle 对象中，然后在 Activity 重新启动时将其传递给 onCreate() 。如果该属性设置为 true，系统可能不会调用 onSaveInstanceState()，并且会向 onCreate() 传递 null 而不是 Bundle，这样就与它在 Activity 首次启动时完全一样。<br>这个标识又一个特别有用的地方是，true 设置可确保 Activity 能够在未保留状态时重新启动。 例如，显示主屏幕的 Activity 可以使用该设置来确保其由于某种原因崩溃时不会被移除。</p>\n<p><strong>android:supportsPictureInPicture=[“true” | “false”]</strong><br>指定 Activity 是否支持画中画显示，设置该属性的同时，需要将 android:resizeableActivity 标识设置为 true，要不然系统会忽略该属性，可以看到设置完该属性之后，android TV 就可以实现手机端一个悬浮 activity 的效果，类似于 youtube 。<br>所以同样这个标识和 android:resizeableActivity 一样都是 API24 版本添加的。</p>\n<p><strong>android:taskAffinity=”string”</strong><br>这个标识用来指明一个 Activity 的亲和性，使用方案可以看看我的博客：android深入解析Activity的launchMode启动模式，Intent Flag，taskAffinity。从概念上讲，具有相同亲和关系的 Activity 归属同一任务（从用户的角度来看，则是归属同一“应用”）。 任务的亲和关系由其根 Activity 的亲和关系确定。亲和关系确定两件事 - Activity 更改到的父项任务（请参阅上面提到的 allowTaskReparenting 属性）和通过 FLAG_ACTIVITY_NEW_TASK 标志启动 Activity 时将用来容纳它的任务。默认情况下，应用中的所有 Activity 都具有相同的亲和关系。您可以设置该属性来以不同方式组合它们，甚至可以将在不同应用中定义的 Activity 置于同一任务内。 要指定 Activity 与任何任务均无亲和关系，请将其设置为空字符串。如果未设置该属性，则 Activity 继承为应用设置的亲和关系（可以参考 元素的 taskAffinity 属性），应用默认亲和关系的名称是 元素设置的 packageName。</p>\n<p><strong>android:theme=”resource or theme”</strong><br>这个标识用的应该很多了，用来定义一个 activity 的样式，为一个资源的引用，它会自动将 Activity 的上下文设置为使用该主题（请参阅 setTheme()），它还可以引发 Activity 启动前的“启动”动画（以更加符合 Activity 的实际外观）。如果未设置该属性，则 Activity 继承通过 application 元素的 theme 属性为应用整体设置的主题。 如果该属性也未设置，则使用默认系统主题。</p>\n<p><strong>android:uiOptions=[“none” | “splitActionBarWhenNarrow”]</strong><br>这个标识主要是用来针对 action bar 的，它有两个值：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Value</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“none”</td>\n<td>无附加 UI 选项。这是默认值。</td>\n</tr>\n<tr>\n<td>“splitActionBarWhenNarrow”</td>\n<td>当水平空间受限时（例如在手持设备上的纵向模式下时）在屏幕底部添加一个栏以显示应用栏（也称为操作栏）中的操作项）。 应用栏不是以少量操作项形式出现在屏幕顶部的应用栏中，而是分成了顶部导航区和底部操作项栏。 这可以确保操作项以及顶部的导航和标题元素都能获得合理的空间。 菜单项不会拆分到两个栏中，它们始终一起出现。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>android:windowSoftInputMode</strong><br>activity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。<br>这个属性能影响两件事情：</p>\n<ul>\n<li>当 Activity 成为用户注意的焦点时软键盘的状态 — 隐藏还是可见</li>\n<li>对 Activity 主窗口所做的调整 — 是否将其尺寸调小以为软键盘腾出空间，或者当窗口部分被软键盘遮挡时是否平移其内容以使当前焦点可见<br>各值的含义：</li>\n<li>stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置</li>\n<li>stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示</li>\n<li>stateHidden：用户选择activity时，软键盘总是被隐藏</li>\n<li>stateAlwaysHidden：当用户选择 Activity 时 — 也就是说，当用户确实是向前导航到 Activity，而不是因离开另一 Activity 而返回时 — 隐藏软键盘。（当该Activity主窗口获取焦点时，软键盘也总是被隐藏的）</li>\n<li>stateVisible：软键盘通常是可见的</li>\n<li>stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态</li>\n<li>adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示</li>\n<li>adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间</li>\n<li>adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分<blockquote>\n<p>adjustResize 和 adjustPan 的区别就在于前者是调整 Activity 的窗口尺寸来达到适配的目的，而 adjustPan 仅仅只是将窗口平移，界面的一部分就会被软键盘覆盖住，就不会被挤到软键盘之上了。</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity android:allowEmbedded=[\"true\" | \"false\"]</div><div class=\"line\">          android:allowTaskReparenting=[\"true\" | \"false\"]</div><div class=\"line\">          android:alwaysRetainTaskState=[\"true\" | \"false\"]</div><div class=\"line\">          android:alwaysRetainTaskState=[\"true\" | \"false\"]</div><div class=\"line\">          android:autoRemoveFromRecents=[\"true\" | \"false\"]</div><div class=\"line\">          android:banner=”drawable resource”</div><div class=\"line\">          android:clearTaskOnLaunch=[\"true\" | \"false\"]</div><div class=\"line\">          android:configChanges=[\"mcc\", \"mnc\", \"locale\",</div><div class=\"line\">                                 \"touchscreen\", \"keyboard\", \"keyboardHidden\",</div><div class=\"line\">                                 \"navigation\", \"screenLayout\", \"fontScale\",</div><div class=\"line\">                                 \"uiMode\", \"orientation\",\"screenSize\",</div><div class=\"line\">                                 \"smallestScreenSize\"]</div><div class=\"line\">          android:documentLaunchMode=[\"intoExisting\" | \"always\" | </div><div class=\"line\">“none” | “never”]</div><div class=\"line\">          android:enabled=[\"true\" | \"false\"]</div><div class=\"line\">          android:excludeFromRecents=[\"true\" | \"false\"]</div><div class=\"line\">          android:exported=[\"true\" | \"false\"]</div><div class=\"line\">          android:finishOnTaskLaunch=[\"true\" | \"false\"]</div><div class=\"line\">          android:hardwareAccelerated=[\"true\" | \"false\"]</div><div class=\"line\">          android:icon=\"drawable resource\"</div><div class=\"line\">          android:label=\"string resource\"</div><div class=\"line\">          android:launchMode=[\"standard\" | \"singleTop\" |</div><div class=\"line\">                              \"singleTask\" | \"singleInstance\"]</div><div class=\"line\">          android:maxRecents=\"integer\"</div><div class=\"line\">          android:multiprocess=[\"true\" | \"false\"]</div><div class=\"line\">          android:name=\"string\"</div><div class=\"line\">          android:noHistory=[\"true\" | \"false\"]  </div><div class=\"line\">          android:parentActivityName=\"string\"</div><div class=\"line\">          android:permission=\"string\"</div><div class=\"line\">          android:process=\"string\"</div><div class=\"line\">          android:relinquishTaskIdentity=[\"true\" | \"false\"]</div><div class=\"line\">          android:resizeableActivity=[\"true\" | \"false\"]</div><div class=\"line\">          android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" |</div><div class=\"line\">                                     \"portrait\" | \"reverseLandscape\" | \"sensorLandscape\" |</div><div class=\"line\">                                     \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" |</div><div class=\"line\">                                     \"sensor\" | \"fullSensor\" | \"nosensor\"]</div><div class=\"line\">                                     \"user\" | \"fullUser\" | \"locked\"</div><div class=\"line\">          android:stateNotNeeded=[\"true\" | \"false\"]</div><div class=\"line\">          android:supportsPictureInPicture=[\"true\" | \"false\"]</div><div class=\"line\">          android:taskAffinity=\"string\"</div><div class=\"line\">          android:theme=\"resource or theme\"</div><div class=\"line\">          android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]</div><div class=\"line\">          android:windowSoftInputMode=[\"stateUnspecified\",</div><div class=\"line\">                                       \"stateUnchanged\", \"stateHidden\",</div><div class=\"line\">                                       \"stateAlwaysHidden\", \"stateVisible\",</div><div class=\"line\">                                       \"stateAlwaysVisible\", \"adjustUnspecified\",</div><div class=\"line\">                                       \"adjustResize\", \"adjustPan\"] &gt;   </div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure>","more":"<p>android:allowEmbedded=[“true” | “false”]**<br>这个标识一般为开发可穿戴设备时使用，表示该 Activity 可作为另一 Activity 的嵌入式子项启动。 它尤其适用于子项所在的容器（如 Display）为另一 Activity 所拥有的情况。 例如，用于 Wear 自定义通知的 Activity 必须声明此项，以便 Wear 在其上下文流中显示 Activity，后者位于另一进程中。该属性的默认值为 false。</p>\n<p><strong>android:allowTaskReparenting=[“true” | “false”]</strong><br>这个标示和 Application 的标识意义一样，所以如果同时声明该标识，这个标识会覆盖 Application 的标识</p>\n<p><strong>android:alwaysRetainTaskState</strong><br>这个标识用来指示系统是否始终保持 Activity 所在任务的状态 —“true”表示保持，“false”表示允许系统在特定情况下将任务重置到其初始状态。 默认值为“false”。该属性只对任务的根 Activity 有意义；对于所有其他 Activity，均忽略该属性。<br>正常情况下，当用户从主屏幕重新选择某个任务时，系统会在特定情况下清除该任务（从根 Activity 之上的堆栈中移除所有 Activity）。 系统通常会在用户一段时间（如 30 分钟）内未访问任务时执行此操作。<br>不过，如果该属性的值是“true”，则无论用户如何到达任务，将始终返回到最后状态的任务。 例如，在网络浏览器这类存在大量用户不愿失去的状态（如多个打开的标签）的应用中，该属性会很有用。</p>\n<p><strong>android:autoRemoveFromRecents=[“true” | “false”]</strong><br>这个标识为 API21 版本添加，由具有该属性的 Activity 启动的任务是否一直保留在概览屏幕中，直至任务中的最后一个 Activity 完成为止。 若为 true，则自动从概览屏幕中移除任务。 它会替换调用方使用的 FLAG_ACTIVITY_RETAIN_IN_RECENTS。 它必须是布尔值“true”或“false”。</p>\n<p>android:banner=”drawable resource”<br>这个和 application 里面的 banner 标识一样，也是用在 android TV 上的</p>\n<p><strong>android:clearTaskOnLaunch</strong><br>这个标识用来指明当应用从主屏幕重新启动时是否都从中移除除根 Activity 之外的所有 Activity，true 表示始终将任务清除到只剩其根 Activity，false 表示不清除，默认值为 false。需要注意的是该属性只对启动新任务的 Activity（根 Activity）有意义；对于任务中的所有其他 Activity，均忽略该属性。当值为“false”时，可在某些情况下清除任务中的 Activity（参考结合 alwaysRetainTaskState 属性），但并非一律可以。如果该属性和 allowTaskReparenting 的值均为“true”，则如上所述，任何可以更改父项的 Activity 都将转移到与其有亲和关系的任务；其余 Activity 随即被移除。<br>例如，假定有人从主屏幕启动了 Activity P，然后从那里转到 Activity Q。该用户接着按了主屏幕按钮，然后返回到 Activity P。正常情况下，用户将看到 Activity Q，因为那是其最后在 P 的任务中执行的 Activity。 不过，如果 P 将此标志设置为“true”，则当用户按下主屏幕将任务转入后台时，其上的所有 Activity（在本例中为 Q）都会被移除。 因此用户返回任务时只会看到 P。</p>\n<p><strong>android:configChanges</strong><br>列出 Activity 将自行处理的配置更改。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity 重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged() 方法。以下为该属性的值，多个值使用“|”分隔 — 例如，“locale|navigation|orientation”：<br>| <strong>Value</strong>            | <strong>Description</strong>                          |<br>| ——————– | —————————————- |<br>| “mcc”                | IMSI 移动国家/地区代码 (MCC) 发生了变化 - 检测到了 SIM 并更新了 MCC。 |<br>| “mnc”                | IMSI 移动网络代码 (MNC) 发生了变化 - 检测到了 SIM 并更新了 MNC。 |<br>| locale”              | 语言区域发生了变化 — 用户为文本选择了新的显示语言。              |<br>| “touchscreen”        | 触摸屏发生了变化。（这种情况通常永远不会发生。）                 |<br>| “keyboard”           | 键盘类型发生了变化 — 例如，用户插入了一个外置键盘。              |<br>| “keyboardHidden”     | 键盘无障碍功能发生了变化 — 例如，用户显示了硬件键盘。             |<br>| “navigation”         | 导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）       |<br>| “screenLayout”       | 屏幕布局发生了变化 — 这可能是由激活了其他显示方式所致。            |<br>| “fontScale”          | 字体缩放系数发生了变化 — 用户选择了新的全局字号。               |<br>| “uiMode”             | 用户界面模式发生了变化 — 这可能是因用户将设备放入桌面/车载基座或夜间模式发生变化所致。 请参阅 <a href=\"https://developer.android.com/reference/android/app/UiModeManager.html\">UiModeManager</a>。 此项为 API 级别 8 中新增配置。 |<br>| “orientation”        | 屏幕方向发生了变化 — 用户旋转了设备。 注：如果您的应用面向 API 级别 13 或更高级别（按照 minSdkVersion 和 targetSdkVersion 属性所声明的级别），则还应声明 “screenSize” 配置，因为当设备在横向与纵向之间切换时，该配置也会发生变化。 |<br>| “screenSize”         | 当前可用屏幕尺寸发生了变化。它表示当前可用尺寸相对于当前纵横比的变化，因此会在用户在横向与纵向之间切换时发生变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |<br>| “smallestScreenSize” | 物理屏幕尺寸发生了变化。它表示与方向无关的尺寸变化，因此只有在实际物理屏幕尺寸发生变化（如切换到外部显示器）时才会变化。对此配置的变更对应于smallestWidth 配置的变化。 不过，如果您的应用面向 API 级别 12 或更低级别，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重新启动 Activity）。此项为 API 级别 13 中新增配置。 |<br>| “layoutDirection”    | 布局方向发生了变化。例如，从从左至右 (LTR) 更改为从右至左 (RTL)。 此项为 API 级别 17 中新增配置。 |<br>所有这些配置变更都可能影响应用看到的资源值。 因此，调用 onConfigurationChanged() 时，通常有必要再次获取所有资源（包括视图布局、可绘制对象等），以正确处理变化。<br>　　我们平常接触到最多的就是屏幕的旋转，屏幕的旋转如果在没有特殊设置的情况下会销毁当前的 Activity 重新创建一个新的，为了避免创建新的，就可以在 AndroidMainfest.xml 中对指定 Activity 对应的 配置android:configChanges=”orientation”，这样，每次旋转方向时，只有 onConfigurationChanged 方法被调用，没有了销毁重建的过程。<br>　　<br><strong>android:documentLaunchMode=[“intoExisting” | “always” | “none” | “never”]</strong><br>指定每次启动任务时应如何向其中添加新的 Activity 实例。 该属性允许用户让多个来自同一应用的文档出现在概览屏幕（recent app）中。该属性有四个值，会在用户使用该应用打开文档时产生以下效果：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Value</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“intoExisting”</td>\n<td>Activity 会为文档重复使用现有任务。使用该值与不设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志、但设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 标志所产生的效果相同，如使用 <a href=\"https://developer.android.com/guide/components/recents.html#flag-new-doc\">Intent 标志添加任务中</a>所述。</td>\n</tr>\n<tr>\n<td>“always”</td>\n<td>Activity 为文档创建新任务，即便文档已打开也是如此。 这与同时设置 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志的效果相同。</td>\n</tr>\n<tr>\n<td>“none”</td>\n<td>该 Activity 不会为 Activity 创建新任务。这是默认值，它只会在设置了 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK\">FLAG_ACTIVITY_NEW_TASK</a> 时创建新任务。 概览屏幕将按其默认方式对待此 Activity：为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。</td>\n</tr>\n<tr>\n<td>“never”</td>\n<td>即使 Intent 包含 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\">FLAG_ACTIVITY_NEW_DOCUMENT</a>，该 Activity 也不会启动到新文档之中。 设置此值会替代 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT\">FLAG_ACTIVITY_NEW_DOCUMENT</a> 和 <a href=\"https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_MULTIPLE_TASK\">FLAG_ACTIVITY_MULTIPLE_TASK</a> 标志的行为（如果在 Activity 中设置了其中一个标志），并且概览屏幕将为应用显示单个任务，该任务将从用户上次调用的任意 Activity 开始继续执行。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注：对于除“none”和“never”以外的值，必须使用 launchMode=”standard” 定义 Activity。 如果未指定此属性，则使用 documentLaunchMode=”none”。</p>\n</blockquote>\n<p><strong>android:enabled=[“true” | “false”]</strong><br>该属性用来标示系统是否可将 Activity 实例化 — “true” 表示可以，“false”表示不可以。 默认值为“true”。<br>上面提到了 元素具有自己的 enabled 属性，该属性适用于所有应用组件，包括 Activity。 和 属性必须都是“true”（因为它们都默认使用该值），系统才能将 Activity 实例化。 如果任何一个属性是“false”，则无法进行实例化。</p>\n<p><strong>android:excludeFromRecents</strong><br>该标识用来标示是否应将该 Activity 启动的任务排除在最近使用的应用列表（即概览屏幕）之外。 也就是说，当该 Activity 是新任务的根 Activity 时，此属性确定任务是否应出现在最近使用的应用列表中。 如果应将任务排除在列表之外，请设置“true”；如果应将其包括在内，则设置“false”。 默认值为“false”。</p>\n<p><strong>android:exported=[“true” | “false”]</strong><br>该标识用来指明Activity 是否可由其他应用的组件启动 —“true”表示可以，“false”表示不可以。若为“false”，则 Activity 只能由同一应用的组件或使用同一用户 ID 的不同应用启动。<br>需要注意的是该默认值取决于 Activity 是否包含 Intent 过滤器。没有任何过滤器意味着 Activity 只能通过指定其确切的类名称进行调用。 这意味着 Activity 专供应用内部使用（因为其他应用不知晓其类名称）。 因此，在这种情况下，默认值为“false”。另一方面，至少存在一个过滤器意味着 Activity 专供外部使用，因此默认值为“true”。<br>该属性并非限制 Activity 对其他应用开放度的唯一手段。 您还可以利用权限来限制哪些外部实体可以调用 Activity。</p>\n<p><strong>android:finishOnTaskLaunch</strong><br>该标识用来标示每当用户再次启动其任务（在主屏幕上选择任务）时，是否应关闭（完成）现有 Activity 实例 —“true”表示应关闭，“false”表示不应关闭。 默认值为“false”。如果该属性和 allowTaskReparenting 均为“true”，则优先使用该属性。 Activity 的亲和关系会被忽略。 系统不是更改 Activity 的父项，而是将其销毁。</p>\n<p><strong>android:hardwareAccelerated=[“true” | “false”]</strong><br>该标识用来表明是否应为此 Activity 启用硬件加速渲染 —“true”表示应启用，“false”表示不应启用，默认值为“false”。和 application 的标识不一样的是，该标示只针对 Activity。<br>从 Android 3.0 开始，为应用提供了硬件加速 OpenGL 渲染器，以改善许多常见 2D 图形运算的性能。 启用硬件加速渲染器时，Canvas、Paint、Xfermode、ColorFilter、Shader 和 Camera 中的大多数运算都会得到加速。这可以提高动画、滚动的流畅度和总体响应速度，即便是并不明确使用框架 OpenGL 库的应用也会受益。 由于启用硬件加速会增加资源消耗，因此您的应用将占用更多内存。<br>需要注意的是，并非所有 OpenGL 2D 运算都会得到加速。如果您启用硬件加速渲染器，请对应用进行测试，以确保其在利用渲染器时不会出错。</p>\n<p><strong>android:icon</strong><br>一个表示 Activity 的图标。该图标会在需要在屏幕上表示 Activity 时显示给用户。 例如，代表启动任务的 Activity 的图标显示在启动器窗口中。该图标通常附带标签（请参阅 android:label 属性）。<br>必须将该属性设置为对包含图像定义的可绘制资源的引用。 如果未设置该属性，则改为使用为应用整体指定的图标（请参阅 元素的 icon 属性），activity 的该属性会覆盖 application 的该属性。这个 Activity 的图标 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认图标（请参阅 元素的 icon 属性）。</p>\n<p><strong>android:label=”string resource”</strong><br>一种可由用户读取的 Activity 标签。该标签会在必须将 Activity 呈现给用户时显示在屏幕上。 它通常与 Activity 图标一并显示。如果未设置该属性，则改为使用为应用整体设置的标签（请参阅 元素的 label 属性），activity 的该属性会覆盖 application 的该属性。<br>这个 Activity 的标签 — 无论设置于此处还是由 元素设置 — 同时也是 Activity 所有 Intent 过滤器的默认标签（请参阅 元素的 label 属性）。应将该标签设置为对字符串资源的引用，以便可以像用户界面中的其他字符串那样进行本地化。不过，为便于开发应用，也可将其设置为原始字符串。</p>\n<p><strong>android:launchMode(Activity加载模式)</strong><br>在多Activity开发中，有可能是自己应用之间的Activity跳转，或者夹带其他应用的可复用Activity。可能会希望跳转到原来某个Activity实例，而不是产生大量重复的Activity。这需要为Activity配置特定的加载模式，而不是使用默认的加载模式</p>\n<p>Activity有四种加载模式：</p>\n<p><code>standard</code>、<code>singleTop</code>、<code>singleTask</code>、<code>singleInstance</code>(其中前两个是一组、后两个是一组)，默认为<code>standard</code></p>\n<p><code>standard</code>：就是intent将发送给新的实例，所以每次跳转都会生成新的activity。</p>\n<p><code>singleTop</code>：也是发送新的实例，但不同standard的一点是，在请求的Activity正好位于栈顶时(配置成singleTop的Activity)，不会构造新的实例</p>\n<p><code>singleTask</code>：和后面的singleInstance都只创建一个实例，当intent到来，需要创建设置为singleTask的Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。</p>\n<p><code>singleInstance</code>：<br>首先说明一下task这个概念，Task可以认为是一个栈，可放入多个Activity。比如启动一个应用，那么Android就创建了一个Task，然后启动这个应用的入口Activity，那在它的界面上调用其他的Activity也只是在这个task里面。那如果在多个task中共享一个Activity的话怎么办呢。举个例来说，如果开启一个导游服务类的应用程序，里面有个Activity是开启GOOGLE地图的，当按下home键退回到主菜单又启动GOOGLE地图的应用时，显示的就是刚才的地图，实际上是同一个Activity，实际上这就引入了singleInstance。singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示，这样就做到了共享。当然前提是这些应用都没有被销毁，所以刚才是按下的HOME键，如果按下了返回键，则无效</p>\n<p><strong>android:maxRecents=”integer”</strong><br>该标识用来指明概览屏幕中位于此 Activity 根位置的任务数上限。 达到该条目数时，系统会从概览屏幕中移除最近最少使用的实例。 有效值为 1-50（低内存设备使用 25）；0 为无效值。 该值必须是整数，例如 50。默认值为 16。</p>\n<p><strong>android:multiprocess</strong><br>该标识用来指明是否可以将 Activity 实例启动到启动该实例的组件进程内 —“true”表示可以，“false”表示不可以。默认值为“false”。<br>正常情况下，新的 Activity 实例会启动到定义它的应用进程内，因此所有 Activity 实例都在同一进程内运行。 不过，如果该标志设置为“true”，Activity 实例便可在多个进程内运行，这样系统就能在任何使用实例的地方创建实例（前提是权限允许这样做），但是貌似使用的场景和案例不是很多。</p>\n<p><strong>android:name=”string”</strong><br>该标识应该不用介绍了，用来指定 Activity 的类的名称，是 Activity 的子类。 该属性值应为完全限定类名称（例如，“com.example.project.DemoActivity”）。不过，为了简便起见，如果名称的第一个字符是句点（例如，“.DemoActivity”），则名称将追加到 元素中指定的软件包 com.example.project 名称之后。还有一个需要注意的是，应用一旦发布，即不应更改该名称（除非您设置了 android:exported=”false”），也就是说如果您的 Activity 有让其他应用使用到，那么最好不要修改名字，因为有可能其他应用是通过显式的方式指定的 Activity 名字，修改名字可能会造成其他应用无法正常使用甚至崩溃。<br>该标识没有默认值。必须指定该名称。</p>\n<p><strong>android:noHistory</strong><br>当用户离开 Activity 并且其在屏幕上不再可见时，是否应从 Activity 堆栈中将其移除并完成（调用其 finish() 方法）—“true”表示应将其完成，“false”表示不应将其完成。 默认值为“false”。“true”一值表示 Activity 不会留下历史轨迹。 它不会留在任务的 Activity 堆栈内，因此用户将无法返回 Activity。 所以有一点需要特别注意的是，在此情况下，如果从这个定义了 noHistory 的 Activity 启动另一个 Activity 来获取它的结果，系统永远不会调用 onActivityResult()，因为此时这个 Activity 已经关闭了。</p>\n<p><strong>android:parentActivityName=”string”</strong><br>Activity 逻辑父项的类名称。此处的名称必须与为相应 元素的 android:name 属性指定的类名称一致。系统会读取该属性，以确定当用户按下操作栏中的“向上”按钮时应该启动哪一个 Activity。 系统还可以利用这些信息通过 TaskStackBuilder 合成 Activity 的返回栈<br>关于向上导航的详细信息，可以看看  <a href=\"https://developer.android.com/training/implementing-navigation/ancestral.html#NavigateUp\">Providing Up Navigation</a></p>\n<p><strong>android:permission=”string”</strong><br>参见<a href=\"http://blog.csdn.net/self_study/article/details/50074781\">android permission 1</a>  和 <a href=\"http://blog.csdn.net/self_study/article/details/50186435\">android permission 2</a></p>\n<p><strong>android:process=”string”</strong><br>应在其中运行 Activity 的进程的名称。正常情况下，应用的所有组件都在为应用创建的默认进程名称内运行，您无需使用该属性。 但在必要时，您可以使用该属性替换默认进程名称，以便让应用组件散布到多个进程中。如果为该属性分配的名称以冒号（“:”）开头，则会在需要时创建应用专用的新进程，并且 Activity 会在该进程中运行。如果进程名称以小写字符开头，Activity 将在该名称的全局进程中运行，前提是它拥有相应的权限。这可以让不同应用中的组件共享一个进程，从而减少资源占用。<br>上面提到的 Application 元素的 process 属性可为所有组件设置一个不同的默认进程名称。</p>\n<p><strong>android:relinquishTaskIdentity</strong><br>Activity 是否将其任务标识符交给任务栈中在其之上的 Activity。 如果任务根 Activity 的该属性设置为“true”，则任务会用其内的下一个 Activity 的 Intent 替换基本 Intent。 如果下一个 Activity 的该属性也设置为“true”，则该 Activity 会将基本 Intent 给予其在同一任务中启动的任何 Activity。 系统继续为每个 Activity 执行此过程，直至遇到的某个 Activity 将该属性设置为“false”为止。 默认值为“false”。<br>还有一个很有意思的功能是，如果该属性设置为“true”，则 Activity 还可利用 ActivityManager.TaskDescription 来更改概览屏幕中的标签、颜色和图标。</p>\n<p><strong>android:resizeableActivity=[“true” | “false”]</strong><br>这个标识和 里面的作用一样，如果在 activity 里面定义的话则代表这个 activity 是否支持分屏模式。如果您将该属性设置为 true，则用户可以分屏和自由形状模式启动 Activity。 如果您将该属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。<br>该属性是在 API 级别 24 添加的，如果您的应用面向 API 级别 24 或更高级别，但未对该属性指定值，则该属性的值默认设为 true。</p>\n<p><strong>android:screenOrientation</strong><br>Activity 在设备上的显示方向。如果 Activity 是在多窗口模式下运行，系统会忽略该属性。它的取值可以是如下：<br>| <strong>Value</strong>          | <strong>Description</strong>                          |<br>| —————— | —————————————- |<br>| “unspecified”      | 默认值。由系统选择方向。在不同设备上，系统使用的政策以及基于政策在特定上下文所做的选择可能有所差异。 |<br>| “behind”           | 与 Activity 栈中紧接着它的 Activity 的方向相同。       |<br>| “landscape”        | 横向方向（显示的宽度大于高度）。                         |<br>| “portrait”         | 纵向方向（显示的高度大于宽度）。                         |<br>| “reverseLandscape” | 与正常横向方向相反的横向方向。API 级别 9 中的新增配置。          |<br>| “reversePortrait”  | 与正常纵向方向相反的纵向方向。API 级别 9 中的新增配置。          |<br>| “sensorLandscape”  | 横向方向，但根据设备传感器，可以是正常或反向的横向方向。API 级别 9 中的新增配置。 |<br>| “sensorPortrait”   | 纵向方向，但根据设备传感器，可以是正常或反向的纵向方向。API 级别 9 中的新增配置。 |<br>| “userLandscape”    | 横向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的横向方向。 如果用户锁定了基于传感器的旋转，其行为与 landscape 相同，否则，其行为与 sensorLandscape 相同。API 级别 18 中的新增配置。 |<br>| “userPortrait”     | 纵向方向，但根据设备传感器和用户的传感器首选项，可以是正常或反向的纵向方向。 如果用户锁定了基于传感器的旋转，其行为与 portrait 相同，否则，其行为与 sensorPortrait 相同。API 级别 18 中的新增配置。 |<br>| “sensor”           | 方向由设备方向传感器决定。显示方向取决于用户如何手持设备，它会在用户旋转设备时发生变化。 但一些设备默认情况下不会旋转到所有四种可能的方向。要允许全部四种方向，请使用 “fullSensor”。 |<br>| “fullSensor”       | 方向由 4 种方向中任一方向的设备方向传感器决定。这与 “sensor” 类似，不同的是它允许所有 4 种可能的屏幕方向，无论设备正常情况下采用什么方向（例如，一些设备正常情况下不使用反向纵向或反向横向，但它支持这些方向）。 API 级别 9 中的新增配置。 |<br>| “nosensor”         | 决定方向时不考虑物理方向传感器。传感器会被忽略，因此显示不会随用户对设备的移动而旋转。 除了这个区别，系统在选择方向时使用的政策与“unspecified”设置相同。 |<br>| “user”             | 用户当前的首选方向。                               |<br>| “fullUser”         | 如果用户锁定了基于传感器的旋转，其行为与 user 相同，否则，其行为与 fullSensor 相同，允许所有 4 种可能的屏幕方向。 API 级别 18 中的新增配置。 |<br>| “locked”           | 将方向锁定在其当前的任意旋转方向。API 级别 18 中的新增配置。       |</p>\n<blockquote>\n<p>注：如果您声明其中一个横向或纵向值，系统将其视为对 Activity 运行方向的硬性要求。 因此，您声明的值支持通过 Google Play 之类的服务进行过滤，这样就能将您的应用只提供给支持 Activity 所要求方向的设备。 例如，如果您声明了 “landscape”、”reverseLandscape” 或 “sensorLandscape”，则您的应用将只提供给支持横向方向的设备。 不过，您还应通过 元素明确声明，您的应用要求采用纵向或横向方向。 例如，。这纯粹是 Google Play（以及其他支持它的服务）提供的一种过滤行为，平台本身并不能控制当设备仅支持特定方向时您的应用能否安装</p>\n</blockquote>\n<p><strong>android:stateNotNeeded</strong><br>该标识用来指明能否在不保存 Activity 状态的情况下将其终止并成功重新启动 —“true”表示可在不考虑其之前状态的情况下重新启动，“false”表示需要之前状态，默认值为“false”。一般情况下，为保存资源而暂时关闭 Activity 前，系统会调用 onSaveInstanceState() 方法，该方法将 Activity 的当前状态存储在一个 Bundle 对象中，然后在 Activity 重新启动时将其传递给 onCreate() 。如果该属性设置为 true，系统可能不会调用 onSaveInstanceState()，并且会向 onCreate() 传递 null 而不是 Bundle，这样就与它在 Activity 首次启动时完全一样。<br>这个标识又一个特别有用的地方是，true 设置可确保 Activity 能够在未保留状态时重新启动。 例如，显示主屏幕的 Activity 可以使用该设置来确保其由于某种原因崩溃时不会被移除。</p>\n<p><strong>android:supportsPictureInPicture=[“true” | “false”]</strong><br>指定 Activity 是否支持画中画显示，设置该属性的同时，需要将 android:resizeableActivity 标识设置为 true，要不然系统会忽略该属性，可以看到设置完该属性之后，android TV 就可以实现手机端一个悬浮 activity 的效果，类似于 youtube 。<br>所以同样这个标识和 android:resizeableActivity 一样都是 API24 版本添加的。</p>\n<p><strong>android:taskAffinity=”string”</strong><br>这个标识用来指明一个 Activity 的亲和性，使用方案可以看看我的博客：android深入解析Activity的launchMode启动模式，Intent Flag，taskAffinity。从概念上讲，具有相同亲和关系的 Activity 归属同一任务（从用户的角度来看，则是归属同一“应用”）。 任务的亲和关系由其根 Activity 的亲和关系确定。亲和关系确定两件事 - Activity 更改到的父项任务（请参阅上面提到的 allowTaskReparenting 属性）和通过 FLAG_ACTIVITY_NEW_TASK 标志启动 Activity 时将用来容纳它的任务。默认情况下，应用中的所有 Activity 都具有相同的亲和关系。您可以设置该属性来以不同方式组合它们，甚至可以将在不同应用中定义的 Activity 置于同一任务内。 要指定 Activity 与任何任务均无亲和关系，请将其设置为空字符串。如果未设置该属性，则 Activity 继承为应用设置的亲和关系（可以参考 元素的 taskAffinity 属性），应用默认亲和关系的名称是 元素设置的 packageName。</p>\n<p><strong>android:theme=”resource or theme”</strong><br>这个标识用的应该很多了，用来定义一个 activity 的样式，为一个资源的引用，它会自动将 Activity 的上下文设置为使用该主题（请参阅 setTheme()），它还可以引发 Activity 启动前的“启动”动画（以更加符合 Activity 的实际外观）。如果未设置该属性，则 Activity 继承通过 application 元素的 theme 属性为应用整体设置的主题。 如果该属性也未设置，则使用默认系统主题。</p>\n<p><strong>android:uiOptions=[“none” | “splitActionBarWhenNarrow”]</strong><br>这个标识主要是用来针对 action bar 的，它有两个值：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Value</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“none”</td>\n<td>无附加 UI 选项。这是默认值。</td>\n</tr>\n<tr>\n<td>“splitActionBarWhenNarrow”</td>\n<td>当水平空间受限时（例如在手持设备上的纵向模式下时）在屏幕底部添加一个栏以显示应用栏（也称为操作栏）中的操作项）。 应用栏不是以少量操作项形式出现在屏幕顶部的应用栏中，而是分成了顶部导航区和底部操作项栏。 这可以确保操作项以及顶部的导航和标题元素都能获得合理的空间。 菜单项不会拆分到两个栏中，它们始终一起出现。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>android:windowSoftInputMode</strong><br>activity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。<br>这个属性能影响两件事情：</p>\n<ul>\n<li>当 Activity 成为用户注意的焦点时软键盘的状态 — 隐藏还是可见</li>\n<li>对 Activity 主窗口所做的调整 — 是否将其尺寸调小以为软键盘腾出空间，或者当窗口部分被软键盘遮挡时是否平移其内容以使当前焦点可见<br>各值的含义：</li>\n<li>stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置</li>\n<li>stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示</li>\n<li>stateHidden：用户选择activity时，软键盘总是被隐藏</li>\n<li>stateAlwaysHidden：当用户选择 Activity 时 — 也就是说，当用户确实是向前导航到 Activity，而不是因离开另一 Activity 而返回时 — 隐藏软键盘。（当该Activity主窗口获取焦点时，软键盘也总是被隐藏的）</li>\n<li>stateVisible：软键盘通常是可见的</li>\n<li>stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态</li>\n<li>adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示</li>\n<li>adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间</li>\n<li>adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分<blockquote>\n<p>adjustResize 和 adjustPan 的区别就在于前者是调整 Activity 的窗口尺寸来达到适配的目的，而 adjustPan 仅仅只是将窗口平移，界面的一部分就会被软键盘覆盖住，就不会被挤到软键盘之上了。</p>\n</blockquote>\n</li>\n</ul>"},{"title":"android-okhttp","date":"2017-02-06T08:14:28.000Z","_content":"\n## 概述\n\n> OKhttp3是一个高效的http&http/2的客户端，用于android和java，支持同步和异步请求。\n\nOKhttp3是开源界著名的Square公司的大作，大神[JakeWharton](https://github.com/JakeWharton)的公司。Google已把Android的网络请求替换为Okhttp的实现\n\nOKhttp3有以下优点：\n\n1. 支持请求相同host的所有请求，共享socket\n\n2. 连接池可以减少请求延迟(如果HTTP / 2不可使用)。\n\n3. 透明的GZIP压缩\n\n4. 响应缓存避免了完全重复的网络请求\n\n5. socket自动选择最好路线，并支持自动重连\n\n6. …...\n\n支持版本：Android 2.3及以上，java1.7及以上\n\n<!--more-->\n\n## 引用\n\n> 注:okhttp内部依赖okio，同时导入okio：\n\nGrade\n\n```java\ncompile ‘com.squareup.okhttp3:okhttp:3.3.1’\ncompile ‘com.squareup.okio:okio:1.8.0’\n```\n\n对于使用Eclipse的同学，可以去Square官网去下载相应的jar包\n\n[官网](http://square.github.io/okhttp/)\n\n[okhttp](https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST)\n\n[okio](https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST)\n\n## 基本用法\n\n初始化一个client: \n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n```\n\nGet请求\n```java\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n  // 同步\n  Response response = client.newCall(request).execute();\n  \n  // 异步\n  client.newCall(request).enqueue(new Callback() {\n      @Override \n      public void onFailure(Call call, IOException e) {\n      }\n\n      @Override \n      public void onResponse(Call call, Response response) throws IOException {\n      }\n  });\n}\n```\n\nPost请求\n```java\npublic void run() throws Exception {\n  Request.Builder builder = new Request.Builder()\n  FormBody.Builder formEncodingBuilder = new FormBody.Builder();\n  formEncodingBuilder.add(key,value);\n  RequestBody requestBody = formEncodingBuilder.build()\n  builder.post(requestBody)\n  builder.url(“http://publicobject.com/helloworld.txt”);\n  Request request = builder.build();\n  \n  // 同步\n  Response response = client.newCall(request).execute();\n              \n  // 异步\n  client.newCall(request).enqueue(new Callback() {\n      @Override \n      public void onFailure(Call call, IOException e) {\n      }\n\n      @Override \n      public void onResponse(Call call, Response response) throws IOException {\n      }\n  });           \n}\n```\n\n添加Headers\n```java\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \" + response.header(\"Date\"));\n    System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n}\n```\n\n上传文件\n```java\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\npublic void run() throws Exception {\n    File file = new File(\"README.md\");\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()){}\n    System.out.println(response.body().string());\n}\n```\n\n发送多个请求\n```java\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n\npublic void run() throws Exception {\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n         RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()){}\n}\n```\n\n用Gson解析Json Response\n```java\nprivate final Gson gson = new Gson();\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n      System.out.println(entry.getKey());\n      System.out.println(entry.getValue().content);\n    }\n}\n\nstatic class Gist {\n  Map<String, GistFile> files;\n}\n\nstatic class GistFile {\n  String content;\n}\n```\n\n缓存\n```java\nprivate final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\n    int cacheSize = 10 * 1024 * 1024; // 10 MiB\n    Cache cache = new Cache(cacheDirectory, cacheSize);\n    client = new OkHttpClient.Builder()\n        .cache(cache)\n        .build();\n     Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n    Response response1 = client.newCall(request).execute();\n}\n```\n\n取消一个请求\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\")\n        .build();\n    final Call call = client.newCall(request);\n    Response response = call.execute();    \n    call.cancel();\n}\n```\n\n设置超时\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic ConfigureTimeouts() throws Exception {\n    client = new OkHttpClient.Builder()\n        .connectTimeout(10, TimeUnit.SECONDS)\n        .writeTimeout(10, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .build();\n}\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\")\n        .build();\n    final Call call = client.newCall(request);\n    Response response = call.execute();\n}\n```\n\n自定义拦截器\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  client.networkInterceptors().add(new Interceptor() {    \n      @Override    \n      public Response intercept(Chain chain) throws IOException {   \n          Request originalRequest = paramChain.request();\n          ……\n          ……\n          ……         \n          return paramChain.proceed(compressedRequest);       \n      }\n  });\n  Request request = new Request.Builder()\n    \t.url(\"http://httpbin.org/delay/2\")\n    \t.build();\n  final Call call = client.newCall(request);\n  Response response = call.execute();\n}\n```","source":"_posts/android/android-okhttp.md","raw":"---\ntitle: android-okhttp\ndate: 2017-02-06 16:14:28\ntags: android\n---\n\n## 概述\n\n> OKhttp3是一个高效的http&http/2的客户端，用于android和java，支持同步和异步请求。\n\nOKhttp3是开源界著名的Square公司的大作，大神[JakeWharton](https://github.com/JakeWharton)的公司。Google已把Android的网络请求替换为Okhttp的实现\n\nOKhttp3有以下优点：\n\n1. 支持请求相同host的所有请求，共享socket\n\n2. 连接池可以减少请求延迟(如果HTTP / 2不可使用)。\n\n3. 透明的GZIP压缩\n\n4. 响应缓存避免了完全重复的网络请求\n\n5. socket自动选择最好路线，并支持自动重连\n\n6. …...\n\n支持版本：Android 2.3及以上，java1.7及以上\n\n<!--more-->\n\n## 引用\n\n> 注:okhttp内部依赖okio，同时导入okio：\n\nGrade\n\n```java\ncompile ‘com.squareup.okhttp3:okhttp:3.3.1’\ncompile ‘com.squareup.okio:okio:1.8.0’\n```\n\n对于使用Eclipse的同学，可以去Square官网去下载相应的jar包\n\n[官网](http://square.github.io/okhttp/)\n\n[okhttp](https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST)\n\n[okio](https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST)\n\n## 基本用法\n\n初始化一个client: \n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n```\n\nGet请求\n```java\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n  // 同步\n  Response response = client.newCall(request).execute();\n  \n  // 异步\n  client.newCall(request).enqueue(new Callback() {\n      @Override \n      public void onFailure(Call call, IOException e) {\n      }\n\n      @Override \n      public void onResponse(Call call, Response response) throws IOException {\n      }\n  });\n}\n```\n\nPost请求\n```java\npublic void run() throws Exception {\n  Request.Builder builder = new Request.Builder()\n  FormBody.Builder formEncodingBuilder = new FormBody.Builder();\n  formEncodingBuilder.add(key,value);\n  RequestBody requestBody = formEncodingBuilder.build()\n  builder.post(requestBody)\n  builder.url(“http://publicobject.com/helloworld.txt”);\n  Request request = builder.build();\n  \n  // 同步\n  Response response = client.newCall(request).execute();\n              \n  // 异步\n  client.newCall(request).enqueue(new Callback() {\n      @Override \n      public void onFailure(Call call, IOException e) {\n      }\n\n      @Override \n      public void onResponse(Call call, Response response) throws IOException {\n      }\n  });           \n}\n```\n\n添加Headers\n```java\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/repos/square/okhttp/issues\")\n        .header(\"User-Agent\", \"OkHttp Headers.java\")\n        .addHeader(\"Accept\", \"application/json; q=0.5\")\n        .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \" + response.header(\"Date\"));\n    System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n}\n```\n\n上传文件\n```java\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n      = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\npublic void run() throws Exception {\n    File file = new File(\"README.md\");\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/markdown/raw\")\n        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()){}\n    System.out.println(response.body().string());\n}\n```\n\n发送多个请求\n```java\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n\npublic void run() throws Exception {\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"title\", \"Square Logo\")\n        .addFormDataPart(\"image\", \"logo-square.png\",\n         RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n        .build();\n\n    Request request = new Request.Builder()\n        .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n        .url(\"https://api.imgur.com/3/image\")\n        .post(requestBody)\n        .build();\n\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()){}\n}\n```\n\n用Gson解析Json Response\n```java\nprivate final Gson gson = new Gson();\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n        .build();\n    Response response = client.newCall(request).execute();\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);\n    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n      System.out.println(entry.getKey());\n      System.out.println(entry.getValue().content);\n    }\n}\n\nstatic class Gist {\n  Map<String, GistFile> files;\n}\n\nstatic class GistFile {\n  String content;\n}\n```\n\n缓存\n```java\nprivate final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\n    int cacheSize = 10 * 1024 * 1024; // 10 MiB\n    Cache cache = new Cache(cacheDirectory, cacheSize);\n    client = new OkHttpClient.Builder()\n        .cache(cache)\n        .build();\n     Request request = new Request.Builder()\n        .url(\"http://publicobject.com/helloworld.txt\")\n        .build();\n    Response response1 = client.newCall(request).execute();\n}\n```\n\n取消一个请求\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\")\n        .build();\n    final Call call = client.newCall(request);\n    Response response = call.execute();    \n    call.cancel();\n}\n```\n\n设置超时\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic ConfigureTimeouts() throws Exception {\n    client = new OkHttpClient.Builder()\n        .connectTimeout(10, TimeUnit.SECONDS)\n        .writeTimeout(10, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .build();\n}\n\npublic void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"http://httpbin.org/delay/2\")\n        .build();\n    final Call call = client.newCall(request);\n    Response response = call.execute();\n}\n```\n\n自定义拦截器\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  client.networkInterceptors().add(new Interceptor() {    \n      @Override    \n      public Response intercept(Chain chain) throws IOException {   \n          Request originalRequest = paramChain.request();\n          ……\n          ……\n          ……         \n          return paramChain.proceed(compressedRequest);       \n      }\n  });\n  Request request = new Request.Builder()\n    \t.url(\"http://httpbin.org/delay/2\")\n    \t.build();\n  final Call call = client.newCall(request);\n  Response response = call.execute();\n}\n```","slug":"android/android-okhttp","published":1,"updated":"2017-02-27T03:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tz000kfq9m9u2wkggt","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>OKhttp3是一个高效的http&amp;http/2的客户端，用于android和java，支持同步和异步请求。</p>\n</blockquote>\n<p>OKhttp3是开源界著名的Square公司的大作，大神<a href=\"https://github.com/JakeWharton\" target=\"_blank\" rel=\"external\">JakeWharton</a>的公司。Google已把Android的网络请求替换为Okhttp的实现</p>\n<p>OKhttp3有以下优点：</p>\n<ol>\n<li><p>支持请求相同host的所有请求，共享socket</p>\n</li>\n<li><p>连接池可以减少请求延迟(如果HTTP / 2不可使用)。</p>\n</li>\n<li><p>透明的GZIP压缩</p>\n</li>\n<li><p>响应缓存避免了完全重复的网络请求</p>\n</li>\n<li><p>socket自动选择最好路线，并支持自动重连</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>支持版本：Android 2.3及以上，java1.7及以上</p>\n<a id=\"more\"></a>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>注:okhttp内部依赖okio，同时导入okio：</p>\n</blockquote>\n<p>Grade</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile ‘com.squareup.okhttp3:okhttp:<span class=\"number\">3.3</span>.1’</div><div class=\"line\">compile ‘com.squareup.okio:okio:<span class=\"number\">1.8</span>.0’</div></pre></td></tr></table></figure>\n<p>对于使用Eclipse的同学，可以去Square官网去下载相应的jar包</p>\n<p><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p><a href=\"https://search.maven.org/remote_content?g=com.squareup.okhttp3&amp;a=okhttp&amp;v=LATEST\" target=\"_blank\" rel=\"external\">okhttp</a></p>\n<p><a href=\"https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST\" target=\"_blank\" rel=\"external\">okio</a></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>初始化一个client: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div></pre></td></tr></table></figure>\n<p>Get请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">      .url(<span class=\"string\">\"http://publicobject.com/helloworld.txt\"</span>)</div><div class=\"line\">      .build();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 同步</span></div><div class=\"line\">  Response response = client.newCall(request).execute();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 异步</span></div><div class=\"line\">  client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Post请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  Request.Builder builder = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">  FormBody.Builder formEncodingBuilder = <span class=\"keyword\">new</span> FormBody.Builder();</div><div class=\"line\">  formEncodingBuilder.add(key,value);</div><div class=\"line\">  RequestBody requestBody = formEncodingBuilder.build()</div><div class=\"line\">  builder.post(requestBody)</div><div class=\"line\">  builder.url(“http:<span class=\"comment\">//publicobject.com/helloworld.txt”);</span></div><div class=\"line\">  Request request = builder.build();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 同步</span></div><div class=\"line\">  Response response = client.newCall(request).execute();</div><div class=\"line\">              </div><div class=\"line\">  <span class=\"comment\">// 异步</span></div><div class=\"line\">  client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);           </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加Headers<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/repos/square/okhttp/issues\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"OkHttp Headers.java\"</span>)</div><div class=\"line\">        .addHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json; q=0.5\"</span>)</div><div class=\"line\">        .addHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/vnd.github.v3+json\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected code \"</span> + response);</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"Server: \"</span> + response.header(<span class=\"string\">\"Server\"</span>));</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Date: \"</span> + response.header(<span class=\"string\">\"Date\"</span>));</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Vary: \"</span> + response.headers(<span class=\"string\">\"Vary\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上传文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class=\"line\">      = MediaType.parse(<span class=\"string\">\"text/x-markdown; charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"README.md\"</span>);</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/markdown/raw\"</span>)</div><div class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful())&#123;&#125;</div><div class=\"line\">    System.out.println(response.body().string());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送多个请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMGUR_CLIENT_ID = <span class=\"string\">\"...\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MediaType MEDIA_TYPE_PNG = MediaType.parse(<span class=\"string\">\"image/png\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    RequestBody requestBody = <span class=\"keyword\">new</span> MultipartBody.Builder()</div><div class=\"line\">        .setType(MultipartBody.FORM)</div><div class=\"line\">        .addFormDataPart(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"Square Logo\"</span>)</div><div class=\"line\">        .addFormDataPart(<span class=\"string\">\"image\"</span>, <span class=\"string\">\"logo-square.png\"</span>,</div><div class=\"line\">         RequestBody.create(MEDIA_TYPE_PNG, <span class=\"keyword\">new</span> File(<span class=\"string\">\"website/static/logo-square.png\"</span>)))</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Client-ID \"</span> + IMGUR_CLIENT_ID)</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.imgur.com/3/image\"</span>)</div><div class=\"line\">        .post(requestBody)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful())&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用Gson解析Json Response<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/gists/c2a7c39532239ff261be\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected code \"</span> + response);</div><div class=\"line\"></div><div class=\"line\">    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) &#123;</div><div class=\"line\">      System.out.println(entry.getKey());</div><div class=\"line\">      System.out.println(entry.getValue().content);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gist</span> </span>&#123;</div><div class=\"line\">  Map&lt;String, GistFile&gt; files;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GistFile</span> </span>&#123;</div><div class=\"line\">  String content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>缓存<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheResponse</span><span class=\"params\">(File cacheDirectory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">    Cache cache = <span class=\"keyword\">new</span> Cache(cacheDirectory, cacheSize);</div><div class=\"line\">    client = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">        .cache(cache)</div><div class=\"line\">        .build();</div><div class=\"line\">     Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://publicobject.com/helloworld.txt\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response1 = client.newCall(request).execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>取消一个请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">    Response response = call.execute();    </div><div class=\"line\">    call.cancel();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设置超时<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConfigureTimeouts</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    client = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">        .connectTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .writeTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .readTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .build();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">    Response response = call.execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自定义拦截器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  client.networkInterceptors().add(<span class=\"keyword\">new</span> Interceptor() &#123;    </div><div class=\"line\">      <span class=\"meta\">@Override</span>    </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;   </div><div class=\"line\">          Request originalRequest = paramChain.request();</div><div class=\"line\">          ……</div><div class=\"line\">          ……</div><div class=\"line\">          ……         </div><div class=\"line\">          <span class=\"keyword\">return</span> paramChain.proceed(compressedRequest);       </div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">    \t.url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">    \t.build();</div><div class=\"line\">  <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">  Response response = call.execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>OKhttp3是一个高效的http&amp;http/2的客户端，用于android和java，支持同步和异步请求。</p>\n</blockquote>\n<p>OKhttp3是开源界著名的Square公司的大作，大神<a href=\"https://github.com/JakeWharton\">JakeWharton</a>的公司。Google已把Android的网络请求替换为Okhttp的实现</p>\n<p>OKhttp3有以下优点：</p>\n<ol>\n<li><p>支持请求相同host的所有请求，共享socket</p>\n</li>\n<li><p>连接池可以减少请求延迟(如果HTTP / 2不可使用)。</p>\n</li>\n<li><p>透明的GZIP压缩</p>\n</li>\n<li><p>响应缓存避免了完全重复的网络请求</p>\n</li>\n<li><p>socket自动选择最好路线，并支持自动重连</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>支持版本：Android 2.3及以上，java1.7及以上</p>","more":"<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>注:okhttp内部依赖okio，同时导入okio：</p>\n</blockquote>\n<p>Grade</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile ‘com.squareup.okhttp3:okhttp:<span class=\"number\">3.3</span>.1’</div><div class=\"line\">compile ‘com.squareup.okio:okio:<span class=\"number\">1.8</span>.0’</div></pre></td></tr></table></figure>\n<p>对于使用Eclipse的同学，可以去Square官网去下载相应的jar包</p>\n<p><a href=\"http://square.github.io/okhttp/\">官网</a></p>\n<p><a href=\"https://search.maven.org/remote_content?g=com.squareup.okhttp3&amp;a=okhttp&amp;v=LATEST\">okhttp</a></p>\n<p><a href=\"https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST\">okio</a></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>初始化一个client: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div></pre></td></tr></table></figure>\n<p>Get请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">      .url(<span class=\"string\">\"http://publicobject.com/helloworld.txt\"</span>)</div><div class=\"line\">      .build();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 同步</span></div><div class=\"line\">  Response response = client.newCall(request).execute();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 异步</span></div><div class=\"line\">  client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Post请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  Request.Builder builder = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">  FormBody.Builder formEncodingBuilder = <span class=\"keyword\">new</span> FormBody.Builder();</div><div class=\"line\">  formEncodingBuilder.add(key,value);</div><div class=\"line\">  RequestBody requestBody = formEncodingBuilder.build()</div><div class=\"line\">  builder.post(requestBody)</div><div class=\"line\">  builder.url(“http:<span class=\"comment\">//publicobject.com/helloworld.txt”);</span></div><div class=\"line\">  Request request = builder.build();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 同步</span></div><div class=\"line\">  Response response = client.newCall(request).execute();</div><div class=\"line\">              </div><div class=\"line\">  <span class=\"comment\">// 异步</span></div><div class=\"line\">  client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span> </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);           </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加Headers<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/repos/square/okhttp/issues\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"OkHttp Headers.java\"</span>)</div><div class=\"line\">        .addHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json; q=0.5\"</span>)</div><div class=\"line\">        .addHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/vnd.github.v3+json\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected code \"</span> + response);</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"Server: \"</span> + response.header(<span class=\"string\">\"Server\"</span>));</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Date: \"</span> + response.header(<span class=\"string\">\"Date\"</span>));</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Vary: \"</span> + response.headers(<span class=\"string\">\"Vary\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上传文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class=\"line\">      = MediaType.parse(<span class=\"string\">\"text/x-markdown; charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"README.md\"</span>);</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/markdown/raw\"</span>)</div><div class=\"line\">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful())&#123;&#125;</div><div class=\"line\">    System.out.println(response.body().string());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发送多个请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMGUR_CLIENT_ID = <span class=\"string\">\"...\"</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MediaType MEDIA_TYPE_PNG = MediaType.parse(<span class=\"string\">\"image/png\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    RequestBody requestBody = <span class=\"keyword\">new</span> MultipartBody.Builder()</div><div class=\"line\">        .setType(MultipartBody.FORM)</div><div class=\"line\">        .addFormDataPart(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"Square Logo\"</span>)</div><div class=\"line\">        .addFormDataPart(<span class=\"string\">\"image\"</span>, <span class=\"string\">\"logo-square.png\"</span>,</div><div class=\"line\">         RequestBody.create(MEDIA_TYPE_PNG, <span class=\"keyword\">new</span> File(<span class=\"string\">\"website/static/logo-square.png\"</span>)))</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Client-ID \"</span> + IMGUR_CLIENT_ID)</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.imgur.com/3/image\"</span>)</div><div class=\"line\">        .post(requestBody)</div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful())&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用Gson解析Json Response<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"https://api.github.com/gists/c2a7c39532239ff261be\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response = client.newCall(request).execute();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!response.isSuccessful()) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Unexpected code \"</span> + response);</div><div class=\"line\"></div><div class=\"line\">    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) &#123;</div><div class=\"line\">      System.out.println(entry.getKey());</div><div class=\"line\">      System.out.println(entry.getValue().content);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gist</span> </span>&#123;</div><div class=\"line\">  Map&lt;String, GistFile&gt; files;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GistFile</span> </span>&#123;</div><div class=\"line\">  String content;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>缓存<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheResponse</span><span class=\"params\">(File cacheDirectory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> cacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MiB</span></div><div class=\"line\">    Cache cache = <span class=\"keyword\">new</span> Cache(cacheDirectory, cacheSize);</div><div class=\"line\">    client = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">        .cache(cache)</div><div class=\"line\">        .build();</div><div class=\"line\">     Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://publicobject.com/helloworld.txt\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    Response response1 = client.newCall(request).execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>取消一个请求<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">    Response response = call.execute();    </div><div class=\"line\">    call.cancel();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>设置超时<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConfigureTimeouts</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    client = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">        .connectTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .writeTimeout(<span class=\"number\">10</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .readTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS)</div><div class=\"line\">        .build();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">        .url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">    <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">    Response response = call.execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自定义拦截器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">  client.networkInterceptors().add(<span class=\"keyword\">new</span> Interceptor() &#123;    </div><div class=\"line\">      <span class=\"meta\">@Override</span>    </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;   </div><div class=\"line\">          Request originalRequest = paramChain.request();</div><div class=\"line\">          ……</div><div class=\"line\">          ……</div><div class=\"line\">          ……         </div><div class=\"line\">          <span class=\"keyword\">return</span> paramChain.proceed(compressedRequest);       </div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  Request request = <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">    \t.url(<span class=\"string\">\"http://httpbin.org/delay/2\"</span>)</div><div class=\"line\">    \t.build();</div><div class=\"line\">  <span class=\"keyword\">final</span> Call call = client.newCall(request);</div><div class=\"line\">  Response response = call.execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Android配置文件详解-AndroidManifest","date":"2017-02-22T03:51:47.000Z","_content":"\n# AndroidManifest\n\n> 每个应用的根目录中都必须包含一个AndroidManifest.xml文件(且文件名精确无误)。AndroidManifest向Android系统提供应用的必要信息，系统必须具备有这些信息方可运行应用的任何代码。\n> 此外，AndroidManifest还可执行以下操作\n\n- 为应用的Java软件包命名。软件包名称充当应用的唯一标识符。\n- 描述应用的各个组件，包括构成应用的 Activity、服务、广播接收器和内容提供程序。它还为实现每个组件的类命名并发布其功能，例如它们可以处理的 [Intent](https://developer.android.com/reference/android/content/Intent.html) 消息。这些声明向 Android 系统告知有关组件以及可以启动这些组件的条件的信息。\n- 确定托管应用组件的进程。\n- 声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互。还声明其他应用与该应用组件交互所需具备的权限。\n- 列出 [Instrumentation](https://developer.android.com/reference/android/app/Instrumentation.html) 类，这些类可在应用运行时提供分析和其他信息。这些声明只会在应用处于开发阶段时出现在清单中，在应用发布之前将移除。\n- 声明应用所需的最低 Android API 级别\n- 列出应用必须链接到的库\n\n注：准备要在 Chromebook 上运行的 Android 应用时，要考虑一些重要的硬件和软件功能限制。如需了解详细信息，请参阅 [Chromebook 的应用清单兼容性](https://developer.android.com/topic/arc/manifest.html)文档。\n\n<!--more-->\n\n## AndroidManifest文件结构\n\n下面是AndroidManifest文件的示例：\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<manifest>\n\n    <uses-permission />\n    <permission />\n    <permission-tree />\n    <permission-group />\n    <instrumentation />\n    <uses-sdk />\n    <uses-configuration />  \n    <uses-feature />  \n    <supports-screens />  \n    <compatible-screens />  \n    <supports-gl-texture />  \n\n    <application>\n  \t\t<meta-data />\n        <activity>\n            <intent-filter>\n                <action />\n                <category />\n                <data />\n            </intent-filter>\n            <meta-data />\n        </activity>\n\n        <activity-alias>\n            <intent-filter> . . . </intent-filter>\n            <meta-data />\n        </activity-alias>\n\n        <service>\n            <intent-filter> . . . </intent-filter>\n            <meta-data/>\n        </service>\n\n        <receiver>\n            <intent-filter> . . . </intent-filter>\n            <meta-data />\n        </receiver>\n\n        <provider>\n            <grant-uri-permission />\n            <meta-data />\n            <path-permission />\n        </provider>\n\n        <uses-library />\n\n    </application>\n\n</manifest>\n```\n\n### AndroidManifest属性\n\n##### Application\n\n```java\n<application  \n  \tandroid:allowBackup=[\"true\" | \"false\"]\n\tandroid:allowClearUserData=[\"true\" | \"false\"]\n    android:allowTaskReparenting=[\"true\" | \"false\"]\n    android:backupAgent=\"string\"\n    android:backupInForeground=[\"true\" | \"false\"]\n    android:banner=\"drawable resource\" \n    android:debuggable=[\"true\" | \"false\"]\n    android:description=\"string resource\"\n    android:enabled=[\"true\" | \"false\"]\n    android:extractNativeLibs=[\"true\" | \"false\"]\n    android:fullBackupContent=\"string\"\n    android:fullBackupOnly=[\"true\" | \"false\"]\n    android:hasCode=[\"true\" | \"false\"]\n    android:hardwareAccelerated=[\"true\" | \"false\"]\n    android:isGame=[\"true\" | \"false\"]\n    android:icon=\"drawable resource\"\n    android:killAfterRestore=[\"true\" | \"false\"]\n    android:label=\"string resource\"\n    android:largeHeap=[\"true\" | \"false\"]\n    android:logo=\"drawable resource\"\n    android:manageSpaceActivity=\"string\"\n    android:name=\"string\"\n    android:permission=\"string\"\n    android:persistent=[\"true\" | \"false\"]\n    android:process=\"string\"\n    android:restoreAnyVersion=[\"true\" | \"false\"]\n    android:requiredAccountType=\"string\"\n    android:resizeableActivity=[\"true\" | \"false\"]\n    android:restrictedAccountType=\"string\"\n    android:supportsRtl=[\"true\" | \"false\"]\n    android:taskAffinity=\"string\"\n    android:testOnly=[\"true\" | \"false\"]\n    android:theme=\"resource or theme\" \n    android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]\n    android:usesCleartextTraffic=[\"true\" | \"false\"]\n    android:vmSafeMode=[\"true\" | \"false\"]>\n</application>\n```\n\n**android:allowBackup**\n开启或关闭应用程序数据的备份和恢复功能，注意该属性值默认为true，如果你不需要你的应用被恢复导致隐私数据暴露（如果值为true，甚至可以直接通过adb命令获取该应用中的数据），必须手动设置此属性\n```bash\n// 备份\nadb backup -nosystem -noshared -apk -f d:/com.test.bak.ab com.test.bak\n\n-nosystem: 不备份系统应用\n-noshared: 不备份应用存储在SD中的数据\n-apk: 备份应用APK安装包\n-f d:/com.test.bak.ab: 备份文件在PC上的路径\ncom.test.bak: 要备份的包名\n\n// 恢复\nadb restore d:/com.test.bak.ab\n```\n\n\n**android:allowClearUserData**\n默认为`true`。用户是否能选择自行清除数据，程序管理器包含一个选择允许用户清除数据。当为true时，用户可自己清理用户数据，反之亦然\n\n**android:allowTaskReparenting(‘true’ or ‘false’)**\n默认值为`false`。是否允许activity`更换从属的任务。当该`Task`下一次被带到前面时，应用程序定义的`Activity`是否可以从启动它们的`Task`移动到有相同`affinity`的Task，比如从短信息任务切换到浏览器任务。Activity可以设置自己的`allowTaskReparenting`属性来覆盖Application节点下的这个属性。\n\n**android:backupAgent**\n此属性没有默认值。实现应用backup代理的类名，它是BackupAgent的一个子类。这个属性值应该是一个完整的类名，如com.project.BackupAgent.。如果类名的第一个字母是\".\"，它会附加到`mainfest`元素指定的包名之后。\n\n**android:backupInForeground**\n默认为`false`。一个应用即使在前台状态下也可以执行自动备份。当应用正在自动备份时，系统可能会停止应用，因此要谨慎的使用该属性。该属性设置为true会影响到处于激活状态下的应用的行为。\n\n**android:banner**\n没有默认值。一个drawable资源，用来提供一个扩展的图形banner。使用`application`标签为应用所有的Activity提供一个默认的banner，或者使用`activity`标签为一个指定的Activity设置banner。在`Android TV`的home页，系统使用banner来表示一个应用。由于banner仅仅在home页显示，当一个应用中有处理`CATEGORY_LEANBACK_LAUNCHER`这个intent的Activity时，才能指定该属性。这个属性必须设置一个包含图片的drawable资源的引用(例如\"@drawable/banner\")。\n\n**android:debuggable**\n默认为`false`。这个从字面上就可以看出是什么作用的，当设置为true时，表明该APP在手机上可以被调试。在false的情况下调试该APP，就会报以下错误：\nDevice XXX requires that applications explicitely declare themselves as debuggable in their manifest.\nApplication XXX does not have the attribute ‘debuggable’ set to TRUE in its manifest and cannot be debugged.\n\n**android:description**\n关于应用的用户可读的文字，比label属性更长、更具描述性。这个属性必须设置为一个字符串资源的引用。不像label属性，它不能是一个raw字符串。没有默认值\n\n**android:enabled**\n默认为`true`。Android系统是否能够实例化该应用程序的组件-true表示可以，false表示不可以。如果为true，每个组件的enabled属性决定那个组件是否可以被 enabled。如果为false，它覆盖组件指定的值，即所有组件都是disabled。\n\n**android:extractNativeLibs**\n默认值为true。包安装器能否从apk中抽取本地库到文件系统。如果设置为false，你的本地库必须页对其并且在apk中以未压缩的方式存储。链接器在运行时从apk中直接加载库不会导致代码改动。\n\n**android:fullBackupContent**\n该属性指向一个xml文件，这个文件包含了自动备份时全部的备份规则。这些规则决定了哪些文件会被备份。该属性为可选的。如果没设置，默认情况下，自动备份会备份应用的大部分的文件。\n\n**android:fullBackupOnly=[\"true\" | \"false\"]**\n默认值是`false`。当设备可用时是否使用自动备份。如果设置为true，当应用安装到运行Android 6.0及其更高版本的的设备上时，会运行自动备份，在低版本的设备上，应用将忽略这个属性并执行key/value方式的备份。\n\n**android:hasCode(‘true’ or ‘false’)**\n默认为`true`。表示此APP是否包含任何的代码。若为false，则系统在运行组件时，不会去尝试加载任何的APP代码\n一个应用程序自身不会含有任何的代码，除非内置组件类，比如Activity类，此类使用了AliasActivity类，当然这是个罕见的现象\n(在Android2.3可以用标准C来开发应用程序，可在androidManifest.xml中将此属性设置为false,因为这个APP本身已经不含有任何的JAVA代码了)\n\n**android:hardwareAccelerated=[\"true\" | \"false\"]**\n如果你设置了minSdkVersion或targetSdkVersion 为14或更高，默认是启用；否则默认不启用。应用中所有的Activity和View是否启用硬件加速渲染-true表示启用，false表示不启用。\n从 Android 3.0 (API level 11)开始，应用可使用支持硬件加速的OpenGL 渲染，用来提升许多通用的2D图形操作性能。当硬件加速渲染打开时，Canvas, Paint, Xfermode, ColorFilter, Shader, 和 Camera中的大部分操作都会被加速。这会使得动画更流畅、滑动更流畅，提升整体的响应性，甚至应用不必显式的使用framework的 OpenGL库。\n需要注意的是，不是全部的OpenGL 2D操作都会被加速。如果你打开了硬件加速渲染，请测试你的应用以确保使用渲染的过程中不会出错。\n\n**android:icon**\n没有默认图标。一个作为整体应用的图标，就是声明整个APP的图标(在桌面的启动图标,图片一般都放在drawable文件夹下)，并且是应用的每个组件的默认图标。 < activity>, < activity-alias>, < service>, < receiver>和 < provider>都可以有各自的图标。这个属性必须被设置为一个包含图片的drawable资源文件的引用（比如\"@drawable/icon\"）。\n\n**android:isGame=[\"true\" | \"false\"]**\n应用是否为游戏。系统可能把应用根据游戏分组或把它们与其他的应用分开来显示。默认为false。\n\n**android:killAfterRestore**\n`默认值为true`。当应用在全系统层面的恢复操作时，应用的设置被恢复后，应用应当终止运行。单个包的恢复操作不会导致应用关闭。全系统的恢复操作一般来说只会发生一次，即在手机第一次启动时。第三方的应用一般没必要使用这个属性。意味着当应用在全系统的恢复操作中处理完自己的数据后，将会停止运行。\n\n**android:largeHeap=[\"true\" | \"false\"]**\n你的应用进程是否通过一个largeDalvik heap 被创建。这个属性适用于所有的为应用创建的进程。它仅适用于被加载到进程的第一个应用；如果你使用shared user id来允许多个应用在同一个进程中，它们都必需一致的使用这个选项，否则可能出现不可预知的结果。\n大部分app都不应使用这个属性，而应该把焦点放在如何减少整体的内存使用来提示性能。启用此功能也不能保证可用内存的固定增加，因为一些设备被全部可用内存限制了。\n可使用ActivityManager.getMemoryClass() or ActivityManager.getLargeMemoryClass()在运行时获取可用的内存大小。\n\n**android:label**\n应用的标签名(应用名称)。把应用作为整体的用户可读标签，也是应用中各个组件的默认标签。 < activity>, < activity-alias>, < service>, < receiver>, < provider> 都可以设置各自的标签。标签应设置为一个字符串资源的引用，以便可以像用户界面中的其他字符串一样进行本地化。为了方便，在开发应用时可以设置为原始字符串。\n\n**android:logo=\"drawable resource\"**\n应用作为一个整体的logo，也是所有Activity的默认logo。这个属性必须被设置为一个包含图片的drawable资源的引用（比如@drawable/logo）。没有默认logo。默认情况下，使用在ActionBar中使用icon，如果同时也设置了logo属性，ActionBar上将使用logo。logo应比icon远，但不应包括不必要的文本。 只有在以用户认可的传统格式表示您的品牌时才应使用logo。 logo代表预期的使用者品牌，而应用程序的的icon是符合启动器图示方形要求的修改版本。\n\n**android:manageSpaceActivity**\n一个Activity子类的全限定名，系统可以启动它来让用户管理设备上应用的内存使用情况。这个Activity也必须使用< activity> 元素来声明。\n\n**android:name**\n为应用程序所实现的Application子类的全名。当应用程序进程开始时，该类在所有应用程序组件之前被实例化。\n若该类(比方androidMain类)是在声明的package下，则可以直接声明android:name=”androidMain”,但此类是在package下面的子包的话，就必须声明为全路径或android:name=”package名称.子包名成.androidMain”\n\n**android:permission**\n为了跟应用交互，客户端必须拥有的权限。这个属性是适用于应用中所有组件设置权限的一个方便的方法。每个组件可设置各自的permission属性来覆盖application中的这个属性。\n\n**android:presistent**\n默认值是false。该应用程序是否应该在任何时候都保持运行状态,默认为false。因为应用程序通常不应该设置本标识，持续模式仅仅应该设置给某些系统应用程序才是有意义的。\n\n**android:process**\n应用程序运行的进程名，它的默认值为元素里设置的包名，当然每个组件都可以通过设置该属性来覆盖默认值。如果你想两个应用程序共用一个进程的话，你可以设置他们的android:process相同，但前提条件是他们共享一个用户ID及被赋予了相同证书的时候\n\n**android:restoreAnyVersion**\n此属性的默认值为`false`。用来表明应用是否准备尝试恢复所有的备份，即使该备份是由比当前在设备上安装的应用程序的更新版本存储的。 将此属性设置为true将允许备份管理器尝试恢复，即使版本不匹配表明数据不兼容。 使用时要小心！。\n\n**android:requiredAccountType=\"string\"**\n指定应用程序为了运行所需的帐户类型。 如果您的应用需要帐户，则此属性的值必须与您的应用使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。\n由于受限个人资料目前无法添加帐户，因此指定此属性会使您的应用无法从受限个人资料中获取，除非您也声明了android：restrictedAccountType具有相同的值。\n警告：如果帐户数据可能显示个人身份信息，请务必声明此属性并将android：restrictedAccountType设置为null，以便受限配置文件无法使用您的应用访问属于所有者用户的个人信息。\n此属性在API级别18中添加。\n\n**android:resizeableActivity=[\"true\" | \"false\"]**\n指定应用是否支持多窗口显示。你可以在 < activity> 或 < application>元素中设置该属性。\n如果设置为true，用户可在分屏和freeform 模式下启动Activity。如果设置为false，Activity将不支持多窗口模式。如果这个值为false，并且用户尝试在多窗口模式下启动Activity，Activity将会全屏显示。\n如果你的应用的 targets API 是24或者更高，如果你不指定这个属性，默认值是true。这个属性是在 API level 24新增的。\n\n**android:restrictedAccountType=\"string\"**\n指定此应用程序所需的帐户类型，并指示允许受限制的配置文件访问属于所有者用户的此类帐户。 如果您的应用需要帐户，且受限个人资料可以访问主要用户的帐户，则此属性的值必须与您的应用所使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。\n警告：指定此属性允许受限配置文件使用属于所有者用户的帐户使用您的应用程序，这可能会泄露个人身份信息。 如果帐户可能显示个人详细信息，您不应使用此属性，而应声明android：requiredAccountType属性，使您的应用程序不能使用限制的配置文件。\n此属性在API级别18中添加。\n\n**android:supportsRtl=[\"true\" | \"false\"]**\n默认值是`false`。声明你的应用是否支持从右向左布局。\n如果设置为true并且targetSdkVersion 大于等于17，多个RTL相关的API将被激活，被系统使用，从而使得你的app能够显示从右向左的布局。\n如果设置为false或targetSdkVersion小于17，RTL相关的API将无效或者被忽略，你的app将无视布局方向，始终是从左向右的方向。\n在API level 17中引入的这个属性。\n\n**android:taskAffinity**\n拥有相同的affinity的Activity理论上属于相同的Task，应用程序默认的affinity的名字是元素中设定的package名（manifest中通过 < manifest>元素设置的包名）。除了那些设置了不同affinity属性的Activity\n\n**android:testOnly=[\"true\" | \"false\"]**\n表示一个应用是否仅仅用于测试。例如，它可能暴露它自己的功能或外部数据，这些可能导致一个安全漏洞，但对调试来说有用。这类应用仅仅可以通过adb命令安装。\n\n**android:theme**\n是一个资源的风格，它定义了一个默认的主题风格给所有的activity，可以后续在activity标签层单独覆盖此Theme。\n\n**android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]**\nActivity UI的额外选项，必须是下列值中的一个。\n* \"none\"： 没有额外的UI选项，这是默认值。\n* \"splitActionBarWhenNarrow\"：在屏幕底部添加一个条形，以在水平空间受限时（例如在手机上的纵向模式下）在应用栏（也称为操作栏）中显示操作项目。 而不是显示在屏幕顶部的应用栏中的少量操作项，应用栏分割为顶部导航部分和操作项的底部栏。 这确保了不仅为操作项目而且在顶部的导航和标题元素提供合理的空间量。 菜单项不分割在两个条上; 他们总是出现在一起。\n  该属性是在 API level 14中新增的。\n\n**android:usesCleartextTraffic=[\"true\" | \"false\"]**\n默认值为`true`。指示应用程序是否要使用明文网络流量，例如明文HTTP。当属性设置为“false”时，平台组件（例如，HTTP和FTP堆栈，DownloadManager，MediaPlayer）将拒绝应用程序使用明文流量的请求。强烈鼓励第三方图书馆也遵守此设置。避免明文流量的关键原因是缺乏保密性，真实性和防止篡改的保护：网络攻击者可以窃听传输的数据，并且还可以在不检测的情况下对其进行修改。\n这个标志是最好的努力的基础上，因为它是不可能防止来自Android应用程序的所有明文流量给定的访问级别提供给他们。例如，没有期望Socket API将尊重此标志，因为它不能确定其流量是否为明文。然而，来自应用程序的大多数网络流量由更高级网络堆栈/组件处理，可以通过从ApplicationInfo.flags或NetworkSecurityPolicy.isCleartextTrafficPermitted（）读取该标志来处理该标志。\n注意：WebView不遵守此标志。\n在应用程序开发期间，StrictMode可用于标识来自应用程序的任何明文流量：请参阅StrictMode.VmPolicy.Builder.detectCleartextNetwork（）。\n此属性是在API级别23中添加的。\n如果存在Android网络安全配置，此标记在Android 7.0（API级别24）及以上版本中将被忽略。\n\n**android:vmSafeMode=[\"true\" | \"false\"]**\n表示应用让虚拟机运行在安全模式。默认值为false。这个属性在 API level 8 中引入，true表示禁用DalvikJIT编译器。在API level 22 中有改动，true表示禁用ART AOT编译器\n","source":"_posts/android/android-config-am.md","raw":"---\ntitle: Android配置文件详解-AndroidManifest\ndate: 2017-02-22 11:51:47\ntags: android\n---\n\n# AndroidManifest\n\n> 每个应用的根目录中都必须包含一个AndroidManifest.xml文件(且文件名精确无误)。AndroidManifest向Android系统提供应用的必要信息，系统必须具备有这些信息方可运行应用的任何代码。\n> 此外，AndroidManifest还可执行以下操作\n\n- 为应用的Java软件包命名。软件包名称充当应用的唯一标识符。\n- 描述应用的各个组件，包括构成应用的 Activity、服务、广播接收器和内容提供程序。它还为实现每个组件的类命名并发布其功能，例如它们可以处理的 [Intent](https://developer.android.com/reference/android/content/Intent.html) 消息。这些声明向 Android 系统告知有关组件以及可以启动这些组件的条件的信息。\n- 确定托管应用组件的进程。\n- 声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互。还声明其他应用与该应用组件交互所需具备的权限。\n- 列出 [Instrumentation](https://developer.android.com/reference/android/app/Instrumentation.html) 类，这些类可在应用运行时提供分析和其他信息。这些声明只会在应用处于开发阶段时出现在清单中，在应用发布之前将移除。\n- 声明应用所需的最低 Android API 级别\n- 列出应用必须链接到的库\n\n注：准备要在 Chromebook 上运行的 Android 应用时，要考虑一些重要的硬件和软件功能限制。如需了解详细信息，请参阅 [Chromebook 的应用清单兼容性](https://developer.android.com/topic/arc/manifest.html)文档。\n\n<!--more-->\n\n## AndroidManifest文件结构\n\n下面是AndroidManifest文件的示例：\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<manifest>\n\n    <uses-permission />\n    <permission />\n    <permission-tree />\n    <permission-group />\n    <instrumentation />\n    <uses-sdk />\n    <uses-configuration />  \n    <uses-feature />  \n    <supports-screens />  \n    <compatible-screens />  \n    <supports-gl-texture />  \n\n    <application>\n  \t\t<meta-data />\n        <activity>\n            <intent-filter>\n                <action />\n                <category />\n                <data />\n            </intent-filter>\n            <meta-data />\n        </activity>\n\n        <activity-alias>\n            <intent-filter> . . . </intent-filter>\n            <meta-data />\n        </activity-alias>\n\n        <service>\n            <intent-filter> . . . </intent-filter>\n            <meta-data/>\n        </service>\n\n        <receiver>\n            <intent-filter> . . . </intent-filter>\n            <meta-data />\n        </receiver>\n\n        <provider>\n            <grant-uri-permission />\n            <meta-data />\n            <path-permission />\n        </provider>\n\n        <uses-library />\n\n    </application>\n\n</manifest>\n```\n\n### AndroidManifest属性\n\n##### Application\n\n```java\n<application  \n  \tandroid:allowBackup=[\"true\" | \"false\"]\n\tandroid:allowClearUserData=[\"true\" | \"false\"]\n    android:allowTaskReparenting=[\"true\" | \"false\"]\n    android:backupAgent=\"string\"\n    android:backupInForeground=[\"true\" | \"false\"]\n    android:banner=\"drawable resource\" \n    android:debuggable=[\"true\" | \"false\"]\n    android:description=\"string resource\"\n    android:enabled=[\"true\" | \"false\"]\n    android:extractNativeLibs=[\"true\" | \"false\"]\n    android:fullBackupContent=\"string\"\n    android:fullBackupOnly=[\"true\" | \"false\"]\n    android:hasCode=[\"true\" | \"false\"]\n    android:hardwareAccelerated=[\"true\" | \"false\"]\n    android:isGame=[\"true\" | \"false\"]\n    android:icon=\"drawable resource\"\n    android:killAfterRestore=[\"true\" | \"false\"]\n    android:label=\"string resource\"\n    android:largeHeap=[\"true\" | \"false\"]\n    android:logo=\"drawable resource\"\n    android:manageSpaceActivity=\"string\"\n    android:name=\"string\"\n    android:permission=\"string\"\n    android:persistent=[\"true\" | \"false\"]\n    android:process=\"string\"\n    android:restoreAnyVersion=[\"true\" | \"false\"]\n    android:requiredAccountType=\"string\"\n    android:resizeableActivity=[\"true\" | \"false\"]\n    android:restrictedAccountType=\"string\"\n    android:supportsRtl=[\"true\" | \"false\"]\n    android:taskAffinity=\"string\"\n    android:testOnly=[\"true\" | \"false\"]\n    android:theme=\"resource or theme\" \n    android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]\n    android:usesCleartextTraffic=[\"true\" | \"false\"]\n    android:vmSafeMode=[\"true\" | \"false\"]>\n</application>\n```\n\n**android:allowBackup**\n开启或关闭应用程序数据的备份和恢复功能，注意该属性值默认为true，如果你不需要你的应用被恢复导致隐私数据暴露（如果值为true，甚至可以直接通过adb命令获取该应用中的数据），必须手动设置此属性\n```bash\n// 备份\nadb backup -nosystem -noshared -apk -f d:/com.test.bak.ab com.test.bak\n\n-nosystem: 不备份系统应用\n-noshared: 不备份应用存储在SD中的数据\n-apk: 备份应用APK安装包\n-f d:/com.test.bak.ab: 备份文件在PC上的路径\ncom.test.bak: 要备份的包名\n\n// 恢复\nadb restore d:/com.test.bak.ab\n```\n\n\n**android:allowClearUserData**\n默认为`true`。用户是否能选择自行清除数据，程序管理器包含一个选择允许用户清除数据。当为true时，用户可自己清理用户数据，反之亦然\n\n**android:allowTaskReparenting(‘true’ or ‘false’)**\n默认值为`false`。是否允许activity`更换从属的任务。当该`Task`下一次被带到前面时，应用程序定义的`Activity`是否可以从启动它们的`Task`移动到有相同`affinity`的Task，比如从短信息任务切换到浏览器任务。Activity可以设置自己的`allowTaskReparenting`属性来覆盖Application节点下的这个属性。\n\n**android:backupAgent**\n此属性没有默认值。实现应用backup代理的类名，它是BackupAgent的一个子类。这个属性值应该是一个完整的类名，如com.project.BackupAgent.。如果类名的第一个字母是\".\"，它会附加到`mainfest`元素指定的包名之后。\n\n**android:backupInForeground**\n默认为`false`。一个应用即使在前台状态下也可以执行自动备份。当应用正在自动备份时，系统可能会停止应用，因此要谨慎的使用该属性。该属性设置为true会影响到处于激活状态下的应用的行为。\n\n**android:banner**\n没有默认值。一个drawable资源，用来提供一个扩展的图形banner。使用`application`标签为应用所有的Activity提供一个默认的banner，或者使用`activity`标签为一个指定的Activity设置banner。在`Android TV`的home页，系统使用banner来表示一个应用。由于banner仅仅在home页显示，当一个应用中有处理`CATEGORY_LEANBACK_LAUNCHER`这个intent的Activity时，才能指定该属性。这个属性必须设置一个包含图片的drawable资源的引用(例如\"@drawable/banner\")。\n\n**android:debuggable**\n默认为`false`。这个从字面上就可以看出是什么作用的，当设置为true时，表明该APP在手机上可以被调试。在false的情况下调试该APP，就会报以下错误：\nDevice XXX requires that applications explicitely declare themselves as debuggable in their manifest.\nApplication XXX does not have the attribute ‘debuggable’ set to TRUE in its manifest and cannot be debugged.\n\n**android:description**\n关于应用的用户可读的文字，比label属性更长、更具描述性。这个属性必须设置为一个字符串资源的引用。不像label属性，它不能是一个raw字符串。没有默认值\n\n**android:enabled**\n默认为`true`。Android系统是否能够实例化该应用程序的组件-true表示可以，false表示不可以。如果为true，每个组件的enabled属性决定那个组件是否可以被 enabled。如果为false，它覆盖组件指定的值，即所有组件都是disabled。\n\n**android:extractNativeLibs**\n默认值为true。包安装器能否从apk中抽取本地库到文件系统。如果设置为false，你的本地库必须页对其并且在apk中以未压缩的方式存储。链接器在运行时从apk中直接加载库不会导致代码改动。\n\n**android:fullBackupContent**\n该属性指向一个xml文件，这个文件包含了自动备份时全部的备份规则。这些规则决定了哪些文件会被备份。该属性为可选的。如果没设置，默认情况下，自动备份会备份应用的大部分的文件。\n\n**android:fullBackupOnly=[\"true\" | \"false\"]**\n默认值是`false`。当设备可用时是否使用自动备份。如果设置为true，当应用安装到运行Android 6.0及其更高版本的的设备上时，会运行自动备份，在低版本的设备上，应用将忽略这个属性并执行key/value方式的备份。\n\n**android:hasCode(‘true’ or ‘false’)**\n默认为`true`。表示此APP是否包含任何的代码。若为false，则系统在运行组件时，不会去尝试加载任何的APP代码\n一个应用程序自身不会含有任何的代码，除非内置组件类，比如Activity类，此类使用了AliasActivity类，当然这是个罕见的现象\n(在Android2.3可以用标准C来开发应用程序，可在androidManifest.xml中将此属性设置为false,因为这个APP本身已经不含有任何的JAVA代码了)\n\n**android:hardwareAccelerated=[\"true\" | \"false\"]**\n如果你设置了minSdkVersion或targetSdkVersion 为14或更高，默认是启用；否则默认不启用。应用中所有的Activity和View是否启用硬件加速渲染-true表示启用，false表示不启用。\n从 Android 3.0 (API level 11)开始，应用可使用支持硬件加速的OpenGL 渲染，用来提升许多通用的2D图形操作性能。当硬件加速渲染打开时，Canvas, Paint, Xfermode, ColorFilter, Shader, 和 Camera中的大部分操作都会被加速。这会使得动画更流畅、滑动更流畅，提升整体的响应性，甚至应用不必显式的使用framework的 OpenGL库。\n需要注意的是，不是全部的OpenGL 2D操作都会被加速。如果你打开了硬件加速渲染，请测试你的应用以确保使用渲染的过程中不会出错。\n\n**android:icon**\n没有默认图标。一个作为整体应用的图标，就是声明整个APP的图标(在桌面的启动图标,图片一般都放在drawable文件夹下)，并且是应用的每个组件的默认图标。 < activity>, < activity-alias>, < service>, < receiver>和 < provider>都可以有各自的图标。这个属性必须被设置为一个包含图片的drawable资源文件的引用（比如\"@drawable/icon\"）。\n\n**android:isGame=[\"true\" | \"false\"]**\n应用是否为游戏。系统可能把应用根据游戏分组或把它们与其他的应用分开来显示。默认为false。\n\n**android:killAfterRestore**\n`默认值为true`。当应用在全系统层面的恢复操作时，应用的设置被恢复后，应用应当终止运行。单个包的恢复操作不会导致应用关闭。全系统的恢复操作一般来说只会发生一次，即在手机第一次启动时。第三方的应用一般没必要使用这个属性。意味着当应用在全系统的恢复操作中处理完自己的数据后，将会停止运行。\n\n**android:largeHeap=[\"true\" | \"false\"]**\n你的应用进程是否通过一个largeDalvik heap 被创建。这个属性适用于所有的为应用创建的进程。它仅适用于被加载到进程的第一个应用；如果你使用shared user id来允许多个应用在同一个进程中，它们都必需一致的使用这个选项，否则可能出现不可预知的结果。\n大部分app都不应使用这个属性，而应该把焦点放在如何减少整体的内存使用来提示性能。启用此功能也不能保证可用内存的固定增加，因为一些设备被全部可用内存限制了。\n可使用ActivityManager.getMemoryClass() or ActivityManager.getLargeMemoryClass()在运行时获取可用的内存大小。\n\n**android:label**\n应用的标签名(应用名称)。把应用作为整体的用户可读标签，也是应用中各个组件的默认标签。 < activity>, < activity-alias>, < service>, < receiver>, < provider> 都可以设置各自的标签。标签应设置为一个字符串资源的引用，以便可以像用户界面中的其他字符串一样进行本地化。为了方便，在开发应用时可以设置为原始字符串。\n\n**android:logo=\"drawable resource\"**\n应用作为一个整体的logo，也是所有Activity的默认logo。这个属性必须被设置为一个包含图片的drawable资源的引用（比如@drawable/logo）。没有默认logo。默认情况下，使用在ActionBar中使用icon，如果同时也设置了logo属性，ActionBar上将使用logo。logo应比icon远，但不应包括不必要的文本。 只有在以用户认可的传统格式表示您的品牌时才应使用logo。 logo代表预期的使用者品牌，而应用程序的的icon是符合启动器图示方形要求的修改版本。\n\n**android:manageSpaceActivity**\n一个Activity子类的全限定名，系统可以启动它来让用户管理设备上应用的内存使用情况。这个Activity也必须使用< activity> 元素来声明。\n\n**android:name**\n为应用程序所实现的Application子类的全名。当应用程序进程开始时，该类在所有应用程序组件之前被实例化。\n若该类(比方androidMain类)是在声明的package下，则可以直接声明android:name=”androidMain”,但此类是在package下面的子包的话，就必须声明为全路径或android:name=”package名称.子包名成.androidMain”\n\n**android:permission**\n为了跟应用交互，客户端必须拥有的权限。这个属性是适用于应用中所有组件设置权限的一个方便的方法。每个组件可设置各自的permission属性来覆盖application中的这个属性。\n\n**android:presistent**\n默认值是false。该应用程序是否应该在任何时候都保持运行状态,默认为false。因为应用程序通常不应该设置本标识，持续模式仅仅应该设置给某些系统应用程序才是有意义的。\n\n**android:process**\n应用程序运行的进程名，它的默认值为元素里设置的包名，当然每个组件都可以通过设置该属性来覆盖默认值。如果你想两个应用程序共用一个进程的话，你可以设置他们的android:process相同，但前提条件是他们共享一个用户ID及被赋予了相同证书的时候\n\n**android:restoreAnyVersion**\n此属性的默认值为`false`。用来表明应用是否准备尝试恢复所有的备份，即使该备份是由比当前在设备上安装的应用程序的更新版本存储的。 将此属性设置为true将允许备份管理器尝试恢复，即使版本不匹配表明数据不兼容。 使用时要小心！。\n\n**android:requiredAccountType=\"string\"**\n指定应用程序为了运行所需的帐户类型。 如果您的应用需要帐户，则此属性的值必须与您的应用使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。\n由于受限个人资料目前无法添加帐户，因此指定此属性会使您的应用无法从受限个人资料中获取，除非您也声明了android：restrictedAccountType具有相同的值。\n警告：如果帐户数据可能显示个人身份信息，请务必声明此属性并将android：restrictedAccountType设置为null，以便受限配置文件无法使用您的应用访问属于所有者用户的个人信息。\n此属性在API级别18中添加。\n\n**android:resizeableActivity=[\"true\" | \"false\"]**\n指定应用是否支持多窗口显示。你可以在 < activity> 或 < application>元素中设置该属性。\n如果设置为true，用户可在分屏和freeform 模式下启动Activity。如果设置为false，Activity将不支持多窗口模式。如果这个值为false，并且用户尝试在多窗口模式下启动Activity，Activity将会全屏显示。\n如果你的应用的 targets API 是24或者更高，如果你不指定这个属性，默认值是true。这个属性是在 API level 24新增的。\n\n**android:restrictedAccountType=\"string\"**\n指定此应用程序所需的帐户类型，并指示允许受限制的配置文件访问属于所有者用户的此类帐户。 如果您的应用需要帐户，且受限个人资料可以访问主要用户的帐户，则此属性的值必须与您的应用所使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。\n警告：指定此属性允许受限配置文件使用属于所有者用户的帐户使用您的应用程序，这可能会泄露个人身份信息。 如果帐户可能显示个人详细信息，您不应使用此属性，而应声明android：requiredAccountType属性，使您的应用程序不能使用限制的配置文件。\n此属性在API级别18中添加。\n\n**android:supportsRtl=[\"true\" | \"false\"]**\n默认值是`false`。声明你的应用是否支持从右向左布局。\n如果设置为true并且targetSdkVersion 大于等于17，多个RTL相关的API将被激活，被系统使用，从而使得你的app能够显示从右向左的布局。\n如果设置为false或targetSdkVersion小于17，RTL相关的API将无效或者被忽略，你的app将无视布局方向，始终是从左向右的方向。\n在API level 17中引入的这个属性。\n\n**android:taskAffinity**\n拥有相同的affinity的Activity理论上属于相同的Task，应用程序默认的affinity的名字是元素中设定的package名（manifest中通过 < manifest>元素设置的包名）。除了那些设置了不同affinity属性的Activity\n\n**android:testOnly=[\"true\" | \"false\"]**\n表示一个应用是否仅仅用于测试。例如，它可能暴露它自己的功能或外部数据，这些可能导致一个安全漏洞，但对调试来说有用。这类应用仅仅可以通过adb命令安装。\n\n**android:theme**\n是一个资源的风格，它定义了一个默认的主题风格给所有的activity，可以后续在activity标签层单独覆盖此Theme。\n\n**android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]**\nActivity UI的额外选项，必须是下列值中的一个。\n* \"none\"： 没有额外的UI选项，这是默认值。\n* \"splitActionBarWhenNarrow\"：在屏幕底部添加一个条形，以在水平空间受限时（例如在手机上的纵向模式下）在应用栏（也称为操作栏）中显示操作项目。 而不是显示在屏幕顶部的应用栏中的少量操作项，应用栏分割为顶部导航部分和操作项的底部栏。 这确保了不仅为操作项目而且在顶部的导航和标题元素提供合理的空间量。 菜单项不分割在两个条上; 他们总是出现在一起。\n  该属性是在 API level 14中新增的。\n\n**android:usesCleartextTraffic=[\"true\" | \"false\"]**\n默认值为`true`。指示应用程序是否要使用明文网络流量，例如明文HTTP。当属性设置为“false”时，平台组件（例如，HTTP和FTP堆栈，DownloadManager，MediaPlayer）将拒绝应用程序使用明文流量的请求。强烈鼓励第三方图书馆也遵守此设置。避免明文流量的关键原因是缺乏保密性，真实性和防止篡改的保护：网络攻击者可以窃听传输的数据，并且还可以在不检测的情况下对其进行修改。\n这个标志是最好的努力的基础上，因为它是不可能防止来自Android应用程序的所有明文流量给定的访问级别提供给他们。例如，没有期望Socket API将尊重此标志，因为它不能确定其流量是否为明文。然而，来自应用程序的大多数网络流量由更高级网络堆栈/组件处理，可以通过从ApplicationInfo.flags或NetworkSecurityPolicy.isCleartextTrafficPermitted（）读取该标志来处理该标志。\n注意：WebView不遵守此标志。\n在应用程序开发期间，StrictMode可用于标识来自应用程序的任何明文流量：请参阅StrictMode.VmPolicy.Builder.detectCleartextNetwork（）。\n此属性是在API级别23中添加的。\n如果存在Android网络安全配置，此标记在Android 7.0（API级别24）及以上版本中将被忽略。\n\n**android:vmSafeMode=[\"true\" | \"false\"]**\n表示应用让虚拟机运行在安全模式。默认值为false。这个属性在 API level 8 中引入，true表示禁用DalvikJIT编译器。在API level 22 中有改动，true表示禁用ART AOT编译器\n","slug":"android/android-config-am","published":1,"updated":"2017-02-23T03:33:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6tz000lfq9msnunpykz","content":"<h1 id=\"AndroidManifest\"><a href=\"#AndroidManifest\" class=\"headerlink\" title=\"AndroidManifest\"></a>AndroidManifest</h1><blockquote>\n<p>每个应用的根目录中都必须包含一个AndroidManifest.xml文件(且文件名精确无误)。AndroidManifest向Android系统提供应用的必要信息，系统必须具备有这些信息方可运行应用的任何代码。<br>此外，AndroidManifest还可执行以下操作</p>\n</blockquote>\n<ul>\n<li>为应用的Java软件包命名。软件包名称充当应用的唯一标识符。</li>\n<li>描述应用的各个组件，包括构成应用的 Activity、服务、广播接收器和内容提供程序。它还为实现每个组件的类命名并发布其功能，例如它们可以处理的 <a href=\"https://developer.android.com/reference/android/content/Intent.html\" target=\"_blank\" rel=\"external\">Intent</a> 消息。这些声明向 Android 系统告知有关组件以及可以启动这些组件的条件的信息。</li>\n<li>确定托管应用组件的进程。</li>\n<li>声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互。还声明其他应用与该应用组件交互所需具备的权限。</li>\n<li>列出 <a href=\"https://developer.android.com/reference/android/app/Instrumentation.html\" target=\"_blank\" rel=\"external\">Instrumentation</a> 类，这些类可在应用运行时提供分析和其他信息。这些声明只会在应用处于开发阶段时出现在清单中，在应用发布之前将移除。</li>\n<li>声明应用所需的最低 Android API 级别</li>\n<li>列出应用必须链接到的库</li>\n</ul>\n<p>注：准备要在 Chromebook 上运行的 Android 应用时，要考虑一些重要的硬件和软件功能限制。如需了解详细信息，请参阅 <a href=\"https://developer.android.com/topic/arc/manifest.html\" target=\"_blank\" rel=\"external\">Chromebook 的应用清单兼容性</a>文档。</p>\n<a id=\"more\"></a>\n<h2 id=\"AndroidManifest文件结构\"><a href=\"#AndroidManifest文件结构\" class=\"headerlink\" title=\"AndroidManifest文件结构\"></a>AndroidManifest文件结构</h2><p>下面是AndroidManifest文件的示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;manifest&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission /&gt;</div><div class=\"line\">    &lt;permission /&gt;</div><div class=\"line\">    &lt;permission-tree /&gt;</div><div class=\"line\">    &lt;permission-group /&gt;</div><div class=\"line\">    &lt;instrumentation /&gt;</div><div class=\"line\">    &lt;uses-sdk /&gt;</div><div class=\"line\">    &lt;uses-configuration /&gt;  </div><div class=\"line\">    &lt;uses-feature /&gt;  </div><div class=\"line\">    &lt;supports-screens /&gt;  </div><div class=\"line\">    &lt;compatible-screens /&gt;  </div><div class=\"line\">    &lt;supports-gl-texture /&gt;  </div><div class=\"line\"></div><div class=\"line\">    &lt;application&gt;</div><div class=\"line\">  \t\t&lt;meta-data /&gt;</div><div class=\"line\">        &lt;activity&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action /&gt;</div><div class=\"line\">                &lt;category /&gt;</div><div class=\"line\">                &lt;data /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;activity-alias&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/activity-alias&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;service&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data/&gt;</div><div class=\"line\">        &lt;/service&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;receiver&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/receiver&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;provider&gt;</div><div class=\"line\">            &lt;grant-uri-permission /&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">            &lt;path-permission /&gt;</div><div class=\"line\">        &lt;/provider&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;uses-library /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"AndroidManifest属性\"><a href=\"#AndroidManifest属性\" class=\"headerlink\" title=\"AndroidManifest属性\"></a>AndroidManifest属性</h3><h5 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application  </div><div class=\"line\">  \tandroid:allowBackup=[\"true\" | \"false\"]</div><div class=\"line\">\tandroid:allowClearUserData=[\"true\" | \"false\"]</div><div class=\"line\">    android:allowTaskReparenting=[\"true\" | \"false\"]</div><div class=\"line\">    android:backupAgent=\"string\"</div><div class=\"line\">    android:backupInForeground=[\"true\" | \"false\"]</div><div class=\"line\">    android:banner=\"drawable resource\" </div><div class=\"line\">    android:debuggable=[\"true\" | \"false\"]</div><div class=\"line\">    android:description=\"string resource\"</div><div class=\"line\">    android:enabled=[\"true\" | \"false\"]</div><div class=\"line\">    android:extractNativeLibs=[\"true\" | \"false\"]</div><div class=\"line\">    android:fullBackupContent=\"string\"</div><div class=\"line\">    android:fullBackupOnly=[\"true\" | \"false\"]</div><div class=\"line\">    android:hasCode=[\"true\" | \"false\"]</div><div class=\"line\">    android:hardwareAccelerated=[\"true\" | \"false\"]</div><div class=\"line\">    android:isGame=[\"true\" | \"false\"]</div><div class=\"line\">    android:icon=\"drawable resource\"</div><div class=\"line\">    android:killAfterRestore=[\"true\" | \"false\"]</div><div class=\"line\">    android:label=\"string resource\"</div><div class=\"line\">    android:largeHeap=[\"true\" | \"false\"]</div><div class=\"line\">    android:logo=\"drawable resource\"</div><div class=\"line\">    android:manageSpaceActivity=\"string\"</div><div class=\"line\">    android:name=\"string\"</div><div class=\"line\">    android:permission=\"string\"</div><div class=\"line\">    android:persistent=[\"true\" | \"false\"]</div><div class=\"line\">    android:process=\"string\"</div><div class=\"line\">    android:restoreAnyVersion=[\"true\" | \"false\"]</div><div class=\"line\">    android:requiredAccountType=\"string\"</div><div class=\"line\">    android:resizeableActivity=[\"true\" | \"false\"]</div><div class=\"line\">    android:restrictedAccountType=\"string\"</div><div class=\"line\">    android:supportsRtl=[\"true\" | \"false\"]</div><div class=\"line\">    android:taskAffinity=\"string\"</div><div class=\"line\">    android:testOnly=[\"true\" | \"false\"]</div><div class=\"line\">    android:theme=\"resource or theme\" </div><div class=\"line\">    android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]</div><div class=\"line\">    android:usesCleartextTraffic=[\"true\" | \"false\"]</div><div class=\"line\">    android:vmSafeMode=[\"true\" | \"false\"]&gt;</div><div class=\"line\">&lt;/application&gt;</div></pre></td></tr></table></figure>\n<p><strong>android:allowBackup</strong><br>开启或关闭应用程序数据的备份和恢复功能，注意该属性值默认为true，如果你不需要你的应用被恢复导致隐私数据暴露（如果值为true，甚至可以直接通过adb命令获取该应用中的数据），必须手动设置此属性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 备份</div><div class=\"line\">adb backup -nosystem -noshared -apk <span class=\"_\">-f</span> d:/com.test.bak.ab com.test.bak</div><div class=\"line\"></div><div class=\"line\">-nosystem: 不备份系统应用</div><div class=\"line\">-noshared: 不备份应用存储在SD中的数据</div><div class=\"line\">-apk: 备份应用APK安装包</div><div class=\"line\"><span class=\"_\">-f</span> d:/com.test.bak.ab: 备份文件在PC上的路径</div><div class=\"line\">com.test.bak: 要备份的包名</div><div class=\"line\"></div><div class=\"line\">// 恢复</div><div class=\"line\">adb restore d:/com.test.bak.ab</div></pre></td></tr></table></figure></p>\n<p><strong>android:allowClearUserData</strong><br>默认为<code>true</code>。用户是否能选择自行清除数据，程序管理器包含一个选择允许用户清除数据。当为true时，用户可自己清理用户数据，反之亦然</p>\n<p><strong>android:allowTaskReparenting(‘true’ or ‘false’)</strong><br>默认值为<code>false</code>。是否允许activity<code>更换从属的任务。当该</code>Task<code>下一次被带到前面时，应用程序定义的</code>Activity<code>是否可以从启动它们的</code>Task<code>移动到有相同</code>affinity<code>的Task，比如从短信息任务切换到浏览器任务。Activity可以设置自己的</code>allowTaskReparenting`属性来覆盖Application节点下的这个属性。</p>\n<p><strong>android:backupAgent</strong><br>此属性没有默认值。实现应用backup代理的类名，它是BackupAgent的一个子类。这个属性值应该是一个完整的类名，如com.project.BackupAgent.。如果类名的第一个字母是”.”，它会附加到<code>mainfest</code>元素指定的包名之后。</p>\n<p><strong>android:backupInForeground</strong><br>默认为<code>false</code>。一个应用即使在前台状态下也可以执行自动备份。当应用正在自动备份时，系统可能会停止应用，因此要谨慎的使用该属性。该属性设置为true会影响到处于激活状态下的应用的行为。</p>\n<p><strong>android:banner</strong><br>没有默认值。一个drawable资源，用来提供一个扩展的图形banner。使用<code>application</code>标签为应用所有的Activity提供一个默认的banner，或者使用<code>activity</code>标签为一个指定的Activity设置banner。在<code>Android TV</code>的home页，系统使用banner来表示一个应用。由于banner仅仅在home页显示，当一个应用中有处理<code>CATEGORY_LEANBACK_LAUNCHER</code>这个intent的Activity时，才能指定该属性。这个属性必须设置一个包含图片的drawable资源的引用(例如”@drawable/banner”)。</p>\n<p><strong>android:debuggable</strong><br>默认为<code>false</code>。这个从字面上就可以看出是什么作用的，当设置为true时，表明该APP在手机上可以被调试。在false的情况下调试该APP，就会报以下错误：<br>Device XXX requires that applications explicitely declare themselves as debuggable in their manifest.<br>Application XXX does not have the attribute ‘debuggable’ set to TRUE in its manifest and cannot be debugged.</p>\n<p><strong>android:description</strong><br>关于应用的用户可读的文字，比label属性更长、更具描述性。这个属性必须设置为一个字符串资源的引用。不像label属性，它不能是一个raw字符串。没有默认值</p>\n<p><strong>android:enabled</strong><br>默认为<code>true</code>。Android系统是否能够实例化该应用程序的组件-true表示可以，false表示不可以。如果为true，每个组件的enabled属性决定那个组件是否可以被 enabled。如果为false，它覆盖组件指定的值，即所有组件都是disabled。</p>\n<p><strong>android:extractNativeLibs</strong><br>默认值为true。包安装器能否从apk中抽取本地库到文件系统。如果设置为false，你的本地库必须页对其并且在apk中以未压缩的方式存储。链接器在运行时从apk中直接加载库不会导致代码改动。</p>\n<p><strong>android:fullBackupContent</strong><br>该属性指向一个xml文件，这个文件包含了自动备份时全部的备份规则。这些规则决定了哪些文件会被备份。该属性为可选的。如果没设置，默认情况下，自动备份会备份应用的大部分的文件。</p>\n<p><strong>android:fullBackupOnly=[“true” | “false”]</strong><br>默认值是<code>false</code>。当设备可用时是否使用自动备份。如果设置为true，当应用安装到运行Android 6.0及其更高版本的的设备上时，会运行自动备份，在低版本的设备上，应用将忽略这个属性并执行key/value方式的备份。</p>\n<p><strong>android:hasCode(‘true’ or ‘false’)</strong><br>默认为<code>true</code>。表示此APP是否包含任何的代码。若为false，则系统在运行组件时，不会去尝试加载任何的APP代码<br>一个应用程序自身不会含有任何的代码，除非内置组件类，比如Activity类，此类使用了AliasActivity类，当然这是个罕见的现象<br>(在Android2.3可以用标准C来开发应用程序，可在androidManifest.xml中将此属性设置为false,因为这个APP本身已经不含有任何的JAVA代码了)</p>\n<p><strong>android:hardwareAccelerated=[“true” | “false”]</strong><br>如果你设置了minSdkVersion或targetSdkVersion 为14或更高，默认是启用；否则默认不启用。应用中所有的Activity和View是否启用硬件加速渲染-true表示启用，false表示不启用。<br>从 Android 3.0 (API level 11)开始，应用可使用支持硬件加速的OpenGL 渲染，用来提升许多通用的2D图形操作性能。当硬件加速渲染打开时，Canvas, Paint, Xfermode, ColorFilter, Shader, 和 Camera中的大部分操作都会被加速。这会使得动画更流畅、滑动更流畅，提升整体的响应性，甚至应用不必显式的使用framework的 OpenGL库。<br>需要注意的是，不是全部的OpenGL 2D操作都会被加速。如果你打开了硬件加速渲染，请测试你的应用以确保使用渲染的过程中不会出错。</p>\n<p><strong>android:icon</strong><br>没有默认图标。一个作为整体应用的图标，就是声明整个APP的图标(在桌面的启动图标,图片一般都放在drawable文件夹下)，并且是应用的每个组件的默认图标。 &lt; activity&gt;, &lt; activity-alias&gt;, &lt; service&gt;, &lt; receiver&gt;和 &lt; provider&gt;都可以有各自的图标。这个属性必须被设置为一个包含图片的drawable资源文件的引用（比如”@drawable/icon”）。</p>\n<p><strong>android:isGame=[“true” | “false”]</strong><br>应用是否为游戏。系统可能把应用根据游戏分组或把它们与其他的应用分开来显示。默认为false。</p>\n<p><strong>android:killAfterRestore</strong><br><code>默认值为true</code>。当应用在全系统层面的恢复操作时，应用的设置被恢复后，应用应当终止运行。单个包的恢复操作不会导致应用关闭。全系统的恢复操作一般来说只会发生一次，即在手机第一次启动时。第三方的应用一般没必要使用这个属性。意味着当应用在全系统的恢复操作中处理完自己的数据后，将会停止运行。</p>\n<p><strong>android:largeHeap=[“true” | “false”]</strong><br>你的应用进程是否通过一个largeDalvik heap 被创建。这个属性适用于所有的为应用创建的进程。它仅适用于被加载到进程的第一个应用；如果你使用shared user id来允许多个应用在同一个进程中，它们都必需一致的使用这个选项，否则可能出现不可预知的结果。<br>大部分app都不应使用这个属性，而应该把焦点放在如何减少整体的内存使用来提示性能。启用此功能也不能保证可用内存的固定增加，因为一些设备被全部可用内存限制了。<br>可使用ActivityManager.getMemoryClass() or ActivityManager.getLargeMemoryClass()在运行时获取可用的内存大小。</p>\n<p><strong>android:label</strong><br>应用的标签名(应用名称)。把应用作为整体的用户可读标签，也是应用中各个组件的默认标签。 &lt; activity&gt;, &lt; activity-alias&gt;, &lt; service&gt;, &lt; receiver&gt;, &lt; provider&gt; 都可以设置各自的标签。标签应设置为一个字符串资源的引用，以便可以像用户界面中的其他字符串一样进行本地化。为了方便，在开发应用时可以设置为原始字符串。</p>\n<p><strong>android:logo=”drawable resource”</strong><br>应用作为一个整体的logo，也是所有Activity的默认logo。这个属性必须被设置为一个包含图片的drawable资源的引用（比如@drawable/logo）。没有默认logo。默认情况下，使用在ActionBar中使用icon，如果同时也设置了logo属性，ActionBar上将使用logo。logo应比icon远，但不应包括不必要的文本。 只有在以用户认可的传统格式表示您的品牌时才应使用logo。 logo代表预期的使用者品牌，而应用程序的的icon是符合启动器图示方形要求的修改版本。</p>\n<p><strong>android:manageSpaceActivity</strong><br>一个Activity子类的全限定名，系统可以启动它来让用户管理设备上应用的内存使用情况。这个Activity也必须使用&lt; activity&gt; 元素来声明。</p>\n<p><strong>android:name</strong><br>为应用程序所实现的Application子类的全名。当应用程序进程开始时，该类在所有应用程序组件之前被实例化。<br>若该类(比方androidMain类)是在声明的package下，则可以直接声明android:name=”androidMain”,但此类是在package下面的子包的话，就必须声明为全路径或android:name=”package名称.子包名成.androidMain”</p>\n<p><strong>android:permission</strong><br>为了跟应用交互，客户端必须拥有的权限。这个属性是适用于应用中所有组件设置权限的一个方便的方法。每个组件可设置各自的permission属性来覆盖application中的这个属性。</p>\n<p><strong>android:presistent</strong><br>默认值是false。该应用程序是否应该在任何时候都保持运行状态,默认为false。因为应用程序通常不应该设置本标识，持续模式仅仅应该设置给某些系统应用程序才是有意义的。</p>\n<p><strong>android:process</strong><br>应用程序运行的进程名，它的默认值为元素里设置的包名，当然每个组件都可以通过设置该属性来覆盖默认值。如果你想两个应用程序共用一个进程的话，你可以设置他们的android:process相同，但前提条件是他们共享一个用户ID及被赋予了相同证书的时候</p>\n<p><strong>android:restoreAnyVersion</strong><br>此属性的默认值为<code>false</code>。用来表明应用是否准备尝试恢复所有的备份，即使该备份是由比当前在设备上安装的应用程序的更新版本存储的。 将此属性设置为true将允许备份管理器尝试恢复，即使版本不匹配表明数据不兼容。 使用时要小心！。</p>\n<p><strong>android:requiredAccountType=”string”</strong><br>指定应用程序为了运行所需的帐户类型。 如果您的应用需要帐户，则此属性的值必须与您的应用使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。<br>由于受限个人资料目前无法添加帐户，因此指定此属性会使您的应用无法从受限个人资料中获取，除非您也声明了android：restrictedAccountType具有相同的值。<br>警告：如果帐户数据可能显示个人身份信息，请务必声明此属性并将android：restrictedAccountType设置为null，以便受限配置文件无法使用您的应用访问属于所有者用户的个人信息。<br>此属性在API级别18中添加。</p>\n<p><strong>android:resizeableActivity=[“true” | “false”]</strong><br>指定应用是否支持多窗口显示。你可以在 &lt; activity&gt; 或 &lt; application&gt;元素中设置该属性。<br>如果设置为true，用户可在分屏和freeform 模式下启动Activity。如果设置为false，Activity将不支持多窗口模式。如果这个值为false，并且用户尝试在多窗口模式下启动Activity，Activity将会全屏显示。<br>如果你的应用的 targets API 是24或者更高，如果你不指定这个属性，默认值是true。这个属性是在 API level 24新增的。</p>\n<p><strong>android:restrictedAccountType=”string”</strong><br>指定此应用程序所需的帐户类型，并指示允许受限制的配置文件访问属于所有者用户的此类帐户。 如果您的应用需要帐户，且受限个人资料可以访问主要用户的帐户，则此属性的值必须与您的应用所使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。<br>警告：指定此属性允许受限配置文件使用属于所有者用户的帐户使用您的应用程序，这可能会泄露个人身份信息。 如果帐户可能显示个人详细信息，您不应使用此属性，而应声明android：requiredAccountType属性，使您的应用程序不能使用限制的配置文件。<br>此属性在API级别18中添加。</p>\n<p><strong>android:supportsRtl=[“true” | “false”]</strong><br>默认值是<code>false</code>。声明你的应用是否支持从右向左布局。<br>如果设置为true并且targetSdkVersion 大于等于17，多个RTL相关的API将被激活，被系统使用，从而使得你的app能够显示从右向左的布局。<br>如果设置为false或targetSdkVersion小于17，RTL相关的API将无效或者被忽略，你的app将无视布局方向，始终是从左向右的方向。<br>在API level 17中引入的这个属性。</p>\n<p><strong>android:taskAffinity</strong><br>拥有相同的affinity的Activity理论上属于相同的Task，应用程序默认的affinity的名字是元素中设定的package名（manifest中通过 &lt; manifest&gt;元素设置的包名）。除了那些设置了不同affinity属性的Activity</p>\n<p><strong>android:testOnly=[“true” | “false”]</strong><br>表示一个应用是否仅仅用于测试。例如，它可能暴露它自己的功能或外部数据，这些可能导致一个安全漏洞，但对调试来说有用。这类应用仅仅可以通过adb命令安装。</p>\n<p><strong>android:theme</strong><br>是一个资源的风格，它定义了一个默认的主题风格给所有的activity，可以后续在activity标签层单独覆盖此Theme。</p>\n<p><strong>android:uiOptions=[“none” | “splitActionBarWhenNarrow”]</strong><br>Activity UI的额外选项，必须是下列值中的一个。</p>\n<ul>\n<li>“none”： 没有额外的UI选项，这是默认值。</li>\n<li>“splitActionBarWhenNarrow”：在屏幕底部添加一个条形，以在水平空间受限时（例如在手机上的纵向模式下）在应用栏（也称为操作栏）中显示操作项目。 而不是显示在屏幕顶部的应用栏中的少量操作项，应用栏分割为顶部导航部分和操作项的底部栏。 这确保了不仅为操作项目而且在顶部的导航和标题元素提供合理的空间量。 菜单项不分割在两个条上; 他们总是出现在一起。<br>该属性是在 API level 14中新增的。</li>\n</ul>\n<p><strong>android:usesCleartextTraffic=[“true” | “false”]</strong><br>默认值为<code>true</code>。指示应用程序是否要使用明文网络流量，例如明文HTTP。当属性设置为“false”时，平台组件（例如，HTTP和FTP堆栈，DownloadManager，MediaPlayer）将拒绝应用程序使用明文流量的请求。强烈鼓励第三方图书馆也遵守此设置。避免明文流量的关键原因是缺乏保密性，真实性和防止篡改的保护：网络攻击者可以窃听传输的数据，并且还可以在不检测的情况下对其进行修改。<br>这个标志是最好的努力的基础上，因为它是不可能防止来自Android应用程序的所有明文流量给定的访问级别提供给他们。例如，没有期望Socket API将尊重此标志，因为它不能确定其流量是否为明文。然而，来自应用程序的大多数网络流量由更高级网络堆栈/组件处理，可以通过从ApplicationInfo.flags或NetworkSecurityPolicy.isCleartextTrafficPermitted（）读取该标志来处理该标志。<br>注意：WebView不遵守此标志。<br>在应用程序开发期间，StrictMode可用于标识来自应用程序的任何明文流量：请参阅StrictMode.VmPolicy.Builder.detectCleartextNetwork（）。<br>此属性是在API级别23中添加的。<br>如果存在Android网络安全配置，此标记在Android 7.0（API级别24）及以上版本中将被忽略。</p>\n<p><strong>android:vmSafeMode=[“true” | “false”]</strong><br>表示应用让虚拟机运行在安全模式。默认值为false。这个属性在 API level 8 中引入，true表示禁用DalvikJIT编译器。在API level 22 中有改动，true表示禁用ART AOT编译器</p>\n","excerpt":"<h1 id=\"AndroidManifest\"><a href=\"#AndroidManifest\" class=\"headerlink\" title=\"AndroidManifest\"></a>AndroidManifest</h1><blockquote>\n<p>每个应用的根目录中都必须包含一个AndroidManifest.xml文件(且文件名精确无误)。AndroidManifest向Android系统提供应用的必要信息，系统必须具备有这些信息方可运行应用的任何代码。<br>此外，AndroidManifest还可执行以下操作</p>\n</blockquote>\n<ul>\n<li>为应用的Java软件包命名。软件包名称充当应用的唯一标识符。</li>\n<li>描述应用的各个组件，包括构成应用的 Activity、服务、广播接收器和内容提供程序。它还为实现每个组件的类命名并发布其功能，例如它们可以处理的 <a href=\"https://developer.android.com/reference/android/content/Intent.html\">Intent</a> 消息。这些声明向 Android 系统告知有关组件以及可以启动这些组件的条件的信息。</li>\n<li>确定托管应用组件的进程。</li>\n<li>声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互。还声明其他应用与该应用组件交互所需具备的权限。</li>\n<li>列出 <a href=\"https://developer.android.com/reference/android/app/Instrumentation.html\">Instrumentation</a> 类，这些类可在应用运行时提供分析和其他信息。这些声明只会在应用处于开发阶段时出现在清单中，在应用发布之前将移除。</li>\n<li>声明应用所需的最低 Android API 级别</li>\n<li>列出应用必须链接到的库</li>\n</ul>\n<p>注：准备要在 Chromebook 上运行的 Android 应用时，要考虑一些重要的硬件和软件功能限制。如需了解详细信息，请参阅 <a href=\"https://developer.android.com/topic/arc/manifest.html\">Chromebook 的应用清单兼容性</a>文档。</p>","more":"<h2 id=\"AndroidManifest文件结构\"><a href=\"#AndroidManifest文件结构\" class=\"headerlink\" title=\"AndroidManifest文件结构\"></a>AndroidManifest文件结构</h2><p>下面是AndroidManifest文件的示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;manifest&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission /&gt;</div><div class=\"line\">    &lt;permission /&gt;</div><div class=\"line\">    &lt;permission-tree /&gt;</div><div class=\"line\">    &lt;permission-group /&gt;</div><div class=\"line\">    &lt;instrumentation /&gt;</div><div class=\"line\">    &lt;uses-sdk /&gt;</div><div class=\"line\">    &lt;uses-configuration /&gt;  </div><div class=\"line\">    &lt;uses-feature /&gt;  </div><div class=\"line\">    &lt;supports-screens /&gt;  </div><div class=\"line\">    &lt;compatible-screens /&gt;  </div><div class=\"line\">    &lt;supports-gl-texture /&gt;  </div><div class=\"line\"></div><div class=\"line\">    &lt;application&gt;</div><div class=\"line\">  \t\t&lt;meta-data /&gt;</div><div class=\"line\">        &lt;activity&gt;</div><div class=\"line\">            &lt;intent-filter&gt;</div><div class=\"line\">                &lt;action /&gt;</div><div class=\"line\">                &lt;category /&gt;</div><div class=\"line\">                &lt;data /&gt;</div><div class=\"line\">            &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/activity&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;activity-alias&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/activity-alias&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;service&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data/&gt;</div><div class=\"line\">        &lt;/service&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;receiver&gt;</div><div class=\"line\">            &lt;intent-filter&gt; . . . &lt;/intent-filter&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">        &lt;/receiver&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;provider&gt;</div><div class=\"line\">            &lt;grant-uri-permission /&gt;</div><div class=\"line\">            &lt;meta-data /&gt;</div><div class=\"line\">            &lt;path-permission /&gt;</div><div class=\"line\">        &lt;/provider&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;uses-library /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/application&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/manifest&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"AndroidManifest属性\"><a href=\"#AndroidManifest属性\" class=\"headerlink\" title=\"AndroidManifest属性\"></a>AndroidManifest属性</h3><h5 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application  </div><div class=\"line\">  \tandroid:allowBackup=[\"true\" | \"false\"]</div><div class=\"line\">\tandroid:allowClearUserData=[\"true\" | \"false\"]</div><div class=\"line\">    android:allowTaskReparenting=[\"true\" | \"false\"]</div><div class=\"line\">    android:backupAgent=\"string\"</div><div class=\"line\">    android:backupInForeground=[\"true\" | \"false\"]</div><div class=\"line\">    android:banner=\"drawable resource\" </div><div class=\"line\">    android:debuggable=[\"true\" | \"false\"]</div><div class=\"line\">    android:description=\"string resource\"</div><div class=\"line\">    android:enabled=[\"true\" | \"false\"]</div><div class=\"line\">    android:extractNativeLibs=[\"true\" | \"false\"]</div><div class=\"line\">    android:fullBackupContent=\"string\"</div><div class=\"line\">    android:fullBackupOnly=[\"true\" | \"false\"]</div><div class=\"line\">    android:hasCode=[\"true\" | \"false\"]</div><div class=\"line\">    android:hardwareAccelerated=[\"true\" | \"false\"]</div><div class=\"line\">    android:isGame=[\"true\" | \"false\"]</div><div class=\"line\">    android:icon=\"drawable resource\"</div><div class=\"line\">    android:killAfterRestore=[\"true\" | \"false\"]</div><div class=\"line\">    android:label=\"string resource\"</div><div class=\"line\">    android:largeHeap=[\"true\" | \"false\"]</div><div class=\"line\">    android:logo=\"drawable resource\"</div><div class=\"line\">    android:manageSpaceActivity=\"string\"</div><div class=\"line\">    android:name=\"string\"</div><div class=\"line\">    android:permission=\"string\"</div><div class=\"line\">    android:persistent=[\"true\" | \"false\"]</div><div class=\"line\">    android:process=\"string\"</div><div class=\"line\">    android:restoreAnyVersion=[\"true\" | \"false\"]</div><div class=\"line\">    android:requiredAccountType=\"string\"</div><div class=\"line\">    android:resizeableActivity=[\"true\" | \"false\"]</div><div class=\"line\">    android:restrictedAccountType=\"string\"</div><div class=\"line\">    android:supportsRtl=[\"true\" | \"false\"]</div><div class=\"line\">    android:taskAffinity=\"string\"</div><div class=\"line\">    android:testOnly=[\"true\" | \"false\"]</div><div class=\"line\">    android:theme=\"resource or theme\" </div><div class=\"line\">    android:uiOptions=[\"none\" | \"splitActionBarWhenNarrow\"]</div><div class=\"line\">    android:usesCleartextTraffic=[\"true\" | \"false\"]</div><div class=\"line\">    android:vmSafeMode=[\"true\" | \"false\"]&gt;</div><div class=\"line\">&lt;/application&gt;</div></pre></td></tr></table></figure>\n<p><strong>android:allowBackup</strong><br>开启或关闭应用程序数据的备份和恢复功能，注意该属性值默认为true，如果你不需要你的应用被恢复导致隐私数据暴露（如果值为true，甚至可以直接通过adb命令获取该应用中的数据），必须手动设置此属性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 备份</div><div class=\"line\">adb backup -nosystem -noshared -apk <span class=\"_\">-f</span> d:/com.test.bak.ab com.test.bak</div><div class=\"line\"></div><div class=\"line\">-nosystem: 不备份系统应用</div><div class=\"line\">-noshared: 不备份应用存储在SD中的数据</div><div class=\"line\">-apk: 备份应用APK安装包</div><div class=\"line\"><span class=\"_\">-f</span> d:/com.test.bak.ab: 备份文件在PC上的路径</div><div class=\"line\">com.test.bak: 要备份的包名</div><div class=\"line\"></div><div class=\"line\">// 恢复</div><div class=\"line\">adb restore d:/com.test.bak.ab</div></pre></td></tr></table></figure></p>\n<p><strong>android:allowClearUserData</strong><br>默认为<code>true</code>。用户是否能选择自行清除数据，程序管理器包含一个选择允许用户清除数据。当为true时，用户可自己清理用户数据，反之亦然</p>\n<p><strong>android:allowTaskReparenting(‘true’ or ‘false’)</strong><br>默认值为<code>false</code>。是否允许activity<code>更换从属的任务。当该</code>Task<code>下一次被带到前面时，应用程序定义的</code>Activity<code>是否可以从启动它们的</code>Task<code>移动到有相同</code>affinity<code>的Task，比如从短信息任务切换到浏览器任务。Activity可以设置自己的</code>allowTaskReparenting`属性来覆盖Application节点下的这个属性。</p>\n<p><strong>android:backupAgent</strong><br>此属性没有默认值。实现应用backup代理的类名，它是BackupAgent的一个子类。这个属性值应该是一个完整的类名，如com.project.BackupAgent.。如果类名的第一个字母是”.”，它会附加到<code>mainfest</code>元素指定的包名之后。</p>\n<p><strong>android:backupInForeground</strong><br>默认为<code>false</code>。一个应用即使在前台状态下也可以执行自动备份。当应用正在自动备份时，系统可能会停止应用，因此要谨慎的使用该属性。该属性设置为true会影响到处于激活状态下的应用的行为。</p>\n<p><strong>android:banner</strong><br>没有默认值。一个drawable资源，用来提供一个扩展的图形banner。使用<code>application</code>标签为应用所有的Activity提供一个默认的banner，或者使用<code>activity</code>标签为一个指定的Activity设置banner。在<code>Android TV</code>的home页，系统使用banner来表示一个应用。由于banner仅仅在home页显示，当一个应用中有处理<code>CATEGORY_LEANBACK_LAUNCHER</code>这个intent的Activity时，才能指定该属性。这个属性必须设置一个包含图片的drawable资源的引用(例如”@drawable/banner”)。</p>\n<p><strong>android:debuggable</strong><br>默认为<code>false</code>。这个从字面上就可以看出是什么作用的，当设置为true时，表明该APP在手机上可以被调试。在false的情况下调试该APP，就会报以下错误：<br>Device XXX requires that applications explicitely declare themselves as debuggable in their manifest.<br>Application XXX does not have the attribute ‘debuggable’ set to TRUE in its manifest and cannot be debugged.</p>\n<p><strong>android:description</strong><br>关于应用的用户可读的文字，比label属性更长、更具描述性。这个属性必须设置为一个字符串资源的引用。不像label属性，它不能是一个raw字符串。没有默认值</p>\n<p><strong>android:enabled</strong><br>默认为<code>true</code>。Android系统是否能够实例化该应用程序的组件-true表示可以，false表示不可以。如果为true，每个组件的enabled属性决定那个组件是否可以被 enabled。如果为false，它覆盖组件指定的值，即所有组件都是disabled。</p>\n<p><strong>android:extractNativeLibs</strong><br>默认值为true。包安装器能否从apk中抽取本地库到文件系统。如果设置为false，你的本地库必须页对其并且在apk中以未压缩的方式存储。链接器在运行时从apk中直接加载库不会导致代码改动。</p>\n<p><strong>android:fullBackupContent</strong><br>该属性指向一个xml文件，这个文件包含了自动备份时全部的备份规则。这些规则决定了哪些文件会被备份。该属性为可选的。如果没设置，默认情况下，自动备份会备份应用的大部分的文件。</p>\n<p><strong>android:fullBackupOnly=[“true” | “false”]</strong><br>默认值是<code>false</code>。当设备可用时是否使用自动备份。如果设置为true，当应用安装到运行Android 6.0及其更高版本的的设备上时，会运行自动备份，在低版本的设备上，应用将忽略这个属性并执行key/value方式的备份。</p>\n<p><strong>android:hasCode(‘true’ or ‘false’)</strong><br>默认为<code>true</code>。表示此APP是否包含任何的代码。若为false，则系统在运行组件时，不会去尝试加载任何的APP代码<br>一个应用程序自身不会含有任何的代码，除非内置组件类，比如Activity类，此类使用了AliasActivity类，当然这是个罕见的现象<br>(在Android2.3可以用标准C来开发应用程序，可在androidManifest.xml中将此属性设置为false,因为这个APP本身已经不含有任何的JAVA代码了)</p>\n<p><strong>android:hardwareAccelerated=[“true” | “false”]</strong><br>如果你设置了minSdkVersion或targetSdkVersion 为14或更高，默认是启用；否则默认不启用。应用中所有的Activity和View是否启用硬件加速渲染-true表示启用，false表示不启用。<br>从 Android 3.0 (API level 11)开始，应用可使用支持硬件加速的OpenGL 渲染，用来提升许多通用的2D图形操作性能。当硬件加速渲染打开时，Canvas, Paint, Xfermode, ColorFilter, Shader, 和 Camera中的大部分操作都会被加速。这会使得动画更流畅、滑动更流畅，提升整体的响应性，甚至应用不必显式的使用framework的 OpenGL库。<br>需要注意的是，不是全部的OpenGL 2D操作都会被加速。如果你打开了硬件加速渲染，请测试你的应用以确保使用渲染的过程中不会出错。</p>\n<p><strong>android:icon</strong><br>没有默认图标。一个作为整体应用的图标，就是声明整个APP的图标(在桌面的启动图标,图片一般都放在drawable文件夹下)，并且是应用的每个组件的默认图标。 &lt; activity&gt;, &lt; activity-alias&gt;, &lt; service&gt;, &lt; receiver&gt;和 &lt; provider&gt;都可以有各自的图标。这个属性必须被设置为一个包含图片的drawable资源文件的引用（比如”@drawable/icon”）。</p>\n<p><strong>android:isGame=[“true” | “false”]</strong><br>应用是否为游戏。系统可能把应用根据游戏分组或把它们与其他的应用分开来显示。默认为false。</p>\n<p><strong>android:killAfterRestore</strong><br><code>默认值为true</code>。当应用在全系统层面的恢复操作时，应用的设置被恢复后，应用应当终止运行。单个包的恢复操作不会导致应用关闭。全系统的恢复操作一般来说只会发生一次，即在手机第一次启动时。第三方的应用一般没必要使用这个属性。意味着当应用在全系统的恢复操作中处理完自己的数据后，将会停止运行。</p>\n<p><strong>android:largeHeap=[“true” | “false”]</strong><br>你的应用进程是否通过一个largeDalvik heap 被创建。这个属性适用于所有的为应用创建的进程。它仅适用于被加载到进程的第一个应用；如果你使用shared user id来允许多个应用在同一个进程中，它们都必需一致的使用这个选项，否则可能出现不可预知的结果。<br>大部分app都不应使用这个属性，而应该把焦点放在如何减少整体的内存使用来提示性能。启用此功能也不能保证可用内存的固定增加，因为一些设备被全部可用内存限制了。<br>可使用ActivityManager.getMemoryClass() or ActivityManager.getLargeMemoryClass()在运行时获取可用的内存大小。</p>\n<p><strong>android:label</strong><br>应用的标签名(应用名称)。把应用作为整体的用户可读标签，也是应用中各个组件的默认标签。 &lt; activity&gt;, &lt; activity-alias&gt;, &lt; service&gt;, &lt; receiver&gt;, &lt; provider&gt; 都可以设置各自的标签。标签应设置为一个字符串资源的引用，以便可以像用户界面中的其他字符串一样进行本地化。为了方便，在开发应用时可以设置为原始字符串。</p>\n<p><strong>android:logo=”drawable resource”</strong><br>应用作为一个整体的logo，也是所有Activity的默认logo。这个属性必须被设置为一个包含图片的drawable资源的引用（比如@drawable/logo）。没有默认logo。默认情况下，使用在ActionBar中使用icon，如果同时也设置了logo属性，ActionBar上将使用logo。logo应比icon远，但不应包括不必要的文本。 只有在以用户认可的传统格式表示您的品牌时才应使用logo。 logo代表预期的使用者品牌，而应用程序的的icon是符合启动器图示方形要求的修改版本。</p>\n<p><strong>android:manageSpaceActivity</strong><br>一个Activity子类的全限定名，系统可以启动它来让用户管理设备上应用的内存使用情况。这个Activity也必须使用&lt; activity&gt; 元素来声明。</p>\n<p><strong>android:name</strong><br>为应用程序所实现的Application子类的全名。当应用程序进程开始时，该类在所有应用程序组件之前被实例化。<br>若该类(比方androidMain类)是在声明的package下，则可以直接声明android:name=”androidMain”,但此类是在package下面的子包的话，就必须声明为全路径或android:name=”package名称.子包名成.androidMain”</p>\n<p><strong>android:permission</strong><br>为了跟应用交互，客户端必须拥有的权限。这个属性是适用于应用中所有组件设置权限的一个方便的方法。每个组件可设置各自的permission属性来覆盖application中的这个属性。</p>\n<p><strong>android:presistent</strong><br>默认值是false。该应用程序是否应该在任何时候都保持运行状态,默认为false。因为应用程序通常不应该设置本标识，持续模式仅仅应该设置给某些系统应用程序才是有意义的。</p>\n<p><strong>android:process</strong><br>应用程序运行的进程名，它的默认值为元素里设置的包名，当然每个组件都可以通过设置该属性来覆盖默认值。如果你想两个应用程序共用一个进程的话，你可以设置他们的android:process相同，但前提条件是他们共享一个用户ID及被赋予了相同证书的时候</p>\n<p><strong>android:restoreAnyVersion</strong><br>此属性的默认值为<code>false</code>。用来表明应用是否准备尝试恢复所有的备份，即使该备份是由比当前在设备上安装的应用程序的更新版本存储的。 将此属性设置为true将允许备份管理器尝试恢复，即使版本不匹配表明数据不兼容。 使用时要小心！。</p>\n<p><strong>android:requiredAccountType=”string”</strong><br>指定应用程序为了运行所需的帐户类型。 如果您的应用需要帐户，则此属性的值必须与您的应用使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。<br>由于受限个人资料目前无法添加帐户，因此指定此属性会使您的应用无法从受限个人资料中获取，除非您也声明了android：restrictedAccountType具有相同的值。<br>警告：如果帐户数据可能显示个人身份信息，请务必声明此属性并将android：restrictedAccountType设置为null，以便受限配置文件无法使用您的应用访问属于所有者用户的个人信息。<br>此属性在API级别18中添加。</p>\n<p><strong>android:resizeableActivity=[“true” | “false”]</strong><br>指定应用是否支持多窗口显示。你可以在 &lt; activity&gt; 或 &lt; application&gt;元素中设置该属性。<br>如果设置为true，用户可在分屏和freeform 模式下启动Activity。如果设置为false，Activity将不支持多窗口模式。如果这个值为false，并且用户尝试在多窗口模式下启动Activity，Activity将会全屏显示。<br>如果你的应用的 targets API 是24或者更高，如果你不指定这个属性，默认值是true。这个属性是在 API level 24新增的。</p>\n<p><strong>android:restrictedAccountType=”string”</strong><br>指定此应用程序所需的帐户类型，并指示允许受限制的配置文件访问属于所有者用户的此类帐户。 如果您的应用需要帐户，且受限个人资料可以访问主要用户的帐户，则此属性的值必须与您的应用所使用的帐户验证器类型（由AuthenticatorDescription定义）（如“com.google”）相对应。默认值为null，表示应用程序可以在没有任何帐户的情况下工作。<br>警告：指定此属性允许受限配置文件使用属于所有者用户的帐户使用您的应用程序，这可能会泄露个人身份信息。 如果帐户可能显示个人详细信息，您不应使用此属性，而应声明android：requiredAccountType属性，使您的应用程序不能使用限制的配置文件。<br>此属性在API级别18中添加。</p>\n<p><strong>android:supportsRtl=[“true” | “false”]</strong><br>默认值是<code>false</code>。声明你的应用是否支持从右向左布局。<br>如果设置为true并且targetSdkVersion 大于等于17，多个RTL相关的API将被激活，被系统使用，从而使得你的app能够显示从右向左的布局。<br>如果设置为false或targetSdkVersion小于17，RTL相关的API将无效或者被忽略，你的app将无视布局方向，始终是从左向右的方向。<br>在API level 17中引入的这个属性。</p>\n<p><strong>android:taskAffinity</strong><br>拥有相同的affinity的Activity理论上属于相同的Task，应用程序默认的affinity的名字是元素中设定的package名（manifest中通过 &lt; manifest&gt;元素设置的包名）。除了那些设置了不同affinity属性的Activity</p>\n<p><strong>android:testOnly=[“true” | “false”]</strong><br>表示一个应用是否仅仅用于测试。例如，它可能暴露它自己的功能或外部数据，这些可能导致一个安全漏洞，但对调试来说有用。这类应用仅仅可以通过adb命令安装。</p>\n<p><strong>android:theme</strong><br>是一个资源的风格，它定义了一个默认的主题风格给所有的activity，可以后续在activity标签层单独覆盖此Theme。</p>\n<p><strong>android:uiOptions=[“none” | “splitActionBarWhenNarrow”]</strong><br>Activity UI的额外选项，必须是下列值中的一个。</p>\n<ul>\n<li>“none”： 没有额外的UI选项，这是默认值。</li>\n<li>“splitActionBarWhenNarrow”：在屏幕底部添加一个条形，以在水平空间受限时（例如在手机上的纵向模式下）在应用栏（也称为操作栏）中显示操作项目。 而不是显示在屏幕顶部的应用栏中的少量操作项，应用栏分割为顶部导航部分和操作项的底部栏。 这确保了不仅为操作项目而且在顶部的导航和标题元素提供合理的空间量。 菜单项不分割在两个条上; 他们总是出现在一起。<br>该属性是在 API level 14中新增的。</li>\n</ul>\n<p><strong>android:usesCleartextTraffic=[“true” | “false”]</strong><br>默认值为<code>true</code>。指示应用程序是否要使用明文网络流量，例如明文HTTP。当属性设置为“false”时，平台组件（例如，HTTP和FTP堆栈，DownloadManager，MediaPlayer）将拒绝应用程序使用明文流量的请求。强烈鼓励第三方图书馆也遵守此设置。避免明文流量的关键原因是缺乏保密性，真实性和防止篡改的保护：网络攻击者可以窃听传输的数据，并且还可以在不检测的情况下对其进行修改。<br>这个标志是最好的努力的基础上，因为它是不可能防止来自Android应用程序的所有明文流量给定的访问级别提供给他们。例如，没有期望Socket API将尊重此标志，因为它不能确定其流量是否为明文。然而，来自应用程序的大多数网络流量由更高级网络堆栈/组件处理，可以通过从ApplicationInfo.flags或NetworkSecurityPolicy.isCleartextTrafficPermitted（）读取该标志来处理该标志。<br>注意：WebView不遵守此标志。<br>在应用程序开发期间，StrictMode可用于标识来自应用程序的任何明文流量：请参阅StrictMode.VmPolicy.Builder.detectCleartextNetwork（）。<br>此属性是在API级别23中添加的。<br>如果存在Android网络安全配置，此标记在Android 7.0（API级别24）及以上版本中将被忽略。</p>\n<p><strong>android:vmSafeMode=[“true” | “false”]</strong><br>表示应用让虚拟机运行在安全模式。默认值为false。这个属性在 API level 8 中引入，true表示禁用DalvikJIT编译器。在API level 22 中有改动，true表示禁用ART AOT编译器</p>"},{"title":"android-shape","date":"2016-05-18T09:28:11.000Z","_content":"\n​\t在Android程序开发中，我们经常会用到Shape去定义各种各样的形状。shape可以在selector，layout等里面使用，有6个子标签，如下：\n<!--more-->\n## Shape 格式\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <!-- 圆角，同时设置五个属性，则Radius属性无效 -->\n    <corners\n        android:radius=\"9dp\" //设置四个解的半径\n        android:topLeftRadius=\"2dp\" //设置左上角的半径\n        android:topRightRadius=\"2dp\" //设置右上角的半径\n        android:bottomLeftRadius=\"2dp\" //设置左下角的半径\n        android:bottomRightRadius=\"2dp\"/> //设置右下角的半径\n\n    <!-- 渐变，当设置填充颜色后，无渐变效果，angle的值必须是45的倍数(包括0)，仅在type=\"linear\"有效，角度以逆时针方向 -->\n    <gradient\n        android:startColor=\"@android:color/white\"\n        android:centerColor=\"@android:color/black\"\n        android:endColor=\"@android:color/black\"\n        android:useLevel=\"true\"\n        android:angle=\"45\"\n        android:type=\"radial\"\n        android:centerX=\"0\"\n        android:centerY=\"0\"\n        android:gradientRadius=\"90\"/>\n\n    <!-- 间隔，设置四个方向的间隔-->\n    <padding\n        android:left=\"2dp\"\n        android:top=\"2dp\"\n        android:right=\"2dp\"\n        android:bottom=\"2dp\"/><!-- 各方向的间隔 -->\n\n    <!-- 大小，设置大小-->\n    <size\n        android:width=\"50dp\"\n        android:height=\"50dp\"/><!-- 宽度和高度 -->\n\n    <!-- 填充，设置填充的颜色 -->\n    <solid\n        android:color=\"@android:color/white\"/><!-- 填充的颜色 -->\n\n    <!-- 描边 dashWidth和dashGap属性，只要其中一个设置为0dp，则边框为实线边框-->\n    <stroke\n        android:width=\"2dp\" //设置边框的宽度\n        android:color=\"@android:color/black\" //设置边框的颜色\n        android:dashWidth=\"1dp\" //设置虚线的宽度\n        android:dashGap=\"2dp\"/> //设置虚线的间隔宽度\n</shape>\n```\n","source":"_posts/android/android-shape.md","raw":"---\ntitle: android-shape\ndate: 2016-05-18 17:28:11\ntags: android\n---\n\n​\t在Android程序开发中，我们经常会用到Shape去定义各种各样的形状。shape可以在selector，layout等里面使用，有6个子标签，如下：\n<!--more-->\n## Shape 格式\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <!-- 圆角，同时设置五个属性，则Radius属性无效 -->\n    <corners\n        android:radius=\"9dp\" //设置四个解的半径\n        android:topLeftRadius=\"2dp\" //设置左上角的半径\n        android:topRightRadius=\"2dp\" //设置右上角的半径\n        android:bottomLeftRadius=\"2dp\" //设置左下角的半径\n        android:bottomRightRadius=\"2dp\"/> //设置右下角的半径\n\n    <!-- 渐变，当设置填充颜色后，无渐变效果，angle的值必须是45的倍数(包括0)，仅在type=\"linear\"有效，角度以逆时针方向 -->\n    <gradient\n        android:startColor=\"@android:color/white\"\n        android:centerColor=\"@android:color/black\"\n        android:endColor=\"@android:color/black\"\n        android:useLevel=\"true\"\n        android:angle=\"45\"\n        android:type=\"radial\"\n        android:centerX=\"0\"\n        android:centerY=\"0\"\n        android:gradientRadius=\"90\"/>\n\n    <!-- 间隔，设置四个方向的间隔-->\n    <padding\n        android:left=\"2dp\"\n        android:top=\"2dp\"\n        android:right=\"2dp\"\n        android:bottom=\"2dp\"/><!-- 各方向的间隔 -->\n\n    <!-- 大小，设置大小-->\n    <size\n        android:width=\"50dp\"\n        android:height=\"50dp\"/><!-- 宽度和高度 -->\n\n    <!-- 填充，设置填充的颜色 -->\n    <solid\n        android:color=\"@android:color/white\"/><!-- 填充的颜色 -->\n\n    <!-- 描边 dashWidth和dashGap属性，只要其中一个设置为0dp，则边框为实线边框-->\n    <stroke\n        android:width=\"2dp\" //设置边框的宽度\n        android:color=\"@android:color/black\" //设置边框的颜色\n        android:dashWidth=\"1dp\" //设置虚线的宽度\n        android:dashGap=\"2dp\"/> //设置虚线的间隔宽度\n</shape>\n```\n","slug":"android/android-shape","published":1,"updated":"2017-02-06T08:13:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u0000ofq9mit69vcj6","content":"<p>​    在Android程序开发中，我们经常会用到Shape去定义各种各样的形状。shape可以在selector，layout等里面使用，有6个子标签，如下：<br><a id=\"more\"></a></p>\n<h2 id=\"Shape-格式\"><a href=\"#Shape-格式\" class=\"headerlink\" title=\"Shape 格式\"></a>Shape 格式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt;</div><div class=\"line\">    &lt;!-- 圆角，同时设置五个属性，则Radius属性无效 --&gt;</div><div class=\"line\">    &lt;corners</div><div class=\"line\">        android:radius=\"9dp\" //设置四个解的半径</div><div class=\"line\">        android:topLeftRadius=\"2dp\" //设置左上角的半径</div><div class=\"line\">        android:topRightRadius=\"2dp\" //设置右上角的半径</div><div class=\"line\">        android:bottomLeftRadius=\"2dp\" //设置左下角的半径</div><div class=\"line\">        android:bottomRightRadius=\"2dp\"/&gt; //设置右下角的半径</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 渐变，当设置填充颜色后，无渐变效果，angle的值必须是45的倍数(包括0)，仅在type=\"linear\"有效，角度以逆时针方向 --&gt;</div><div class=\"line\">    &lt;gradient</div><div class=\"line\">        android:startColor=\"@android:color/white\"</div><div class=\"line\">        android:centerColor=\"@android:color/black\"</div><div class=\"line\">        android:endColor=\"@android:color/black\"</div><div class=\"line\">        android:useLevel=\"true\"</div><div class=\"line\">        android:angle=\"45\"</div><div class=\"line\">        android:type=\"radial\"</div><div class=\"line\">        android:centerX=\"0\"</div><div class=\"line\">        android:centerY=\"0\"</div><div class=\"line\">        android:gradientRadius=\"90\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 间隔，设置四个方向的间隔--&gt;</div><div class=\"line\">    &lt;padding</div><div class=\"line\">        android:left=\"2dp\"</div><div class=\"line\">        android:top=\"2dp\"</div><div class=\"line\">        android:right=\"2dp\"</div><div class=\"line\">        android:bottom=\"2dp\"/&gt;&lt;!-- 各方向的间隔 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 大小，设置大小--&gt;</div><div class=\"line\">    &lt;size</div><div class=\"line\">        android:width=\"50dp\"</div><div class=\"line\">        android:height=\"50dp\"/&gt;&lt;!-- 宽度和高度 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 填充，设置填充的颜色 --&gt;</div><div class=\"line\">    &lt;solid</div><div class=\"line\">        android:color=\"@android:color/white\"/&gt;&lt;!-- 填充的颜色 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 描边 dashWidth和dashGap属性，只要其中一个设置为0dp，则边框为实线边框--&gt;</div><div class=\"line\">    &lt;stroke</div><div class=\"line\">        android:width=\"2dp\" //设置边框的宽度</div><div class=\"line\">        android:color=\"@android:color/black\" //设置边框的颜色</div><div class=\"line\">        android:dashWidth=\"1dp\" //设置虚线的宽度</div><div class=\"line\">        android:dashGap=\"2dp\"/&gt; //设置虚线的间隔宽度</div><div class=\"line\">&lt;/shape&gt;</div></pre></td></tr></table></figure>\n","excerpt":"<p>​    在Android程序开发中，我们经常会用到Shape去定义各种各样的形状。shape可以在selector，layout等里面使用，有6个子标签，如下：<br>","more":"</p>\n<h2 id=\"Shape-格式\"><a href=\"#Shape-格式\" class=\"headerlink\" title=\"Shape 格式\"></a>Shape 格式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt;</div><div class=\"line\">    &lt;!-- 圆角，同时设置五个属性，则Radius属性无效 --&gt;</div><div class=\"line\">    &lt;corners</div><div class=\"line\">        android:radius=\"9dp\" //设置四个解的半径</div><div class=\"line\">        android:topLeftRadius=\"2dp\" //设置左上角的半径</div><div class=\"line\">        android:topRightRadius=\"2dp\" //设置右上角的半径</div><div class=\"line\">        android:bottomLeftRadius=\"2dp\" //设置左下角的半径</div><div class=\"line\">        android:bottomRightRadius=\"2dp\"/&gt; //设置右下角的半径</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 渐变，当设置填充颜色后，无渐变效果，angle的值必须是45的倍数(包括0)，仅在type=\"linear\"有效，角度以逆时针方向 --&gt;</div><div class=\"line\">    &lt;gradient</div><div class=\"line\">        android:startColor=\"@android:color/white\"</div><div class=\"line\">        android:centerColor=\"@android:color/black\"</div><div class=\"line\">        android:endColor=\"@android:color/black\"</div><div class=\"line\">        android:useLevel=\"true\"</div><div class=\"line\">        android:angle=\"45\"</div><div class=\"line\">        android:type=\"radial\"</div><div class=\"line\">        android:centerX=\"0\"</div><div class=\"line\">        android:centerY=\"0\"</div><div class=\"line\">        android:gradientRadius=\"90\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 间隔，设置四个方向的间隔--&gt;</div><div class=\"line\">    &lt;padding</div><div class=\"line\">        android:left=\"2dp\"</div><div class=\"line\">        android:top=\"2dp\"</div><div class=\"line\">        android:right=\"2dp\"</div><div class=\"line\">        android:bottom=\"2dp\"/&gt;&lt;!-- 各方向的间隔 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 大小，设置大小--&gt;</div><div class=\"line\">    &lt;size</div><div class=\"line\">        android:width=\"50dp\"</div><div class=\"line\">        android:height=\"50dp\"/&gt;&lt;!-- 宽度和高度 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 填充，设置填充的颜色 --&gt;</div><div class=\"line\">    &lt;solid</div><div class=\"line\">        android:color=\"@android:color/white\"/&gt;&lt;!-- 填充的颜色 --&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- 描边 dashWidth和dashGap属性，只要其中一个设置为0dp，则边框为实线边框--&gt;</div><div class=\"line\">    &lt;stroke</div><div class=\"line\">        android:width=\"2dp\" //设置边框的宽度</div><div class=\"line\">        android:color=\"@android:color/black\" //设置边框的颜色</div><div class=\"line\">        android:dashWidth=\"1dp\" //设置虚线的宽度</div><div class=\"line\">        android:dashGap=\"2dp\"/&gt; //设置虚线的间隔宽度</div><div class=\"line\">&lt;/shape&gt;</div></pre></td></tr></table></figure>"},{"title":"android-okhttp-流程简析","date":"2017-03-10T06:51:38.000Z","_content":"\n### 前言\n\n> **OkHttp进行网络请求不是基于HttpURLConnection，而是基于socket。本篇只是对源码流程的简析。**\n\n### 源码分析Request\n\n> 不熟悉如何使用OKHttp3的同学，可以先阅读android-okhttp章节\n\n在使用OKHttp3进行网络请求时，我们会使用下面2种方式进行调用\n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\n// 同步\nResponse response = client.newCall(request).execute();\n// 异步\nclient.newCall(request).enqueue(new Callback() {\n    @Override \n    public void onFailure(Call call, IOException e) {\n    }\n\n    @Override \n    public void onResponse(Call call, Response response) throws IOException {\n    }\n});\n```\n\n从上面的代码可以看出，会先调用`newCall(request)`方法获取一个`Call`对象，再调用`Call`对象的`excute`方法或`enqueue`方法执行同步或异步请求。\n\n<!--more-->\n\n接下来，我们来看看源码:\n![okhttpclient01](/img/okhttp/okhttpclient01.jpg)\n\n我们来看看`newCall`方法，该方法返回了一个`RealCall`对象\n\n![realcall01](/img/okhttp/realcall01.jpg)\n\n我们来看看execute和enqueue方法，我们可以看到这2个方法都用到了client.dispatcher()，这个方法得到的是一个Dispatcher对象，如下图：\n\n![dispatcher01](/img/okhttp/dispatcher01.jpg)\n\nDispatcher类设置了一个最大的请求数，定义了一些双队列用于存储request请求，同时定义了一个ExecutorService线程池用于执行异步请求。我们来看看Dispatcher的enqueue方法\n\n![dispatcher02](/img/okhttp/dispatcher02.jpg)\n\n在Dispatcher的enqueue方法中，会使用创建的线程池执行AsyncCall，我们再来看看AsyncCall的实现\n\n![realcall02](/img/okhttp/realcall02.jpg)\n\n大家看图中标红的地方，是不是和我们RealCall同步execute方法很像，都是调用了`getResponseWithInterceptorChain`方法返回`response`，而且我们也可以知道**onFailure**和**onResponse**回调的逻辑了\n\n我们再来持看`getResponseWithInterceptorChain`方法\n\n![realcall03](/img/okhttp/realcall03.jpg)\n\n在`getResponseWithInterceptorChain`方法内部，会定义一个List，装载你自己定义的拦截器和一些Okhttp3定义的拦截器，最后会调用`RealInterceptorChain`类的proceed方法去递归调用List中的拦截器的intercept方法，\n\n![realinterceptorchain01](/img/okhttp/realinterceptorchain01.jpg)\n\n我们来看看`ConnectInterceptor`拦截器，通过名字我们大概能知道是做网络连接用的。\n\n![realinterceptorchain01](/img/okhttp/connectinterceptor01.jpg)\n\n在`ConnectInterceptor`的intercept方法中会用调用StreamAllocation类的newStream获取HttpStream对象，调用connection方法得到RealConnection对象，在connection方法里面仅仅是返回了一个对象，那么RealConnection对象是怎么生成的呢，我们大概可以猜到是在newStream里生成的。我们来看看newStream方法\n\n![streamallocation01](/img/okhttp/streamallocation01.jpg)\n\n在方法内部，大家可以看到是调用了`findHealthyConnection`方法获取到了`RealConnection`对象，同时会把RealConnection的数据(**source/sink**)存放在**Http1xStream **OR **Http2xStream**中(大家先记住这一点，后面获取Reaponse时会用到**Http1xStream**或**Http2xStream**的数据)。在方法`findHealthyConnection`内部，会调用`findConnection`方法\n\n![streamallocation02](/img/okhttp/streamallocation02.jpg)\n\n在`findConnection`方法内部，最终会调到`193`行的`connect`方法，接下来，我们看看RealConnection的connect方法。\n\n![realconnection01](/img/okhttp/realconnection01.jpg)\n\n在connect方法的内部，最终会调用buildTunneledConnection或buildConnection方法，这2个方法最终都会调用RealConnection的connectSocket方法和establishProtocol方法。在connectSocket方法内部，会进行socket进行数据传输，在establishProtocol方法内部，会使用Okio进行数据流的读取，并给RealConnection的source和sink进行赋值，这个值会存储在后续Response的body中。\n\n![realconnection02](/img/okhttp/realconnection02.jpg)\n\n从上图可以看出，在connectSocket内部，会调用Platform的get方法获取相应平台，并调用Platform的connectSocket方法进行socket连接。\n\n![platform01](/img/okhttp/platform01.jpg)\n**至此，我们知道了Okhttp3是通过socket进行数据传输的，同时request请求大致也清楚了**\n\n\n\n### 源码分析Response\n\n在上面的**Request**分析篇中，大家还记得，在RealCall的`getResponseWithInterceptorChain`方法吗\n\n![realcall03](/img/okhttp/realcall03.jpg)\n\n我们在这个方法分析了`ConnectInterceptor`拦截器中的网络请求流程，在这个方法的最后，会调用`CallServerInterceptor`拦截器去进行Response的结果获取，接下来，我们来看看`CallServerInterceptor`\n\n![callserverinterceptor01](/img/okhttp/callserverinterceptor01.jpg)\n\n大家看第**62**行，**Response**的**body**就是在这赋值的，这里的**httpStream**就是我们**Request**篇叫大家记住的**Http1xStream**或**Http2xStream**，这2种**httpStream**流程差不多，我们这里以**Http1xStream**为例来分析\n\n![http1xstream](/img/okhttp/http1xstream.jpg)\n\n这里比较简单，调用**openResponseBody**返回一个**RealResponseBody**对象返回，在方法内部先调用**getTransferStream**方法获取一个**source**对象，然后生成一个**RealResponseBody**对象进行返回。熟悉Okhttp3用法的同学应该知道，在**onResponse**回调里，我们会使用**response.body.string()**获取字符串或**response.body.byteStream()**获取流对象。通过上面对**CallServerInterceptor**拦截器的分析(第**62**行)，我们知道**response.body**就是调用**httpStream**的**openResponseBody**方法返回的**RealResponseBody**，我们再来看看**RealResponseBody**类\n\n![responsebody01](/img/okhttp/responsebody01.jpg)\n\n通过上面的源码，我们可以看出，其它就是调用了**source**的一些方法进行数据处理，然后返回，这里的source就是我们**Request**分析篇中**RealConnection**的**source**\n\n**至此，response整个流程也大致清楚了**","source":"_posts/android/android-okhttp-source.md","raw":"---\ntitle: android-okhttp-流程简析\ndate: 2017-03-10 14:51:38\ntags: android\n---\n\n### 前言\n\n> **OkHttp进行网络请求不是基于HttpURLConnection，而是基于socket。本篇只是对源码流程的简析。**\n\n### 源码分析Request\n\n> 不熟悉如何使用OKHttp3的同学，可以先阅读android-okhttp章节\n\n在使用OKHttp3进行网络请求时，我们会使用下面2种方式进行调用\n\n```java\nprivate final OkHttpClient client = new OkHttpClient();\n\n// 同步\nResponse response = client.newCall(request).execute();\n// 异步\nclient.newCall(request).enqueue(new Callback() {\n    @Override \n    public void onFailure(Call call, IOException e) {\n    }\n\n    @Override \n    public void onResponse(Call call, Response response) throws IOException {\n    }\n});\n```\n\n从上面的代码可以看出，会先调用`newCall(request)`方法获取一个`Call`对象，再调用`Call`对象的`excute`方法或`enqueue`方法执行同步或异步请求。\n\n<!--more-->\n\n接下来，我们来看看源码:\n![okhttpclient01](/img/okhttp/okhttpclient01.jpg)\n\n我们来看看`newCall`方法，该方法返回了一个`RealCall`对象\n\n![realcall01](/img/okhttp/realcall01.jpg)\n\n我们来看看execute和enqueue方法，我们可以看到这2个方法都用到了client.dispatcher()，这个方法得到的是一个Dispatcher对象，如下图：\n\n![dispatcher01](/img/okhttp/dispatcher01.jpg)\n\nDispatcher类设置了一个最大的请求数，定义了一些双队列用于存储request请求，同时定义了一个ExecutorService线程池用于执行异步请求。我们来看看Dispatcher的enqueue方法\n\n![dispatcher02](/img/okhttp/dispatcher02.jpg)\n\n在Dispatcher的enqueue方法中，会使用创建的线程池执行AsyncCall，我们再来看看AsyncCall的实现\n\n![realcall02](/img/okhttp/realcall02.jpg)\n\n大家看图中标红的地方，是不是和我们RealCall同步execute方法很像，都是调用了`getResponseWithInterceptorChain`方法返回`response`，而且我们也可以知道**onFailure**和**onResponse**回调的逻辑了\n\n我们再来持看`getResponseWithInterceptorChain`方法\n\n![realcall03](/img/okhttp/realcall03.jpg)\n\n在`getResponseWithInterceptorChain`方法内部，会定义一个List，装载你自己定义的拦截器和一些Okhttp3定义的拦截器，最后会调用`RealInterceptorChain`类的proceed方法去递归调用List中的拦截器的intercept方法，\n\n![realinterceptorchain01](/img/okhttp/realinterceptorchain01.jpg)\n\n我们来看看`ConnectInterceptor`拦截器，通过名字我们大概能知道是做网络连接用的。\n\n![realinterceptorchain01](/img/okhttp/connectinterceptor01.jpg)\n\n在`ConnectInterceptor`的intercept方法中会用调用StreamAllocation类的newStream获取HttpStream对象，调用connection方法得到RealConnection对象，在connection方法里面仅仅是返回了一个对象，那么RealConnection对象是怎么生成的呢，我们大概可以猜到是在newStream里生成的。我们来看看newStream方法\n\n![streamallocation01](/img/okhttp/streamallocation01.jpg)\n\n在方法内部，大家可以看到是调用了`findHealthyConnection`方法获取到了`RealConnection`对象，同时会把RealConnection的数据(**source/sink**)存放在**Http1xStream **OR **Http2xStream**中(大家先记住这一点，后面获取Reaponse时会用到**Http1xStream**或**Http2xStream**的数据)。在方法`findHealthyConnection`内部，会调用`findConnection`方法\n\n![streamallocation02](/img/okhttp/streamallocation02.jpg)\n\n在`findConnection`方法内部，最终会调到`193`行的`connect`方法，接下来，我们看看RealConnection的connect方法。\n\n![realconnection01](/img/okhttp/realconnection01.jpg)\n\n在connect方法的内部，最终会调用buildTunneledConnection或buildConnection方法，这2个方法最终都会调用RealConnection的connectSocket方法和establishProtocol方法。在connectSocket方法内部，会进行socket进行数据传输，在establishProtocol方法内部，会使用Okio进行数据流的读取，并给RealConnection的source和sink进行赋值，这个值会存储在后续Response的body中。\n\n![realconnection02](/img/okhttp/realconnection02.jpg)\n\n从上图可以看出，在connectSocket内部，会调用Platform的get方法获取相应平台，并调用Platform的connectSocket方法进行socket连接。\n\n![platform01](/img/okhttp/platform01.jpg)\n**至此，我们知道了Okhttp3是通过socket进行数据传输的，同时request请求大致也清楚了**\n\n\n\n### 源码分析Response\n\n在上面的**Request**分析篇中，大家还记得，在RealCall的`getResponseWithInterceptorChain`方法吗\n\n![realcall03](/img/okhttp/realcall03.jpg)\n\n我们在这个方法分析了`ConnectInterceptor`拦截器中的网络请求流程，在这个方法的最后，会调用`CallServerInterceptor`拦截器去进行Response的结果获取，接下来，我们来看看`CallServerInterceptor`\n\n![callserverinterceptor01](/img/okhttp/callserverinterceptor01.jpg)\n\n大家看第**62**行，**Response**的**body**就是在这赋值的，这里的**httpStream**就是我们**Request**篇叫大家记住的**Http1xStream**或**Http2xStream**，这2种**httpStream**流程差不多，我们这里以**Http1xStream**为例来分析\n\n![http1xstream](/img/okhttp/http1xstream.jpg)\n\n这里比较简单，调用**openResponseBody**返回一个**RealResponseBody**对象返回，在方法内部先调用**getTransferStream**方法获取一个**source**对象，然后生成一个**RealResponseBody**对象进行返回。熟悉Okhttp3用法的同学应该知道，在**onResponse**回调里，我们会使用**response.body.string()**获取字符串或**response.body.byteStream()**获取流对象。通过上面对**CallServerInterceptor**拦截器的分析(第**62**行)，我们知道**response.body**就是调用**httpStream**的**openResponseBody**方法返回的**RealResponseBody**，我们再来看看**RealResponseBody**类\n\n![responsebody01](/img/okhttp/responsebody01.jpg)\n\n通过上面的源码，我们可以看出，其它就是调用了**source**的一些方法进行数据处理，然后返回，这里的source就是我们**Request**分析篇中**RealConnection**的**source**\n\n**至此，response整个流程也大致清楚了**","slug":"android/android-okhttp-source","published":1,"updated":"2017-03-27T09:19:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u1000pfq9moyf5dbb4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p><strong>OkHttp进行网络请求不是基于HttpURLConnection，而是基于socket。本篇只是对源码流程的简析。</strong></p>\n</blockquote>\n<h3 id=\"源码分析Request\"><a href=\"#源码分析Request\" class=\"headerlink\" title=\"源码分析Request\"></a>源码分析Request</h3><blockquote>\n<p>不熟悉如何使用OKHttp3的同学，可以先阅读android-okhttp章节</p>\n</blockquote>\n<p>在使用OKHttp3进行网络请求时，我们会使用下面2种方式进行调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步</span></div><div class=\"line\">Response response = client.newCall(request).execute();</div><div class=\"line\"><span class=\"comment\">// 异步</span></div><div class=\"line\">client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，会先调用<code>newCall(request)</code>方法获取一个<code>Call</code>对象，再调用<code>Call</code>对象的<code>excute</code>方法或<code>enqueue</code>方法执行同步或异步请求。</p>\n<a id=\"more\"></a>\n<p>接下来，我们来看看源码:<br><img src=\"/img/okhttp/okhttpclient01.jpg\" alt=\"okhttpclient01\"></p>\n<p>我们来看看<code>newCall</code>方法，该方法返回了一个<code>RealCall</code>对象</p>\n<p><img src=\"/img/okhttp/realcall01.jpg\" alt=\"realcall01\"></p>\n<p>我们来看看execute和enqueue方法，我们可以看到这2个方法都用到了client.dispatcher()，这个方法得到的是一个Dispatcher对象，如下图：</p>\n<p><img src=\"/img/okhttp/dispatcher01.jpg\" alt=\"dispatcher01\"></p>\n<p>Dispatcher类设置了一个最大的请求数，定义了一些双队列用于存储request请求，同时定义了一个ExecutorService线程池用于执行异步请求。我们来看看Dispatcher的enqueue方法</p>\n<p><img src=\"/img/okhttp/dispatcher02.jpg\" alt=\"dispatcher02\"></p>\n<p>在Dispatcher的enqueue方法中，会使用创建的线程池执行AsyncCall，我们再来看看AsyncCall的实现</p>\n<p><img src=\"/img/okhttp/realcall02.jpg\" alt=\"realcall02\"></p>\n<p>大家看图中标红的地方，是不是和我们RealCall同步execute方法很像，都是调用了<code>getResponseWithInterceptorChain</code>方法返回<code>response</code>，而且我们也可以知道<strong>onFailure</strong>和<strong>onResponse</strong>回调的逻辑了</p>\n<p>我们再来持看<code>getResponseWithInterceptorChain</code>方法</p>\n<p><img src=\"/img/okhttp/realcall03.jpg\" alt=\"realcall03\"></p>\n<p>在<code>getResponseWithInterceptorChain</code>方法内部，会定义一个List，装载你自己定义的拦截器和一些Okhttp3定义的拦截器，最后会调用<code>RealInterceptorChain</code>类的proceed方法去递归调用List中的拦截器的intercept方法，</p>\n<p><img src=\"/img/okhttp/realinterceptorchain01.jpg\" alt=\"realinterceptorchain01\"></p>\n<p>我们来看看<code>ConnectInterceptor</code>拦截器，通过名字我们大概能知道是做网络连接用的。</p>\n<p><img src=\"/img/okhttp/connectinterceptor01.jpg\" alt=\"realinterceptorchain01\"></p>\n<p>在<code>ConnectInterceptor</code>的intercept方法中会用调用StreamAllocation类的newStream获取HttpStream对象，调用connection方法得到RealConnection对象，在connection方法里面仅仅是返回了一个对象，那么RealConnection对象是怎么生成的呢，我们大概可以猜到是在newStream里生成的。我们来看看newStream方法</p>\n<p><img src=\"/img/okhttp/streamallocation01.jpg\" alt=\"streamallocation01\"></p>\n<p>在方法内部，大家可以看到是调用了<code>findHealthyConnection</code>方法获取到了<code>RealConnection</code>对象，同时会把RealConnection的数据(<strong>source/sink</strong>)存放在<strong>Http1xStream </strong>OR <strong>Http2xStream</strong>中(大家先记住这一点，后面获取Reaponse时会用到<strong>Http1xStream</strong>或<strong>Http2xStream</strong>的数据)。在方法<code>findHealthyConnection</code>内部，会调用<code>findConnection</code>方法</p>\n<p><img src=\"/img/okhttp/streamallocation02.jpg\" alt=\"streamallocation02\"></p>\n<p>在<code>findConnection</code>方法内部，最终会调到<code>193</code>行的<code>connect</code>方法，接下来，我们看看RealConnection的connect方法。</p>\n<p><img src=\"/img/okhttp/realconnection01.jpg\" alt=\"realconnection01\"></p>\n<p>在connect方法的内部，最终会调用buildTunneledConnection或buildConnection方法，这2个方法最终都会调用RealConnection的connectSocket方法和establishProtocol方法。在connectSocket方法内部，会进行socket进行数据传输，在establishProtocol方法内部，会使用Okio进行数据流的读取，并给RealConnection的source和sink进行赋值，这个值会存储在后续Response的body中。</p>\n<p><img src=\"/img/okhttp/realconnection02.jpg\" alt=\"realconnection02\"></p>\n<p>从上图可以看出，在connectSocket内部，会调用Platform的get方法获取相应平台，并调用Platform的connectSocket方法进行socket连接。</p>\n<p><img src=\"/img/okhttp/platform01.jpg\" alt=\"platform01\"><br><strong>至此，我们知道了Okhttp3是通过socket进行数据传输的，同时request请求大致也清楚了</strong></p>\n<h3 id=\"源码分析Response\"><a href=\"#源码分析Response\" class=\"headerlink\" title=\"源码分析Response\"></a>源码分析Response</h3><p>在上面的<strong>Request</strong>分析篇中，大家还记得，在RealCall的<code>getResponseWithInterceptorChain</code>方法吗</p>\n<p><img src=\"/img/okhttp/realcall03.jpg\" alt=\"realcall03\"></p>\n<p>我们在这个方法分析了<code>ConnectInterceptor</code>拦截器中的网络请求流程，在这个方法的最后，会调用<code>CallServerInterceptor</code>拦截器去进行Response的结果获取，接下来，我们来看看<code>CallServerInterceptor</code></p>\n<p><img src=\"/img/okhttp/callserverinterceptor01.jpg\" alt=\"callserverinterceptor01\"></p>\n<p>大家看第<strong>62</strong>行，<strong>Response</strong>的<strong>body</strong>就是在这赋值的，这里的<strong>httpStream</strong>就是我们<strong>Request</strong>篇叫大家记住的<strong>Http1xStream</strong>或<strong>Http2xStream</strong>，这2种<strong>httpStream</strong>流程差不多，我们这里以<strong>Http1xStream</strong>为例来分析</p>\n<p><img src=\"/img/okhttp/http1xstream.jpg\" alt=\"http1xstream\"></p>\n<p>这里比较简单，调用<strong>openResponseBody</strong>返回一个<strong>RealResponseBody</strong>对象返回，在方法内部先调用<strong>getTransferStream</strong>方法获取一个<strong>source</strong>对象，然后生成一个<strong>RealResponseBody</strong>对象进行返回。熟悉Okhttp3用法的同学应该知道，在<strong>onResponse</strong>回调里，我们会使用<strong>response.body.string()</strong>获取字符串或<strong>response.body.byteStream()</strong>获取流对象。通过上面对<strong>CallServerInterceptor</strong>拦截器的分析(第<strong>62</strong>行)，我们知道<strong>response.body</strong>就是调用<strong>httpStream</strong>的<strong>openResponseBody</strong>方法返回的<strong>RealResponseBody</strong>，我们再来看看<strong>RealResponseBody</strong>类</p>\n<p><img src=\"/img/okhttp/responsebody01.jpg\" alt=\"responsebody01\"></p>\n<p>通过上面的源码，我们可以看出，其它就是调用了<strong>source</strong>的一些方法进行数据处理，然后返回，这里的source就是我们<strong>Request</strong>分析篇中<strong>RealConnection</strong>的<strong>source</strong></p>\n<p><strong>至此，response整个流程也大致清楚了</strong></p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p><strong>OkHttp进行网络请求不是基于HttpURLConnection，而是基于socket。本篇只是对源码流程的简析。</strong></p>\n</blockquote>\n<h3 id=\"源码分析Request\"><a href=\"#源码分析Request\" class=\"headerlink\" title=\"源码分析Request\"></a>源码分析Request</h3><blockquote>\n<p>不熟悉如何使用OKHttp3的同学，可以先阅读android-okhttp章节</p>\n</blockquote>\n<p>在使用OKHttp3进行网络请求时，我们会使用下面2种方式进行调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步</span></div><div class=\"line\">Response response = client.newCall(request).execute();</div><div class=\"line\"><span class=\"comment\">// 异步</span></div><div class=\"line\">client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，会先调用<code>newCall(request)</code>方法获取一个<code>Call</code>对象，再调用<code>Call</code>对象的<code>excute</code>方法或<code>enqueue</code>方法执行同步或异步请求。</p>","more":"<p>接下来，我们来看看源码:<br><img src=\"/img/okhttp/okhttpclient01.jpg\" alt=\"okhttpclient01\"></p>\n<p>我们来看看<code>newCall</code>方法，该方法返回了一个<code>RealCall</code>对象</p>\n<p><img src=\"/img/okhttp/realcall01.jpg\" alt=\"realcall01\"></p>\n<p>我们来看看execute和enqueue方法，我们可以看到这2个方法都用到了client.dispatcher()，这个方法得到的是一个Dispatcher对象，如下图：</p>\n<p><img src=\"/img/okhttp/dispatcher01.jpg\" alt=\"dispatcher01\"></p>\n<p>Dispatcher类设置了一个最大的请求数，定义了一些双队列用于存储request请求，同时定义了一个ExecutorService线程池用于执行异步请求。我们来看看Dispatcher的enqueue方法</p>\n<p><img src=\"/img/okhttp/dispatcher02.jpg\" alt=\"dispatcher02\"></p>\n<p>在Dispatcher的enqueue方法中，会使用创建的线程池执行AsyncCall，我们再来看看AsyncCall的实现</p>\n<p><img src=\"/img/okhttp/realcall02.jpg\" alt=\"realcall02\"></p>\n<p>大家看图中标红的地方，是不是和我们RealCall同步execute方法很像，都是调用了<code>getResponseWithInterceptorChain</code>方法返回<code>response</code>，而且我们也可以知道<strong>onFailure</strong>和<strong>onResponse</strong>回调的逻辑了</p>\n<p>我们再来持看<code>getResponseWithInterceptorChain</code>方法</p>\n<p><img src=\"/img/okhttp/realcall03.jpg\" alt=\"realcall03\"></p>\n<p>在<code>getResponseWithInterceptorChain</code>方法内部，会定义一个List，装载你自己定义的拦截器和一些Okhttp3定义的拦截器，最后会调用<code>RealInterceptorChain</code>类的proceed方法去递归调用List中的拦截器的intercept方法，</p>\n<p><img src=\"/img/okhttp/realinterceptorchain01.jpg\" alt=\"realinterceptorchain01\"></p>\n<p>我们来看看<code>ConnectInterceptor</code>拦截器，通过名字我们大概能知道是做网络连接用的。</p>\n<p><img src=\"/img/okhttp/connectinterceptor01.jpg\" alt=\"realinterceptorchain01\"></p>\n<p>在<code>ConnectInterceptor</code>的intercept方法中会用调用StreamAllocation类的newStream获取HttpStream对象，调用connection方法得到RealConnection对象，在connection方法里面仅仅是返回了一个对象，那么RealConnection对象是怎么生成的呢，我们大概可以猜到是在newStream里生成的。我们来看看newStream方法</p>\n<p><img src=\"/img/okhttp/streamallocation01.jpg\" alt=\"streamallocation01\"></p>\n<p>在方法内部，大家可以看到是调用了<code>findHealthyConnection</code>方法获取到了<code>RealConnection</code>对象，同时会把RealConnection的数据(<strong>source/sink</strong>)存放在<strong>Http1xStream </strong>OR <strong>Http2xStream</strong>中(大家先记住这一点，后面获取Reaponse时会用到<strong>Http1xStream</strong>或<strong>Http2xStream</strong>的数据)。在方法<code>findHealthyConnection</code>内部，会调用<code>findConnection</code>方法</p>\n<p><img src=\"/img/okhttp/streamallocation02.jpg\" alt=\"streamallocation02\"></p>\n<p>在<code>findConnection</code>方法内部，最终会调到<code>193</code>行的<code>connect</code>方法，接下来，我们看看RealConnection的connect方法。</p>\n<p><img src=\"/img/okhttp/realconnection01.jpg\" alt=\"realconnection01\"></p>\n<p>在connect方法的内部，最终会调用buildTunneledConnection或buildConnection方法，这2个方法最终都会调用RealConnection的connectSocket方法和establishProtocol方法。在connectSocket方法内部，会进行socket进行数据传输，在establishProtocol方法内部，会使用Okio进行数据流的读取，并给RealConnection的source和sink进行赋值，这个值会存储在后续Response的body中。</p>\n<p><img src=\"/img/okhttp/realconnection02.jpg\" alt=\"realconnection02\"></p>\n<p>从上图可以看出，在connectSocket内部，会调用Platform的get方法获取相应平台，并调用Platform的connectSocket方法进行socket连接。</p>\n<p><img src=\"/img/okhttp/platform01.jpg\" alt=\"platform01\"><br><strong>至此，我们知道了Okhttp3是通过socket进行数据传输的，同时request请求大致也清楚了</strong></p>\n<h3 id=\"源码分析Response\"><a href=\"#源码分析Response\" class=\"headerlink\" title=\"源码分析Response\"></a>源码分析Response</h3><p>在上面的<strong>Request</strong>分析篇中，大家还记得，在RealCall的<code>getResponseWithInterceptorChain</code>方法吗</p>\n<p><img src=\"/img/okhttp/realcall03.jpg\" alt=\"realcall03\"></p>\n<p>我们在这个方法分析了<code>ConnectInterceptor</code>拦截器中的网络请求流程，在这个方法的最后，会调用<code>CallServerInterceptor</code>拦截器去进行Response的结果获取，接下来，我们来看看<code>CallServerInterceptor</code></p>\n<p><img src=\"/img/okhttp/callserverinterceptor01.jpg\" alt=\"callserverinterceptor01\"></p>\n<p>大家看第<strong>62</strong>行，<strong>Response</strong>的<strong>body</strong>就是在这赋值的，这里的<strong>httpStream</strong>就是我们<strong>Request</strong>篇叫大家记住的<strong>Http1xStream</strong>或<strong>Http2xStream</strong>，这2种<strong>httpStream</strong>流程差不多，我们这里以<strong>Http1xStream</strong>为例来分析</p>\n<p><img src=\"/img/okhttp/http1xstream.jpg\" alt=\"http1xstream\"></p>\n<p>这里比较简单，调用<strong>openResponseBody</strong>返回一个<strong>RealResponseBody</strong>对象返回，在方法内部先调用<strong>getTransferStream</strong>方法获取一个<strong>source</strong>对象，然后生成一个<strong>RealResponseBody</strong>对象进行返回。熟悉Okhttp3用法的同学应该知道，在<strong>onResponse</strong>回调里，我们会使用<strong>response.body.string()</strong>获取字符串或<strong>response.body.byteStream()</strong>获取流对象。通过上面对<strong>CallServerInterceptor</strong>拦截器的分析(第<strong>62</strong>行)，我们知道<strong>response.body</strong>就是调用<strong>httpStream</strong>的<strong>openResponseBody</strong>方法返回的<strong>RealResponseBody</strong>，我们再来看看<strong>RealResponseBody</strong>类</p>\n<p><img src=\"/img/okhttp/responsebody01.jpg\" alt=\"responsebody01\"></p>\n<p>通过上面的源码，我们可以看出，其它就是调用了<strong>source</strong>的一些方法进行数据处理，然后返回，这里的source就是我们<strong>Request</strong>分析篇中<strong>RealConnection</strong>的<strong>source</strong></p>\n<p><strong>至此，response整个流程也大致清楚了</strong></p>"},{"title":"android-vr-ar-mr","date":"2017-05-03T09:23:57.000Z","_content":"\n**AR**\n\nhttp://www.easyar.cn/view/sdk.html\n\nhttps://www.hiscene.com\n\nhttps://developer.vuforia.com\n\nhttps://developers.google.com/tango/downloads\n\nhttps://github.com/googlesamples/tango-examples-c\n\n\n\nBlog:\n\nhttp://www.jianshu.com/p/49d76c24ae46\n\nhttp://blog.csdn.net/jaikydota163/article/details/52626788\n\nhttp://www.cnblogs.com/yidan621/p/5677544.html\n\nhttp://blog.csdn.net/d276031034/article/details/54846434\n\nhttp://blog.csdn.net/yywan1314520/article/details/51530537","source":"_posts/android/android-vr.md","raw":"---\ntitle: android-vr-ar-mr\ndate: 2017-05-03 17:23:57\ntags: android\n---\n\n**AR**\n\nhttp://www.easyar.cn/view/sdk.html\n\nhttps://www.hiscene.com\n\nhttps://developer.vuforia.com\n\nhttps://developers.google.com/tango/downloads\n\nhttps://github.com/googlesamples/tango-examples-c\n\n\n\nBlog:\n\nhttp://www.jianshu.com/p/49d76c24ae46\n\nhttp://blog.csdn.net/jaikydota163/article/details/52626788\n\nhttp://www.cnblogs.com/yidan621/p/5677544.html\n\nhttp://blog.csdn.net/d276031034/article/details/54846434\n\nhttp://blog.csdn.net/yywan1314520/article/details/51530537","slug":"android/android-vr","published":1,"updated":"2017-05-04T07:20:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u4000sfq9m16eouhgt","content":"<p><strong>AR</strong></p>\n<p><a href=\"http://www.easyar.cn/view/sdk.html\" target=\"_blank\" rel=\"external\">http://www.easyar.cn/view/sdk.html</a></p>\n<p><a href=\"https://www.hiscene.com\" target=\"_blank\" rel=\"external\">https://www.hiscene.com</a></p>\n<p><a href=\"https://developer.vuforia.com\" target=\"_blank\" rel=\"external\">https://developer.vuforia.com</a></p>\n<p><a href=\"https://developers.google.com/tango/downloads\" target=\"_blank\" rel=\"external\">https://developers.google.com/tango/downloads</a></p>\n<p><a href=\"https://github.com/googlesamples/tango-examples-c\" target=\"_blank\" rel=\"external\">https://github.com/googlesamples/tango-examples-c</a></p>\n<p>Blog:</p>\n<p><a href=\"http://www.jianshu.com/p/49d76c24ae46\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/49d76c24ae46</a></p>\n<p><a href=\"http://blog.csdn.net/jaikydota163/article/details/52626788\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jaikydota163/article/details/52626788</a></p>\n<p><a href=\"http://www.cnblogs.com/yidan621/p/5677544.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/yidan621/p/5677544.html</a></p>\n<p><a href=\"http://blog.csdn.net/d276031034/article/details/54846434\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/d276031034/article/details/54846434</a></p>\n<p><a href=\"http://blog.csdn.net/yywan1314520/article/details/51530537\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yywan1314520/article/details/51530537</a></p>\n","excerpt":"","more":"<p><strong>AR</strong></p>\n<p><a href=\"http://www.easyar.cn/view/sdk.html\">http://www.easyar.cn/view/sdk.html</a></p>\n<p><a href=\"https://www.hiscene.com\">https://www.hiscene.com</a></p>\n<p><a href=\"https://developer.vuforia.com\">https://developer.vuforia.com</a></p>\n<p><a href=\"https://developers.google.com/tango/downloads\">https://developers.google.com/tango/downloads</a></p>\n<p><a href=\"https://github.com/googlesamples/tango-examples-c\">https://github.com/googlesamples/tango-examples-c</a></p>\n<p>Blog:</p>\n<p><a href=\"http://www.jianshu.com/p/49d76c24ae46\">http://www.jianshu.com/p/49d76c24ae46</a></p>\n<p><a href=\"http://blog.csdn.net/jaikydota163/article/details/52626788\">http://blog.csdn.net/jaikydota163/article/details/52626788</a></p>\n<p><a href=\"http://www.cnblogs.com/yidan621/p/5677544.html\">http://www.cnblogs.com/yidan621/p/5677544.html</a></p>\n<p><a href=\"http://blog.csdn.net/d276031034/article/details/54846434\">http://blog.csdn.net/d276031034/article/details/54846434</a></p>\n<p><a href=\"http://blog.csdn.net/yywan1314520/article/details/51530537\">http://blog.csdn.net/yywan1314520/article/details/51530537</a></p>\n"},{"title":"android-tips","date":"2016-05-31T13:53:23.000Z","_content":"\n\n\n**解决Kotlin项目Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter savedInstanceState**\n\n当我们自定义application并实现ActivityLifecycleCallbacks方法，这时候我们会重写onActivityCreated这个方法\n\n使用kotlin转换java代码，会是下面这样\n\n```kotlin\noverride fun onActivityCreated(activity: Activity, savedInstanceState: Bundle) {\n\n}\n```\n\n这个时候我们需要把savedInstanceState: Bundle改为savedInstanceState: Bundle?，就是在Bundle后面加个?号\n\n```kotlin\noverride fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {\n  \n}\n```\n\nOK，又可以继续玩耍了\n\n### Android allowBackup敏感信息泄露的一些解决方案\n\n- 直接在你的Android清单文件中设置`android:allowBackup=”false”`即可，如下：\n\n  ```java\n  <application\n    \tandroid:name=\".app.App\"\n      android:allowBackup=\"true\">\n  ```\n\n- 不在你的Android清单文件中设置`android:allowBackup=”false”`，允许执行备份，但是在你应用启动页进行逻辑判断是否进行重新登陆等，譬如查看设备唯一识别设备编号和备份前是否一致，不一致则直接跳转登陆页面的同时清空当前应用数据及缓存。\n\n### 设置背景颜色偶现无效\n\n最近在开发中碰到了一个问题，在Android5.0以上的手机，对布局设置背景颜色\n\n```java\n android:background=\"@color/c_4897fa\"\n```\n\n会出现背景颜色偶现无效的问题，使用下面的方法解决\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n    <!-- 角度 -->\n    <corners android:radius=\"1dp\" />\n    <!-- 填充色 -->\n    <solid android:color=\"@color/c_4897fa\" />\n</shape>\n```\n\n```java\nandroid:background=\"@drawable/home_nearby_bg\"\n```\n\n先画一个shape，再设置给backgroud\n\n### 清除Android WebView 缓存\n\n```java\npublic static void clearWebCache(Context context) {\n  try {\n    CookieSyncManager.createInstance(context);\n    CookieManager cm = CookieManager.getInstance();\n    cm.removeSessionCookie();\n    cm.removeAllCookie();\n    CookieSyncManager.getInstance().sync();\n\n    WebStorage.getInstance().deleteAllData();\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n}\n```\n### 捕获全局异常\n\n使用`Thread.UncaughtExceptionHandler`捕获全局异常\n\n### 启动LaunchIntent\n\n```java\nIntent i = getBaseContext().getPackageManager()\n.getLaunchIntentForPackage(getBaseContext().getPackageName());\ni.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\nstartActivity(i);\n```\n\n### Annotations\n\n```java\n@CallSuper\n@StringRes\n@DrawableRes\n@CheckResult\n@NonNull\n@Nullable\n@AnimatorRes\n@AnimRes\n@AnyRes\n@AnyThread\n@ArrayRes\n@AttrRes\n@BinderThread\n@ColorRes\n@ColorInt\n@BoolRes\n@DimenRes\n@Dimension\n@IdRes\n@FloatRange\n@FractionRes\n@IntegerRes\n@XmlRes\n```\n**关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白**\n\nhttps://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md\n\n**RecyclerView去掉滚动条和滑动到边界阴影**\n\n```java\n<android.support.v7.widget.RecyclerView\n    android:id=\"@+id/rv_search_one\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:overScrollMode=\"never\"\n    android:scrollbars=\"none\" />\n```\n**设置屏幕常亮**\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n}\n@Override\nprotected void onDestroy() {\n  super.onDestroy();\n  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n}\n```\n\n**使用PhotoView+Viewpager崩溃问题**\n\njava.lang.IllegalArgumentException: pointerIndex out of range\n\n```java\n// 自定义一个Viewpager，重写onInterceptTouchEvent函数，在里面捕获IllegalArgumentException\npublic class PhotoViewPager extends android.support.v4.view.ViewPager {\n    public PhotoViewPager(Context context) {\n        super(context);\n    }\n\n    public PhotoViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        try {\n            return super.onTouchEvent(ev);\n        } catch (IllegalArgumentException ex) {\n            ex.printStackTrace();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        try {\n            return super.onInterceptTouchEvent(ev);\n        } catch (IllegalArgumentException ex) {\n            ex.printStackTrace();\n        }\n        return false;\n    }\n}\n```\n**WebView自适应高度**\n\n```java\nprivate void setupWebView() {\n    webView.getSettings().setJavaScriptEnabled(true);\n    webView.setWebViewClient(new WebViewClient() {\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            \t\twebView.loadUrl(\"javascript:MyApp.resize(document.body.getBoundingClientRect().height)\");\n            super.onPageFinished(view, url);\n        }\n    });\n    webView.addJavascriptInterface(this, \"MyApp\");\n}\n\n@JavascriptInterface\npublic void resize(final float height) {\n    MyActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            webView.setLayoutParams(new LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (int) (height * getResources().getDisplayMetrics().density)));\n        }\n    });\n}\n```\nhttp://www.bubuko.com/infodetail-1612451.html\n\n**通过resId获取属性名**\n\n例：R.id.tv_hello = 0x7f080007\n\n当我们调用view的getId()时，我们能获取到0x7f080007，但有时我们需要获取到tv_hello这个属性名，可以使用下面的方法\n\n```\nString name = getResources().getResourceEntryName(id);\n```\n\n**使用AspectJ配置**\n\n使用网上的配置，在gradle版本为2.2.3时，不会出现问题，当切换到2.3.3时，会报\n\nNo such property: project for class: com.android.build.gradle.LibraryPlugin，\n\n修复办法：不使用 LibraryPlugin 直接使用 project\n\n```java\nandroid.libraryVariants.all { variant ->\n//    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)\n    JavaCompile javaCompile = variant.javaCompile\n    javaCompile.doLast {\n        String[] args = [\"-showWeaveInfo\",\n                         \"-1.5\",\n                         \"-inpath\", javaCompile.destinationDir.toString(),\n                         \"-aspectpath\", javaCompile.classpath.asPath,\n                         \"-d\", javaCompile.destinationDir.toString(),\n                         \"-classpath\", javaCompile.classpath.asPath,\n                         \"-bootclasspath\", project.android.bootClasspath.join(\n                File.pathSeparator)]\n\n        MessageHandler handler = new MessageHandler(true);\n        new Main().run(args, handler)\n\n        def log = project.logger\n        for (IMessage message : handler.getMessages(null, true)) {\n            switch (message.getKind()) {\n                case IMessage.ABORT:\n                case IMessage.ERROR:\n                case IMessage.FAIL:\n                    log.error message.message, message.thrown\n                    break;\n                case IMessage.WARNING:\n                case IMessage.INFO:\n                    log.info message.message, message.thrown\n                    break;\n                case IMessage.DEBUG:\n                    log.debug message.message, message.thrown\n                    break;\n            }\n        }\n    }\n}\n```\n\n**解决支持库版本兼容问题：**\n\n(all com.android.support libraries must use the exact same version specification)\n\n去改第三方库所用的支持库版本比较麻烦，如果用的库很多的话工作量很大。这个时候我们可以考虑强制让所有模块都用相同的支持库版本。\n\n在app build.gradle中添加：\n\n```java\nconfigurations.all {\n    resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n        def requested = details.requested\n        if (requested.group == 'com.android.support') {\n            if (!requested.name.startsWith(\"multidex\")) {\n                details.useVersion '25.3.1'\n            }\n        }\n    }\n}\n```\n\n其中，25.3.1就是你要使用的支持库版本号，你可以根据需要改成其它的。\n\n\n\n[error: style attribute '@android:attr/windowEnterAnimation' not found.](http://blog.csdn.net/u012730980/article/details/78390428)\n\n在Project/gradle.properties中添加 android.enableAapt2=false\n\n**解决Google Pixel Download Manager不在通知栏显示进度的BUG**\n\n```java\nDownloadManager.Request request = new DownloadManager.Request(Download_Uri);\n// 添加下面这行\nrequest.setAllowedOverRoaming(false);\n```\n\n**解决Error:Some file crunching failed, see logs for details**\n\n```java\nandroid {\n\n    compileSdkVersion 25\n    buildToolsVersion '25.0.3'\n    useLibrary 'org.apache.http.legacy'\n\n    aaptOptions {\n        cruncherEnabled = false\n        useNewCruncher = false\n    }\n}\n```\n\n添加aaptOptions一栏","source":"_posts/android/android-tips.md","raw":"---\ntitle: android-tips\ndate: 2016-05-31 21:53:23\ntags: android\n---\n\n\n\n**解决Kotlin项目Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter savedInstanceState**\n\n当我们自定义application并实现ActivityLifecycleCallbacks方法，这时候我们会重写onActivityCreated这个方法\n\n使用kotlin转换java代码，会是下面这样\n\n```kotlin\noverride fun onActivityCreated(activity: Activity, savedInstanceState: Bundle) {\n\n}\n```\n\n这个时候我们需要把savedInstanceState: Bundle改为savedInstanceState: Bundle?，就是在Bundle后面加个?号\n\n```kotlin\noverride fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {\n  \n}\n```\n\nOK，又可以继续玩耍了\n\n### Android allowBackup敏感信息泄露的一些解决方案\n\n- 直接在你的Android清单文件中设置`android:allowBackup=”false”`即可，如下：\n\n  ```java\n  <application\n    \tandroid:name=\".app.App\"\n      android:allowBackup=\"true\">\n  ```\n\n- 不在你的Android清单文件中设置`android:allowBackup=”false”`，允许执行备份，但是在你应用启动页进行逻辑判断是否进行重新登陆等，譬如查看设备唯一识别设备编号和备份前是否一致，不一致则直接跳转登陆页面的同时清空当前应用数据及缓存。\n\n### 设置背景颜色偶现无效\n\n最近在开发中碰到了一个问题，在Android5.0以上的手机，对布局设置背景颜色\n\n```java\n android:background=\"@color/c_4897fa\"\n```\n\n会出现背景颜色偶现无效的问题，使用下面的方法解决\n\n```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\">\n    <!-- 角度 -->\n    <corners android:radius=\"1dp\" />\n    <!-- 填充色 -->\n    <solid android:color=\"@color/c_4897fa\" />\n</shape>\n```\n\n```java\nandroid:background=\"@drawable/home_nearby_bg\"\n```\n\n先画一个shape，再设置给backgroud\n\n### 清除Android WebView 缓存\n\n```java\npublic static void clearWebCache(Context context) {\n  try {\n    CookieSyncManager.createInstance(context);\n    CookieManager cm = CookieManager.getInstance();\n    cm.removeSessionCookie();\n    cm.removeAllCookie();\n    CookieSyncManager.getInstance().sync();\n\n    WebStorage.getInstance().deleteAllData();\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n}\n```\n### 捕获全局异常\n\n使用`Thread.UncaughtExceptionHandler`捕获全局异常\n\n### 启动LaunchIntent\n\n```java\nIntent i = getBaseContext().getPackageManager()\n.getLaunchIntentForPackage(getBaseContext().getPackageName());\ni.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\nstartActivity(i);\n```\n\n### Annotations\n\n```java\n@CallSuper\n@StringRes\n@DrawableRes\n@CheckResult\n@NonNull\n@Nullable\n@AnimatorRes\n@AnimRes\n@AnyRes\n@AnyThread\n@ArrayRes\n@AttrRes\n@BinderThread\n@ColorRes\n@ColorInt\n@BoolRes\n@DimenRes\n@Dimension\n@IdRes\n@FloatRange\n@FractionRes\n@IntegerRes\n@XmlRes\n```\n**关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白**\n\nhttps://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md\n\n**RecyclerView去掉滚动条和滑动到边界阴影**\n\n```java\n<android.support.v7.widget.RecyclerView\n    android:id=\"@+id/rv_search_one\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:overScrollMode=\"never\"\n    android:scrollbars=\"none\" />\n```\n**设置屏幕常亮**\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n}\n@Override\nprotected void onDestroy() {\n  super.onDestroy();\n  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n}\n```\n\n**使用PhotoView+Viewpager崩溃问题**\n\njava.lang.IllegalArgumentException: pointerIndex out of range\n\n```java\n// 自定义一个Viewpager，重写onInterceptTouchEvent函数，在里面捕获IllegalArgumentException\npublic class PhotoViewPager extends android.support.v4.view.ViewPager {\n    public PhotoViewPager(Context context) {\n        super(context);\n    }\n\n    public PhotoViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        try {\n            return super.onTouchEvent(ev);\n        } catch (IllegalArgumentException ex) {\n            ex.printStackTrace();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        try {\n            return super.onInterceptTouchEvent(ev);\n        } catch (IllegalArgumentException ex) {\n            ex.printStackTrace();\n        }\n        return false;\n    }\n}\n```\n**WebView自适应高度**\n\n```java\nprivate void setupWebView() {\n    webView.getSettings().setJavaScriptEnabled(true);\n    webView.setWebViewClient(new WebViewClient() {\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            \t\twebView.loadUrl(\"javascript:MyApp.resize(document.body.getBoundingClientRect().height)\");\n            super.onPageFinished(view, url);\n        }\n    });\n    webView.addJavascriptInterface(this, \"MyApp\");\n}\n\n@JavascriptInterface\npublic void resize(final float height) {\n    MyActivity.this.runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            webView.setLayoutParams(new LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (int) (height * getResources().getDisplayMetrics().density)));\n        }\n    });\n}\n```\nhttp://www.bubuko.com/infodetail-1612451.html\n\n**通过resId获取属性名**\n\n例：R.id.tv_hello = 0x7f080007\n\n当我们调用view的getId()时，我们能获取到0x7f080007，但有时我们需要获取到tv_hello这个属性名，可以使用下面的方法\n\n```\nString name = getResources().getResourceEntryName(id);\n```\n\n**使用AspectJ配置**\n\n使用网上的配置，在gradle版本为2.2.3时，不会出现问题，当切换到2.3.3时，会报\n\nNo such property: project for class: com.android.build.gradle.LibraryPlugin，\n\n修复办法：不使用 LibraryPlugin 直接使用 project\n\n```java\nandroid.libraryVariants.all { variant ->\n//    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)\n    JavaCompile javaCompile = variant.javaCompile\n    javaCompile.doLast {\n        String[] args = [\"-showWeaveInfo\",\n                         \"-1.5\",\n                         \"-inpath\", javaCompile.destinationDir.toString(),\n                         \"-aspectpath\", javaCompile.classpath.asPath,\n                         \"-d\", javaCompile.destinationDir.toString(),\n                         \"-classpath\", javaCompile.classpath.asPath,\n                         \"-bootclasspath\", project.android.bootClasspath.join(\n                File.pathSeparator)]\n\n        MessageHandler handler = new MessageHandler(true);\n        new Main().run(args, handler)\n\n        def log = project.logger\n        for (IMessage message : handler.getMessages(null, true)) {\n            switch (message.getKind()) {\n                case IMessage.ABORT:\n                case IMessage.ERROR:\n                case IMessage.FAIL:\n                    log.error message.message, message.thrown\n                    break;\n                case IMessage.WARNING:\n                case IMessage.INFO:\n                    log.info message.message, message.thrown\n                    break;\n                case IMessage.DEBUG:\n                    log.debug message.message, message.thrown\n                    break;\n            }\n        }\n    }\n}\n```\n\n**解决支持库版本兼容问题：**\n\n(all com.android.support libraries must use the exact same version specification)\n\n去改第三方库所用的支持库版本比较麻烦，如果用的库很多的话工作量很大。这个时候我们可以考虑强制让所有模块都用相同的支持库版本。\n\n在app build.gradle中添加：\n\n```java\nconfigurations.all {\n    resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n        def requested = details.requested\n        if (requested.group == 'com.android.support') {\n            if (!requested.name.startsWith(\"multidex\")) {\n                details.useVersion '25.3.1'\n            }\n        }\n    }\n}\n```\n\n其中，25.3.1就是你要使用的支持库版本号，你可以根据需要改成其它的。\n\n\n\n[error: style attribute '@android:attr/windowEnterAnimation' not found.](http://blog.csdn.net/u012730980/article/details/78390428)\n\n在Project/gradle.properties中添加 android.enableAapt2=false\n\n**解决Google Pixel Download Manager不在通知栏显示进度的BUG**\n\n```java\nDownloadManager.Request request = new DownloadManager.Request(Download_Uri);\n// 添加下面这行\nrequest.setAllowedOverRoaming(false);\n```\n\n**解决Error:Some file crunching failed, see logs for details**\n\n```java\nandroid {\n\n    compileSdkVersion 25\n    buildToolsVersion '25.0.3'\n    useLibrary 'org.apache.http.legacy'\n\n    aaptOptions {\n        cruncherEnabled = false\n        useNewCruncher = false\n    }\n}\n```\n\n添加aaptOptions一栏","slug":"android/android-tips","published":1,"updated":"2018-01-25T10:02:50.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u5000ufq9mpun20euq","content":"<p><strong>解决Kotlin项目Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter savedInstanceState</strong></p>\n<p>当我们自定义application并实现ActivityLifecycleCallbacks方法，这时候我们会重写onActivityCreated这个方法</p>\n<p>使用kotlin转换java代码，会是下面这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>, savedInstanceState: <span class=\"type\">Bundle</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个时候我们需要把savedInstanceState: Bundle改为savedInstanceState: Bundle?，就是在Bundle后面加个?号</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OK，又可以继续玩耍了</p>\n<h3 id=\"Android-allowBackup敏感信息泄露的一些解决方案\"><a href=\"#Android-allowBackup敏感信息泄露的一些解决方案\" class=\"headerlink\" title=\"Android allowBackup敏感信息泄露的一些解决方案\"></a>Android allowBackup敏感信息泄露的一些解决方案</h3><ul>\n<li><p>直接在你的Android清单文件中设置<code>android:allowBackup=”false”</code>即可，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">  \tandroid:name=<span class=\"string\">\".app.App\"</span></div><div class=\"line\">    android:allowBackup=<span class=\"string\">\"true\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不在你的Android清单文件中设置<code>android:allowBackup=”false”</code>，允许执行备份，但是在你应用启动页进行逻辑判断是否进行重新登陆等，譬如查看设备唯一识别设备编号和备份前是否一致，不一致则直接跳转登陆页面的同时清空当前应用数据及缓存。</p>\n</li>\n</ul>\n<h3 id=\"设置背景颜色偶现无效\"><a href=\"#设置背景颜色偶现无效\" class=\"headerlink\" title=\"设置背景颜色偶现无效\"></a>设置背景颜色偶现无效</h3><p>最近在开发中碰到了一个问题，在Android5.0以上的手机，对布局设置背景颜色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"@color/c_4897fa\"</span></div></pre></td></tr></table></figure>\n<p>会出现背景颜色偶现无效的问题，使用下面的方法解决</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:shape=\"rectangle\"&gt;</div><div class=\"line\">    &lt;!-- 角度 --&gt;</div><div class=\"line\">    &lt;corners android:radius=\"1dp\" /&gt;</div><div class=\"line\">    &lt;!-- 填充色 --&gt;</div><div class=\"line\">    &lt;solid android:color=\"@color/c_4897fa\" /&gt;</div><div class=\"line\">&lt;/shape&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"@drawable/home_nearby_bg\"</span></div></pre></td></tr></table></figure>\n<p>先画一个shape，再设置给backgroud</p>\n<h3 id=\"清除Android-WebView-缓存\"><a href=\"#清除Android-WebView-缓存\" class=\"headerlink\" title=\"清除Android WebView 缓存\"></a>清除Android WebView 缓存</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearWebCache</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CookieSyncManager.createInstance(context);</div><div class=\"line\">    CookieManager cm = CookieManager.getInstance();</div><div class=\"line\">    cm.removeSessionCookie();</div><div class=\"line\">    cm.removeAllCookie();</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\"></div><div class=\"line\">    WebStorage.getInstance().deleteAllData();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"捕获全局异常\"><a href=\"#捕获全局异常\" class=\"headerlink\" title=\"捕获全局异常\"></a>捕获全局异常</h3><p>使用<code>Thread.UncaughtExceptionHandler</code>捕获全局异常</p>\n<h3 id=\"启动LaunchIntent\"><a href=\"#启动LaunchIntent\" class=\"headerlink\" title=\"启动LaunchIntent\"></a>启动LaunchIntent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent i = getBaseContext().getPackageManager()</div><div class=\"line\">.getLaunchIntentForPackage(getBaseContext().getPackageName());</div><div class=\"line\">i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class=\"line\">startActivity(i);</div></pre></td></tr></table></figure>\n<h3 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@CallSuper</span></div><div class=\"line\"><span class=\"meta\">@StringRes</span></div><div class=\"line\"><span class=\"meta\">@DrawableRes</span></div><div class=\"line\"><span class=\"meta\">@CheckResult</span></div><div class=\"line\"><span class=\"meta\">@NonNull</span></div><div class=\"line\"><span class=\"meta\">@Nullable</span></div><div class=\"line\"><span class=\"meta\">@AnimatorRes</span></div><div class=\"line\"><span class=\"meta\">@AnimRes</span></div><div class=\"line\"><span class=\"meta\">@AnyRes</span></div><div class=\"line\"><span class=\"meta\">@AnyThread</span></div><div class=\"line\"><span class=\"meta\">@ArrayRes</span></div><div class=\"line\"><span class=\"meta\">@AttrRes</span></div><div class=\"line\"><span class=\"meta\">@BinderThread</span></div><div class=\"line\"><span class=\"meta\">@ColorRes</span></div><div class=\"line\"><span class=\"meta\">@ColorInt</span></div><div class=\"line\"><span class=\"meta\">@BoolRes</span></div><div class=\"line\"><span class=\"meta\">@DimenRes</span></div><div class=\"line\"><span class=\"meta\">@Dimension</span></div><div class=\"line\"><span class=\"meta\">@IdRes</span></div><div class=\"line\"><span class=\"meta\">@FloatRange</span></div><div class=\"line\"><span class=\"meta\">@FractionRes</span></div><div class=\"line\"><span class=\"meta\">@IntegerRes</span></div><div class=\"line\"><span class=\"meta\">@XmlRes</span></div></pre></td></tr></table></figure>\n<p><strong>关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白</strong></p>\n<p><a href=\"https://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md\" target=\"_blank\" rel=\"external\">https://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md</a></p>\n<p><strong>RecyclerView去掉滚动条和滑动到边界阴影</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">    android:id=<span class=\"string\">\"@+id/rv_search_one\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:overScrollMode=<span class=\"string\">\"never\"</span></div><div class=\"line\">    android:scrollbars=<span class=\"string\">\"none\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p><strong>设置屏幕常亮</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>使用PhotoView+Viewpager崩溃问题</strong></p>\n<p>java.lang.IllegalArgumentException: pointerIndex out of range</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义一个Viewpager，重写onInterceptTouchEvent函数，在里面捕获IllegalArgumentException</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhotoViewPager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.<span class=\"title\">view</span>.<span class=\"title\">ViewPager</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhotoViewPager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhotoViewPager</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>WebView自适应高度</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            \t\twebView.loadUrl(<span class=\"string\">\"javascript:MyApp.resize(document.body.getBoundingClientRect().height)\"</span>);</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    webView.addJavascriptInterface(<span class=\"keyword\">this</span>, <span class=\"string\">\"MyApp\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> height)</span> </span>&#123;</div><div class=\"line\">    MyActivity.<span class=\"keyword\">this</span>.runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            webView.setLayoutParams(<span class=\"keyword\">new</span> LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (<span class=\"keyword\">int</span>) (height * getResources().getDisplayMetrics().density)));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.bubuko.com/infodetail-1612451.html\" target=\"_blank\" rel=\"external\">http://www.bubuko.com/infodetail-1612451.html</a></p>\n<p><strong>通过resId获取属性名</strong></p>\n<p>例：R.id.tv_hello = 0x7f080007</p>\n<p>当我们调用view的getId()时，我们能获取到0x7f080007，但有时我们需要获取到tv_hello这个属性名，可以使用下面的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String name = getResources().getResourceEntryName(id);</div></pre></td></tr></table></figure>\n<p><strong>使用AspectJ配置</strong></p>\n<p>使用网上的配置，在gradle版本为2.2.3时，不会出现问题，当切换到2.3.3时，会报</p>\n<p>No such property: project for class: com.android.build.gradle.LibraryPlugin，</p>\n<p>修复办法：不使用 LibraryPlugin 直接使用 project</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.libraryVariants.all &#123; variant -&gt;</div><div class=\"line\"><span class=\"comment\">//    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)</span></div><div class=\"line\">    JavaCompile javaCompile = variant.javaCompile</div><div class=\"line\">    javaCompile.doLast &#123;</div><div class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</div><div class=\"line\">                         <span class=\"string\">\"-1.5\"</span>,</div><div class=\"line\">                         <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</div><div class=\"line\">                         <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</div><div class=\"line\">                         <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</div><div class=\"line\">                         <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</div><div class=\"line\">                         <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(</div><div class=\"line\">                File.pathSeparator)]</div><div class=\"line\"></div><div class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler)</div><div class=\"line\"></div><div class=\"line\">        def log = project.<span class=\"function\">logger</span></div><div class=\"line\">        <span class=\"title\">for</span> <span class=\"params\">(IMessage message : handler.getMessages(<span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>)</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (message.getKind()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.ABORT:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.ERROR:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.FAIL:</div><div class=\"line\">                    log.error message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.WARNING:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.INFO:</div><div class=\"line\">                    log.info message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.DEBUG:</div><div class=\"line\">                    log.debug message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>解决支持库版本兼容问题：</strong></p>\n<p>(all com.android.support libraries must use the exact same version specification)</p>\n<p>去改第三方库所用的支持库版本比较麻烦，如果用的库很多的话工作量很大。这个时候我们可以考虑强制让所有模块都用相同的支持库版本。</p>\n<p>在app build.gradle中添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">configurations.all &#123;</div><div class=\"line\">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</div><div class=\"line\">        def requested = details.<span class=\"function\">requested</span></div><div class=\"line\">        <span class=\"title\">if</span> <span class=\"params\">(requested.group == <span class=\"string\">'com.android.support'</span>)</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!requested.name.startsWith(<span class=\"string\">\"multidex\"</span>)) &#123;</div><div class=\"line\">                details.useVersion <span class=\"string\">'25.3.1'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，25.3.1就是你要使用的支持库版本号，你可以根据需要改成其它的。</p>\n<p><a href=\"http://blog.csdn.net/u012730980/article/details/78390428\" target=\"_blank\" rel=\"external\">error: style attribute ‘@android:attr/windowEnterAnimation’ not found.</a></p>\n<p>在Project/gradle.properties中添加 android.enableAapt2=false</p>\n<p><strong>解决Google Pixel Download Manager不在通知栏显示进度的BUG</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DownloadManager.Request request = <span class=\"keyword\">new</span> DownloadManager.Request(Download_Uri);</div><div class=\"line\"><span class=\"comment\">// 添加下面这行</span></div><div class=\"line\">request.setAllowedOverRoaming(<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<p><strong>解决Error:Some file crunching failed, see logs for details</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">'25.0.3'</span></div><div class=\"line\">    useLibrary <span class=\"string\">'org.apache.http.legacy'</span></div><div class=\"line\"></div><div class=\"line\">    aaptOptions &#123;</div><div class=\"line\">        cruncherEnabled = <span class=\"keyword\">false</span></div><div class=\"line\">        useNewCruncher = <span class=\"keyword\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加aaptOptions一栏</p>\n","excerpt":"","more":"<p><strong>解决Kotlin项目Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter savedInstanceState</strong></p>\n<p>当我们自定义application并实现ActivityLifecycleCallbacks方法，这时候我们会重写onActivityCreated这个方法</p>\n<p>使用kotlin转换java代码，会是下面这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>, savedInstanceState: <span class=\"type\">Bundle</span>)</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个时候我们需要把savedInstanceState: Bundle改为savedInstanceState: Bundle?，就是在Bundle后面加个?号</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(activity: <span class=\"type\">Activity</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OK，又可以继续玩耍了</p>\n<h3 id=\"Android-allowBackup敏感信息泄露的一些解决方案\"><a href=\"#Android-allowBackup敏感信息泄露的一些解决方案\" class=\"headerlink\" title=\"Android allowBackup敏感信息泄露的一些解决方案\"></a>Android allowBackup敏感信息泄露的一些解决方案</h3><ul>\n<li><p>直接在你的Android清单文件中设置<code>android:allowBackup=”false”</code>即可，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;application</div><div class=\"line\">  \tandroid:name=<span class=\"string\">\".app.App\"</span></div><div class=\"line\">    android:allowBackup=<span class=\"string\">\"true\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不在你的Android清单文件中设置<code>android:allowBackup=”false”</code>，允许执行备份，但是在你应用启动页进行逻辑判断是否进行重新登陆等，譬如查看设备唯一识别设备编号和备份前是否一致，不一致则直接跳转登陆页面的同时清空当前应用数据及缓存。</p>\n</li>\n</ul>\n<h3 id=\"设置背景颜色偶现无效\"><a href=\"#设置背景颜色偶现无效\" class=\"headerlink\" title=\"设置背景颜色偶现无效\"></a>设置背景颜色偶现无效</h3><p>最近在开发中碰到了一个问题，在Android5.0以上的手机，对布局设置背景颜色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"@color/c_4897fa\"</span></div></pre></td></tr></table></figure>\n<p>会出现背景颜色偶现无效的问题，使用下面的方法解决</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:shape=\"rectangle\"&gt;</div><div class=\"line\">    &lt;!-- 角度 --&gt;</div><div class=\"line\">    &lt;corners android:radius=\"1dp\" /&gt;</div><div class=\"line\">    &lt;!-- 填充色 --&gt;</div><div class=\"line\">    &lt;solid android:color=\"@color/c_4897fa\" /&gt;</div><div class=\"line\">&lt;/shape&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:background=<span class=\"string\">\"@drawable/home_nearby_bg\"</span></div></pre></td></tr></table></figure>\n<p>先画一个shape，再设置给backgroud</p>\n<h3 id=\"清除Android-WebView-缓存\"><a href=\"#清除Android-WebView-缓存\" class=\"headerlink\" title=\"清除Android WebView 缓存\"></a>清除Android WebView 缓存</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearWebCache</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CookieSyncManager.createInstance(context);</div><div class=\"line\">    CookieManager cm = CookieManager.getInstance();</div><div class=\"line\">    cm.removeSessionCookie();</div><div class=\"line\">    cm.removeAllCookie();</div><div class=\"line\">    CookieSyncManager.getInstance().sync();</div><div class=\"line\"></div><div class=\"line\">    WebStorage.getInstance().deleteAllData();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"捕获全局异常\"><a href=\"#捕获全局异常\" class=\"headerlink\" title=\"捕获全局异常\"></a>捕获全局异常</h3><p>使用<code>Thread.UncaughtExceptionHandler</code>捕获全局异常</p>\n<h3 id=\"启动LaunchIntent\"><a href=\"#启动LaunchIntent\" class=\"headerlink\" title=\"启动LaunchIntent\"></a>启动LaunchIntent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent i = getBaseContext().getPackageManager()</div><div class=\"line\">.getLaunchIntentForPackage(getBaseContext().getPackageName());</div><div class=\"line\">i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class=\"line\">startActivity(i);</div></pre></td></tr></table></figure>\n<h3 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@CallSuper</span></div><div class=\"line\"><span class=\"meta\">@StringRes</span></div><div class=\"line\"><span class=\"meta\">@DrawableRes</span></div><div class=\"line\"><span class=\"meta\">@CheckResult</span></div><div class=\"line\"><span class=\"meta\">@NonNull</span></div><div class=\"line\"><span class=\"meta\">@Nullable</span></div><div class=\"line\"><span class=\"meta\">@AnimatorRes</span></div><div class=\"line\"><span class=\"meta\">@AnimRes</span></div><div class=\"line\"><span class=\"meta\">@AnyRes</span></div><div class=\"line\"><span class=\"meta\">@AnyThread</span></div><div class=\"line\"><span class=\"meta\">@ArrayRes</span></div><div class=\"line\"><span class=\"meta\">@AttrRes</span></div><div class=\"line\"><span class=\"meta\">@BinderThread</span></div><div class=\"line\"><span class=\"meta\">@ColorRes</span></div><div class=\"line\"><span class=\"meta\">@ColorInt</span></div><div class=\"line\"><span class=\"meta\">@BoolRes</span></div><div class=\"line\"><span class=\"meta\">@DimenRes</span></div><div class=\"line\"><span class=\"meta\">@Dimension</span></div><div class=\"line\"><span class=\"meta\">@IdRes</span></div><div class=\"line\"><span class=\"meta\">@FloatRange</span></div><div class=\"line\"><span class=\"meta\">@FractionRes</span></div><div class=\"line\"><span class=\"meta\">@IntegerRes</span></div><div class=\"line\"><span class=\"meta\">@XmlRes</span></div></pre></td></tr></table></figure>\n<p><strong>关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白</strong></p>\n<p><a href=\"https://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md\">https://github.com/panyz/Blogs/blob/master/Android实战经验/关于Android7.0系统使用webview遇到的一个问题(二级跳转后界面空白).md</a></p>\n<p><strong>RecyclerView去掉滚动条和滑动到边界阴影</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">    android:id=<span class=\"string\">\"@+id/rv_search_one\"</span></div><div class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    android:overScrollMode=<span class=\"string\">\"never\"</span></div><div class=\"line\">    android:scrollbars=<span class=\"string\">\"none\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p><strong>设置屏幕常亮</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>使用PhotoView+Viewpager崩溃问题</strong></p>\n<p>java.lang.IllegalArgumentException: pointerIndex out of range</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义一个Viewpager，重写onInterceptTouchEvent函数，在里面捕获IllegalArgumentException</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhotoViewPager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.<span class=\"title\">view</span>.<span class=\"title\">ViewPager</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhotoViewPager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhotoViewPager</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>WebView自适应高度</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupWebView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            \t\twebView.loadUrl(<span class=\"string\">\"javascript:MyApp.resize(document.body.getBoundingClientRect().height)\"</span>);</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    webView.addJavascriptInterface(<span class=\"keyword\">this</span>, <span class=\"string\">\"MyApp\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@JavascriptInterface</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> height)</span> </span>&#123;</div><div class=\"line\">    MyActivity.<span class=\"keyword\">this</span>.runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            webView.setLayoutParams(<span class=\"keyword\">new</span> LinearLayout.LayoutParams(getResources().getDisplayMetrics().widthPixels, (<span class=\"keyword\">int</span>) (height * getResources().getDisplayMetrics().density)));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.bubuko.com/infodetail-1612451.html\">http://www.bubuko.com/infodetail-1612451.html</a></p>\n<p><strong>通过resId获取属性名</strong></p>\n<p>例：R.id.tv_hello = 0x7f080007</p>\n<p>当我们调用view的getId()时，我们能获取到0x7f080007，但有时我们需要获取到tv_hello这个属性名，可以使用下面的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String name = getResources().getResourceEntryName(id);</div></pre></td></tr></table></figure>\n<p><strong>使用AspectJ配置</strong></p>\n<p>使用网上的配置，在gradle版本为2.2.3时，不会出现问题，当切换到2.3.3时，会报</p>\n<p>No such property: project for class: com.android.build.gradle.LibraryPlugin，</p>\n<p>修复办法：不使用 LibraryPlugin 直接使用 project</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.libraryVariants.all &#123; variant -&gt;</div><div class=\"line\"><span class=\"comment\">//    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)</span></div><div class=\"line\">    JavaCompile javaCompile = variant.javaCompile</div><div class=\"line\">    javaCompile.doLast &#123;</div><div class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</div><div class=\"line\">                         <span class=\"string\">\"-1.5\"</span>,</div><div class=\"line\">                         <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</div><div class=\"line\">                         <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</div><div class=\"line\">                         <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</div><div class=\"line\">                         <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</div><div class=\"line\">                         <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(</div><div class=\"line\">                File.pathSeparator)]</div><div class=\"line\"></div><div class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler)</div><div class=\"line\"></div><div class=\"line\">        def log = project.<span class=\"function\">logger</div><div class=\"line\">        <span class=\"title\">for</span> <span class=\"params\">(IMessage message : handler.getMessages(<span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>)</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (message.getKind()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.ABORT:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.ERROR:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.FAIL:</div><div class=\"line\">                    log.error message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.WARNING:</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.INFO:</div><div class=\"line\">                    log.info message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> IMessage.DEBUG:</div><div class=\"line\">                    log.debug message.message, message.thrown</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>解决支持库版本兼容问题：</strong></p>\n<p>(all com.android.support libraries must use the exact same version specification)</p>\n<p>去改第三方库所用的支持库版本比较麻烦，如果用的库很多的话工作量很大。这个时候我们可以考虑强制让所有模块都用相同的支持库版本。</p>\n<p>在app build.gradle中添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">configurations.all &#123;</div><div class=\"line\">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</div><div class=\"line\">        def requested = details.<span class=\"function\">requested</div><div class=\"line\">        <span class=\"title\">if</span> <span class=\"params\">(requested.group == <span class=\"string\">'com.android.support'</span>)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!requested.name.startsWith(<span class=\"string\">\"multidex\"</span>)) &#123;</div><div class=\"line\">                details.useVersion <span class=\"string\">'25.3.1'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，25.3.1就是你要使用的支持库版本号，你可以根据需要改成其它的。</p>\n<p><a href=\"http://blog.csdn.net/u012730980/article/details/78390428\">error: style attribute ‘@android:attr/windowEnterAnimation’ not found.</a></p>\n<p>在Project/gradle.properties中添加 android.enableAapt2=false</p>\n<p><strong>解决Google Pixel Download Manager不在通知栏显示进度的BUG</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DownloadManager.Request request = <span class=\"keyword\">new</span> DownloadManager.Request(Download_Uri);</div><div class=\"line\"><span class=\"comment\">// 添加下面这行</span></div><div class=\"line\">request.setAllowedOverRoaming(<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<p><strong>解决Error:Some file crunching failed, see logs for details</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    compileSdkVersion <span class=\"number\">25</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">'25.0.3'</span></div><div class=\"line\">    useLibrary <span class=\"string\">'org.apache.http.legacy'</span></div><div class=\"line\"></div><div class=\"line\">    aaptOptions &#123;</div><div class=\"line\">        cruncherEnabled = <span class=\"keyword\">false</span></div><div class=\"line\">        useNewCruncher = <span class=\"keyword\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加aaptOptions一栏</p>\n"},{"title":"What's in iOS?","date":"2016-06-22T07:03:30.000Z","_content":"\n### What's is in iOS?\n\n![ios01](/img/swift/ios01.jpg)\n\n![ios02](/img/swift/ios02.jpg)\n\n![ios03](/img/swift/ios03.jpg)\n\n![ios04](/img/swift/ios04.jpg)\n\n### UIKIt\n\n#### bounds VS frame\n\n![ios05](/img/swift/ios05.jpg)\n\n> 在未设置bounds的情况下，bounds是相对于view自身坐标的，以view自身的左上角为原点(0,0)，如上图所示，不管怎么旋转view，bounds始终是一样的\n","source":"_posts/ios/ios-stanford.md","raw":"---\ntitle: What's in iOS?\ndate: 2016-06-22 15:03:30\ntags: [ios,stanford]\n---\n\n### What's is in iOS?\n\n![ios01](/img/swift/ios01.jpg)\n\n![ios02](/img/swift/ios02.jpg)\n\n![ios03](/img/swift/ios03.jpg)\n\n![ios04](/img/swift/ios04.jpg)\n\n### UIKIt\n\n#### bounds VS frame\n\n![ios05](/img/swift/ios05.jpg)\n\n> 在未设置bounds的情况下，bounds是相对于view自身坐标的，以view自身的左上角为原点(0,0)，如上图所示，不管怎么旋转view，bounds始终是一样的\n","slug":"ios/ios-stanford","published":1,"updated":"2017-02-06T09:05:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u6000xfq9mzg1bkvxl","content":"<h3 id=\"What’s-is-in-iOS\"><a href=\"#What’s-is-in-iOS\" class=\"headerlink\" title=\"What’s is in iOS?\"></a>What’s is in iOS?</h3><p><img src=\"/img/swift/ios01.jpg\" alt=\"ios01\"></p>\n<p><img src=\"/img/swift/ios02.jpg\" alt=\"ios02\"></p>\n<p><img src=\"/img/swift/ios03.jpg\" alt=\"ios03\"></p>\n<p><img src=\"/img/swift/ios04.jpg\" alt=\"ios04\"></p>\n<h3 id=\"UIKIt\"><a href=\"#UIKIt\" class=\"headerlink\" title=\"UIKIt\"></a>UIKIt</h3><h4 id=\"bounds-VS-frame\"><a href=\"#bounds-VS-frame\" class=\"headerlink\" title=\"bounds VS frame\"></a>bounds VS frame</h4><p><img src=\"/img/swift/ios05.jpg\" alt=\"ios05\"></p>\n<blockquote>\n<p>在未设置bounds的情况下，bounds是相对于view自身坐标的，以view自身的左上角为原点(0,0)，如上图所示，不管怎么旋转view，bounds始终是一样的</p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"What’s-is-in-iOS\"><a href=\"#What’s-is-in-iOS\" class=\"headerlink\" title=\"What’s is in iOS?\"></a>What’s is in iOS?</h3><p><img src=\"/img/swift/ios01.jpg\" alt=\"ios01\"></p>\n<p><img src=\"/img/swift/ios02.jpg\" alt=\"ios02\"></p>\n<p><img src=\"/img/swift/ios03.jpg\" alt=\"ios03\"></p>\n<p><img src=\"/img/swift/ios04.jpg\" alt=\"ios04\"></p>\n<h3 id=\"UIKIt\"><a href=\"#UIKIt\" class=\"headerlink\" title=\"UIKIt\"></a>UIKIt</h3><h4 id=\"bounds-VS-frame\"><a href=\"#bounds-VS-frame\" class=\"headerlink\" title=\"bounds VS frame\"></a>bounds VS frame</h4><p><img src=\"/img/swift/ios05.jpg\" alt=\"ios05\"></p>\n<blockquote>\n<p>在未设置bounds的情况下，bounds是相对于view自身坐标的，以view自身的左上角为原点(0,0)，如上图所示，不管怎么旋转view，bounds始终是一样的</p>\n</blockquote>\n"},{"title":"swift-record","date":"2016-06-22T07:03:30.000Z","_content":"\n### extension\n\n声明一个扩展使用关键字`extension`\n\n```swift\nextension SomeType{\n  //加到SomeType的新功能写到这里\n}\n```\n\n### indirect\n\n使用indirect来标识一个枚举是可以递归调用的\n\n### required\n\n在类的构造器前添加`required`修饰符表明所有该类的子类都必须实现该构造器，在子类重写父类的必要构造器时，必须在子类的构造器前也添加`required`修饰符，这是为了保证继承链上子类的构造器也是必要构造器。在重写父类的必要构造器时，不需要添加`override`修饰符\n\n### mutating\n\n一般情况下，值类型的属性不能在它的实例方法中被修改，`mutating`使得方法可以从方法内部改变它的属性；并且它做的任何改变在方法结束时还会保留在原始结构中。方法还可以给它隐含的`self`属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例。要使用`mutating`方法，将关键字`mutating`放到方法的`func`关键字之前就可以了\n\n### unowned\n\n使用`unowned`标识无主引用\n\n### weak\n\n使用`weak`标识弱引用\n\n### 类型属性\n\n在结构体和枚举中可以使用`static`来修饰静态变量，在类中可以使用`static`和`class`来修饰，使用`class`修饰来允许子类重写父类的实现方法","source":"_posts/ios/swift-record.md","raw":"---\ntitle: swift-record\ndate: 2016-06-22 15:03:30\ntags: ios\n---\n\n### extension\n\n声明一个扩展使用关键字`extension`\n\n```swift\nextension SomeType{\n  //加到SomeType的新功能写到这里\n}\n```\n\n### indirect\n\n使用indirect来标识一个枚举是可以递归调用的\n\n### required\n\n在类的构造器前添加`required`修饰符表明所有该类的子类都必须实现该构造器，在子类重写父类的必要构造器时，必须在子类的构造器前也添加`required`修饰符，这是为了保证继承链上子类的构造器也是必要构造器。在重写父类的必要构造器时，不需要添加`override`修饰符\n\n### mutating\n\n一般情况下，值类型的属性不能在它的实例方法中被修改，`mutating`使得方法可以从方法内部改变它的属性；并且它做的任何改变在方法结束时还会保留在原始结构中。方法还可以给它隐含的`self`属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例。要使用`mutating`方法，将关键字`mutating`放到方法的`func`关键字之前就可以了\n\n### unowned\n\n使用`unowned`标识无主引用\n\n### weak\n\n使用`weak`标识弱引用\n\n### 类型属性\n\n在结构体和枚举中可以使用`static`来修饰静态变量，在类中可以使用`static`和`class`来修饰，使用`class`修饰来允许子类重写父类的实现方法","slug":"ios/swift-record","published":1,"updated":"2016-12-23T08:48:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u6000zfq9mcr4q62dv","content":"<h3 id=\"extension\"><a href=\"#extension\" class=\"headerlink\" title=\"extension\"></a>extension</h3><p>声明一个扩展使用关键字<code>extension</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//加到SomeType的新功能写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"indirect\"><a href=\"#indirect\" class=\"headerlink\" title=\"indirect\"></a>indirect</h3><p>使用indirect来标识一个枚举是可以递归调用的</p>\n<h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\"required\"></a>required</h3><p>在类的构造器前添加<code>required</code>修饰符表明所有该类的子类都必须实现该构造器，在子类重写父类的必要构造器时，必须在子类的构造器前也添加<code>required</code>修饰符，这是为了保证继承链上子类的构造器也是必要构造器。在重写父类的必要构造器时，不需要添加<code>override</code>修饰符</p>\n<h3 id=\"mutating\"><a href=\"#mutating\" class=\"headerlink\" title=\"mutating\"></a>mutating</h3><p>一般情况下，值类型的属性不能在它的实例方法中被修改，<code>mutating</code>使得方法可以从方法内部改变它的属性；并且它做的任何改变在方法结束时还会保留在原始结构中。方法还可以给它隐含的<code>self</code>属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例。要使用<code>mutating</code>方法，将关键字<code>mutating</code>放到方法的<code>func</code>关键字之前就可以了</p>\n<h3 id=\"unowned\"><a href=\"#unowned\" class=\"headerlink\" title=\"unowned\"></a>unowned</h3><p>使用<code>unowned</code>标识无主引用</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>使用<code>weak</code>标识弱引用</p>\n<h3 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h3><p>在结构体和枚举中可以使用<code>static</code>来修饰静态变量，在类中可以使用<code>static</code>和<code>class</code>来修饰，使用<code>class</code>修饰来允许子类重写父类的实现方法</p>\n","excerpt":"","more":"<h3 id=\"extension\"><a href=\"#extension\" class=\"headerlink\" title=\"extension\"></a>extension</h3><p>声明一个扩展使用关键字<code>extension</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">SomeType</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//加到SomeType的新功能写到这里</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"indirect\"><a href=\"#indirect\" class=\"headerlink\" title=\"indirect\"></a>indirect</h3><p>使用indirect来标识一个枚举是可以递归调用的</p>\n<h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\"required\"></a>required</h3><p>在类的构造器前添加<code>required</code>修饰符表明所有该类的子类都必须实现该构造器，在子类重写父类的必要构造器时，必须在子类的构造器前也添加<code>required</code>修饰符，这是为了保证继承链上子类的构造器也是必要构造器。在重写父类的必要构造器时，不需要添加<code>override</code>修饰符</p>\n<h3 id=\"mutating\"><a href=\"#mutating\" class=\"headerlink\" title=\"mutating\"></a>mutating</h3><p>一般情况下，值类型的属性不能在它的实例方法中被修改，<code>mutating</code>使得方法可以从方法内部改变它的属性；并且它做的任何改变在方法结束时还会保留在原始结构中。方法还可以给它隐含的<code>self</code>属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例。要使用<code>mutating</code>方法，将关键字<code>mutating</code>放到方法的<code>func</code>关键字之前就可以了</p>\n<h3 id=\"unowned\"><a href=\"#unowned\" class=\"headerlink\" title=\"unowned\"></a>unowned</h3><p>使用<code>unowned</code>标识无主引用</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p>使用<code>weak</code>标识弱引用</p>\n<h3 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h3><p>在结构体和枚举中可以使用<code>static</code>来修饰静态变量，在类中可以使用<code>static</code>和<code>class</code>来修饰，使用<code>class</code>修饰来允许子类重写父类的实现方法</p>\n"},{"title":"Swift初见","date":"2016-05-21T09:48:59.000Z","_content":"\n# 概述\n\n> 本文摘至：《The Swift Programming Language》\n\nSwift是一种新的编程语言，用于编写ios，OS X和watch OS应用程序。Swift结合了C和Objective-C的优点并且不受C兼容性的限制。Swift采用安全的编程模式并添加了很多新特性，这将使编程更简单，更灵活，也更有趣。Swift是基于成熟而且倍受喜爱的Cocoa和Cocoa Touch框架，它的降临将重新定义软件开发。\n\n> 使用Playground编写Swift，可以实现查看。打开Xcode，创建一个Playground文件(File --> New --> Playground)。\n>\n> Tips:  把鼠标放在Playground的右边区域，会有个小眼睛的图标和一个小白圈，点击有惊喜\n\n![swift-playground](/img/swift/swift-playground.png)\n\n<!-- More -->\n\n画正弦 ![swift-sin](/img/swift/swift-sin.png)\n\n```swift\nvar num: Double\nfor i in 1...100 {\n    num = sin(Double(i) / 10)\n}\n```\n\n## Swift 初见\n\n通常来说，编程语言教程中的第一个程序应该在屏幕上打印\"Hello, world\"。在Swift中，可以用一行代码实现。\n\n```swift\nprint(\"Hello, world!\")\n```\n\n> 不同于java等语言，swift并不需要在语句结尾强制加上一个分号`;`。如果一行写2个语句，需要加上分号`;`\n\n```swift\nlet explicitFloat: Float = 70; let explicitDouble: Double = 4\n```\n\n### 简单值\n\n使用`let`来声明常量，使用`var`来声明变量。一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。类似java的final修饰的变量\n\n```swift\nvar myVariable = 42\nmyVariable = 50\nlet myConstant = 42\n```\n\n> 你不用明确的声明类型，声明的同时赋值的话，编译器会自动推断类型。在上面的例子中，编译器推断出 `myVariable`是一个整数(integer)，因为它的初始值是整数。\n\n如果 初始值没有提供足够的信息(或者没有初始值)，那你需要在变量后面声明类型，用冒号分割。\n\n```swift\nlet implicitInteger = 70\nlet implicitDouble = 70.0\nlet explicitDouble: Double = 70\nlet explicitFloat: Float = 4\n```\n\n值永远不会被隐式转换成其他类型。如果你需要把一个值转换成其它类型，请显示转换。\n\n```swift\nlet label = \"The width is\"\nlet width = 94\nlet widthLabel = label + String(width)\n```\n\n有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：\n\n```swift\nlet apples = 3\nlet oranges = 5\nlet appleSummary = \"I have \\(apples) apples.\"\nlet fruitSummary = \"I have \\(apples + oranges) pieces of fruit.\"\n```\n使用方括号`[]`来创建数组和字典，并使用下标或者键（key）来访问元素。最后一个元素后面允许有个逗号。\n\n```swift\nvar shoppingList = [\"Catfish\", \"water\", \"tulips\", \"blue paint\"]\nshoppingList[1] = \"bottle of water\"\nvar occupations = [\"Malcolm\": \"Captain\", \"Keylee\": \"Mechanic\",]\noccupations[\"Jayne\"] = \"Public Relations\"\n```\n\n要创建一个空数组或者字典，使用初始化语法。\n\n```swift\nlet emptyArray = [String]()\nlet emptyDictionary = [String: Float]()\n```\n\n如果类型信息可以被推断出来，你可以用`[]`和`[:]`来创建空数组和空字典 — 就像你声明变量或者给函数传参数的时候一样。\n\n```swift\nshoppingList = []\noccupations = [:]\n```\n\n### 控制流\n\n使用`if`和`switch`来进行条件操作，使用`for-in`、`for`、`while`和`repeat-while`来进行循环。包裹条件和循环变量括号可以省略，但是语句体的大括号是必须的。\n\n```swift\nlet individualScores = [75, 43, 103, 87, 12]\nvar teamScore = 0\nfor score in individualScores {\n    if score > 50 {\n        teamScore += 3\n    } else {\n        teamScore += 1\n    }\n}\nprint(teamScore) // 11\n```\n 在`if`语句中，条件必须是一个布尔表达式 — 这意味着像`if score { ... }`这样的代码将报错，而不会隐形的与 0 做对比。\n\n你可以一起使用`if`和`let`来处理缺失的情况。这些值可由可先值来代表。一个可选的值是一个具体的值或者是`nil`以表示值缺失。在类型后面加一个问号来标记这个变量的值是可选的。\n\n```swift\nvar optionalString: String? = \"Hello\"\nprint(optionalString == nil)\n\nvar optionalName: String? = \"John Appleseed\"\nvar greeting = \"Hello!\"\nif let name = optionalName {\n    greeting = \"Hello, \\(name)\"\n}\n```\n> `if  let name = optionalName `  这句的意思是：如果optionalName不是nil，就把值赋给 name，条件判断为 `true`，进入 if 语句块；如果optionalName为nil，条件会判断为 `false`，不进入 if  语句块\n\n`switch`支持任意类型的数据以及各种比较操作 — 不仅仅是整数以及测试相等。\n\n```swift\nlet vegetable = \"red pepper\"\nswitch vegetable {\n    case \"celery\":\n        print(\"Add some raisins and make ants on a log.\")\n    case \"cucumber\", \"watercress\":\n        print(\"That would make a good tea sandwich.\")\n    case let x where x.hasSuffix(\"pepper\"):\n        print(\"Is it a spicy \\(x)?\")\n    default:\n        print(\"Everything tastes good in soup.\")\n}\n// 打印 \"Is it a spicy red pepper?\"\n```\n\n> 不同于java ，swift的`case`语句不必加break。\n\n注意`let`在上述例子的等式中是如何使用的，它将匹配等式的值赋给常量`x`。`let x where x.hasSuffix(\"papper\")`这句话的意思是先把vegetable的值赋给`x`，如果赋值成功，再判断调用`hasSuffix`方法判断是否以`pepper`字符串结尾。\n\n运行`switch`中匹配到的子句之后，程序会退出switch语句，并不会继续向下运行，所以不需要在每个子句结尾写`break`。\n\n你可以使用`for-in`来遍历字典，需要两个变量来表示每个键值对。字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束。\n\n下面的程序演示了找出最大值的操作：\n\n```swift\nlet interestingNumbers = [\n    \"Prime\": [2, 3, 5, 7, 11, 13],\n    \"Fibonacci\": [1, 1, 2, 3, 5, 8],\n    \"Square\": [1, 4, 9, 16, 25]]\nvar largest = 0\nfor (kind, numbers) in interestingNumbers {\n    for number in numbers {\n        if number > largest {\n            largest = number\n        }\n    }\n}\nprint(largest) // 25\n```\n\n使用`while`来重复运行一段代码直到不满足条件。循环条件也可以在结尾，保证能至少循环一次。\n\n```swift\nvar n = 2\nwhile n < 100 {\n    n = n * 2\n}\nprint(n) // 128\n\nvar m = 2\nrepeat {\n    m = m * 2\n} while m < 100\nprint(m) // 128\n```\n\n你可以在循环中使用`..<`来表示范围，也可以使用传统的写法，两者是等价的：\n\n```swift\nvar firstForLoop = 0\nfor i in 0..<4{\n    firstForLoop += i\n}\nprint(firstForLoop) // 6\n\nvar secondForLoop = 0\nfor var i = 0; i < 4; ++i {\n    secondForLoop += i\n}\nprint(secondForLoop) // 6\n```\n\n### 函数和闭包\n\n使用`func`来声明一个函数，使用名字和参数来调用函数。使用`->`来指定函数返回值的类型。\n\n```swift\nfunc greet(name: String, day: String) -> String {\n    return \"Hello \\(name), today is \\(day).\"\n}\ngreet(\"Bob\", day: \"Tuesday\")\n```\n\n使用元组来让一个函数返回多个值。该元组的元素可以用名称或数字来表示。\n\n```swift\nfunc calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {\n    var min = scores[0]\n    var max = scores[0]\n    var sum = 0\n    for score in scores {\n        if score > max {\n            max = score\n        } else if score < min {\n            min = score\n        }\n        sum += score\n    }\n    return (min, max, sum)\n}\nlet statistics = calculateStatistics([5, 3, 100, 3, 9])\nprint(statistics.min)\nprint(statistics.max)\nprint(statistics.sum)\nprint(statistics.2)\n```\n\n函数可以带有可变个数的参数，这些参数的函数内表现为数组的形式：\n\n```swift\nfunc sumOf(numbers: Int...) -> Int {\n    var sum = 0\n    for number in numbers {\n        sum += number\n    }\n    return sum\n}\nsumOf()\nsumOf(42, 597, 12)\n```\n\n函数可以嵌套。被嵌套的函数可以访问外侧函数的变量，你可以使用嵌套函数来重构一个太长或者太复杂的函数 。\n\n```swift\nfunc returnFifteen() -> Int {\n    var y = 10\n    func add() {\n        y += 5\n    }\n    add()\n    return y\n}\nreturnFifteen()\n```\n\n函数是第一等类型，这意味着函数可以作为另一个函数的返回值。\n\n```swift\nfunc makeIncrementer() -> (Int -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n```\n\n函数也可以当做参数传入另一个函数。\n\n```swift\nfunc hasAnyMatches(list: [Int], condition: Int -> Bool) -> Bool {\n    for item in list {\n        if condition(item) {\n            return true\n        }\n    }\n    return false\n}\nfunc lessThanTen(number: Int) -> Bool {\n    return number < 10\n}\nvar numbers = [20, 19, 7, 12]\nhasAnyMatches(numbers, condition: lessThanTen)\n```\n\n函数实际上是一种特殊的闭包：它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数，即使闭包是在一个不同的作用域被执行的 — 你已经在嵌套函数例子中所看到。你可以使用`{}`来创建一个匿名闭包。使用`in`将参数和返回值类型声明与闭包函数体进行分离。\n\n```swift\nvar numbers = [20, 19, 7, 12]\nnumbers.map({\n    (number: Int) -> Int in\n    let result = 3 * number\n    return result\n})\n```\n\n有很多种创建更简洁的闭包的方法。如果一个闭包的类型已知，比如作为一个回调函数，你可以忽略参数的类型和返回值。单个语句闭包会把它语句的值当做结果返回。\n\n```swift\nlet mappedNumbers = numbers.map({ number in 3 * number })\nprint(mappedNumbers) // [60, 57, 21, 36]\n```\n\nswift内置了一组变量(`$0`、`$1`、`$2` …...)，上述代码还能更简单 \n\n```swift\nmappedNumbers = numbers.map({ $0 * 3 })\nprint(mappedNumbers)\n```\n\n你可以通过参数位置而不是参数名字引用 参数 — 这个方法在非常短的闭包中非常有用。当一个闭包作为最后一个参数传给一个函数的时候，它可以直接跟在括号后面。当一个闭包是传给函数的唯一参数，你可以完全忽略括号。\n\n```swift\nlet sortedNumbers = numbers.sort{ $0 > $1 }\nprint(sortedNumbers) // [20, 19, 12, 7]\n```\n\n### 对象和类\n\n使用`class`和类名来创建一个类。类中属性的声明和常量、变量声明一样，唯一的区别就是它们的上下文是类。同样，方法和函数声明也一样。\n\n```swift\nclass Shape {\n    var numberOfSides = 0\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n要创建一个类的实例，在类名后面加上括号。使用点语法来访问实例的属性和方法。\n\n```swift\nvar shape = Shape()\nshape.numberOfSides = 7\nvar shapeDescription = shape.simpleDescription()\n```\n\n这个版本的`Shape`类缺少了一些重要的东西：一个构造函数来初始化类实例。使用`init`来创建一个构造器。\n\n```swift\nclass NamesShape {\n    var numberOfSides: Int = 0\n    var name: String\n    init (name: String) {\n        self.name = name\n    }\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n注意`self`被用来区别实例变量。当你创建实例的时候，像传入函数参数一样给类传入构造器的参数。\n\n每个属性都需要赋值 — 无论是通过声明（就像`numberOfSides`）还是通过构造器（就像`name`）\n\n如果你需要在删除对象之前进行一些清理工作，使用`deinit`创建一个析构函数。\n\n子类的定义方法是在它们的类名后面加上父类的名字，用冒号分割。创建类的时候并不需要一个标准的根类，所以你可以忽略父类。\n\n子类如果要重写父类的方法的话，需要用`override`标记 — 如果没有添加`override`就重写父类的方法的话，编译器会报错。编译器同样会检测`override`标记的方法是否确实在父类中。\n\n```swift\nclass Square: NamesShape {\n    var sideLength: Double\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n\n    func area() -> Double {\n        return sideLength * sideLength\n    }\n    override func simpleDescription() -> String {\n        return \"A square with sides of length \\(sideLength).\"\n    }\n}\nlet test = Square(sideLength: 5.2, name: \"my test square\")\ntest.area() // 27.04\ntest.simpleDescription() // \"A square with sides of length 5.2\"\n```\n\n除了储存简单的属性之外，属性可以有 `getter`和`settter`。\n\n```swift\nclass EquilateralTriangle: NamesShape {\n    var sideLength: Double = 0.0\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n    var perimeter: Double {\n        get{\n            return 3.0 * sideLength\n        }\n        set {\n            sideLength = newValue / 3.0\n        }\n    }\n    override func simpleDescription() -> String {\n        return \"An equilateral triagle with sides of length \\(sideLength).\"\n    }\n}\nlet triangle = EquilateralTriangle(sideLength: 3.1, name: \"a triangle\")\nprint(triangle.perimeter) // 9.3\ntriangle.perimeter = 9.9\nprint(triangle.sideLength) // 3.3\n```\n\n在`perimeter`的`setter`中，新值的名字是`newValue`。你可以在`set`之后显示的设置一人名字。\n\n注意`EquilateralTriangle`类的构造器执行了三步：\n\n1. 设置子类声明的属性\n2. 调用父类的构造器\n3. 改变父类定义的属性值。其它的工作比如调用方法、getter和setter也可以在这个阶段完成。\n\n如果你不需要计算属性，但是仍然需要在设置一相新值之前或者之后运行代码，使用`willSet`和`didSet`。\n\n比如，下面的类确保三角形的边长总是和正方形的边长相同。\n\n```swift\nclass TriangleAndSquare {\n    var triangle: EquilateralTriangle {\n        willSet {\n            square.sideLength = newValue.sideLength\n        }\n    }\n    var square: Square {\n        willSet{\n            triangle.sideLength = newValue.sideLength\n        }\n    }\n    init(size: Double, name: String) {\n        square = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sideLength: size, name: name)\n    }\n}\nvar triangleAndSquare = TriangleAndSquare(size: 10, name: \"another test shape\")\nprint(triangleAndSquare.square.sideLength) // 10\nprint(triangleAndSquare.triangle.sideLength) // 10\ntriangleAndSquare.square = Square(sideLength: 50, name: \"larger square\")\nprint(triangleAndSquare.triangle.sideLength) // 50\n```\n\n处理变量的可选值时，你可以在操作（比如方法、属性和子脚本）之前加`?`。如果 `?`之前的值是`nil`，`?`后面的东西都会被忽略，并且整个表达式返回`nil`。否则，`?`之后的东西都会被运行。在这两种情况下，整个表达 式的值也是一个可选值。\n\n```swift\nlet optionalSquare: Square? = Square(sideLength: 2.5, name: \"optional square\")\nlet sideLength = optionalSquare?.sideLength\n```\n### 枚举和结构体\n\n使用`enum`来创建一个枚举。就像类的其他所有命名类型一样，枚举可以包含方法。\n\n```swift\nenum Rank: Int {\n    case Ace = 1\n    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten\n    case Jack, Queen, King\n    func simpleDescription() -> String {\n        switch self {\n        case .Ace:\n            return \"ace\"\n        case .Jack:\n            return \"jack\"\n        case .Queen:\n            return \"queen\"\n        case .King:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n}\nlet ace = Rank.Ace\nlet aceRawValue = ace.rawValue\n```\n\n在上面的例子中，枚举原始值的类型是`Int`，所以你只需要设置第一个原始值。剩下的原始值会按照顺序赋值。你也可以使用字符串或者浮点数作为枚举的原始值。使用`rawValue`属性来访问一个枚举成员的原始值。\n\n使用`init?(rawValue:) `初始化构造器在原始值和枚举值之间进行转换。\n\n```swift\nif let convertedRank = Rank(rawValue: 3) {\n    let threeDescription = convertedRank.simpleDescription()\n}\n```\n\n枚举的成员值是实际值，并不是原始值的另一种表达方法。实际上，以防原始值没有意义，你不需要设置。\n\n```swift\nenum Suit {\n    case Spades, Hearts, Diamonds, Clubs\n    func simpleDescription() -> String {\n        switch self {\n        case .Spades:\n            return \"spades\"\n        case .Hearts:\n            return \"hearts\"\n        case .Diamonds:\n            return \"diamonds\"\n        case .Clubs:\n            return \"clubs\"\n        }\n    }\n}\nlet hearts = Suit.Hearts\nlet heartsDescription = hearts.simpleDescription()\n```\n\n注意，有两种方式可以引用`Hearts`成员：给`hearts`常量赋值时，枚举成员`Suit.Hearts`需要用全名来引用，因为常量没有显式指定类型。在`switch`里，枚举成员使用缩写`.Hearts`来引用，因为`self`的值已经知道是一个`suit`。已知变量类型的情况下你可以使用缩写。\n\n使用`struct`来创建一个结构体。结构体和类有很多相同的地方，比如方法和构造器。它们之间最大的一个区别就是结构体是传值，类是传引用。\n\n```swift\nstruct Card {\n    var rank: Rank\n    var suit: Suit\n    func simpleDescription() -> String {\n        return \"The \\(rank.simpleDescription()) of \\(suit.simpleDescription())\"\n    }\n}\nlet threeOfSpades = Card(rank: .Three, suit: .Spades)\nlet threeOfSpadesDescription = threeOfSpades.simpleDescription()\n```\n\n一个枚举成员的实例可以有实例值。相同枚举成员的实例可以有不同的值。创建实例的时候传入值即可。实例值和原始值是不同的：枚举成员的原始值对于所有实例都是相同的，而且你是在定义枚举的时候设置原始值。\n\n例如，考虑从服务器获取日出和日落的时间。服务器会返回正常结果或者错误信息。\n\n```swift\nenum ServerResponse {\n    case Result(String, String)\n    case Error(String)\n}\nlet success = ServerResponse.Result(\"6:00 am\", \"8:09 pm\")\nlet failure = ServerResponse.Error(\"Out of cheese.\")\nswitch success {\ncase let .Result(sunrise, sunset):\n    let serverResponse = \"Sunrise is at \\(sunrise) and sunset is at \\(sunset).\"\ncase let .Error(error):\n    let serverResponse = \"Failure... \\(error)\"\n}\n```\n\n注意如何从`ServerResponse`中提取日升和日落时间并用得到的值用来和`switch`的情况做比较。\n\n### 协议和扩展\n\n使用`protocol`来声明一个协议。\n\n```swift\nprotocol ExampleProtocol {\n    var simpleDescription: String { get }\n    mutating func adjust()\n}\n```\n\n类、枚举和结构体都可以实现协议。\n\n```swift\nclass SimpleClass: ExampleProtocol {\n    var simpleDescription: String = \"A very simple class.\"\n    var anotherProperty: Int = 69105\n    func adjust() {\n        simpleDescription += \" Now 100% adjusted.\"\n    }\n}\nvar a = SimpleClass()\na.adjust()\nlet aDescription = a.simpleDescription\nstruct SimpleStructure: ExampleProtocol {\n    var simpleDescription: String = \"A simple structure\"\n    mutating func adjust() {\n        simpleDescription += \"(adjusted)\"\n    }\n}\nvar b = SimpleStructure()\nb.adjust()\nlet bDescription = b.simpleDescription\n```\n\n注意声明`SimpleStructure`时候`mutating`关键字用来标记一个会修改结构体的方法。`SimpleClass`的声明不需要标记任何方法，因为类中的方法通常可以修改类属性（类的性质）\n\n使用`extension`来为现有的类型添加功能，比如新的方法和计算属性。你可以使用扩展在别处修改定义，甚至是从外部库或者框架引入的一个类型，使得这个类型遵循某个协议。\n\n```swift\nextension Int: ExampleProtocol {\n    var simpleDescription: String {\n        return \"The number \\(self)\"\n    }\n    mutating func adjust() {\n        self += 42\n    }\n}\nprint(7.simpleDescription) // The number 7\n```\n\n你可以像使用其他命名类型一样使用协议名 — 例如，创建一个有不同类型但是都实现一个协议的对象集合。当你处理类型是协议的值时，协议外定义的方法不可用。\n\n```swift\nlet protocolValue: ExampleProtocol = a\nprint(protocolValue.simpleDescription) //A very simple class. Now 100% adjusted.\n```\n\n即使`protocolValue`变量运行时的类型是`simpleClass`，编译器会把它的类型当做`ExampleProtocol`。这表示你不能调用类在它实现的协议之外实现的方法或属性。\n\n### 泛型\n\n在尖括号里写一个名字来创建一个泛型函数或者类型。\n\n```swift\nfunc repeatItem<Item>(item: Item, numberOfTimes: Int) -> [Item] {\n    var result = [Item]()\n    for _ in 0..<numberOfTimes {\n        result.append(item)\n    }\n    return result\n}\nrepeatItem(\"knock\", numberOfTimes: 4) // [\"knock\", \"knock\", \"knock\", \"knock\"]\n```\n\n你也可以创建泛型函数 、方法、类、枚举和结构体。\n\n```swift\n// Reimplement the Swift standard library's optional type\nenum OptionalValue<Wrapped> {\n    case None\n    case Some(Wrapped)\n}\nvar possibleInteger: OptionalValue<Int> = .None\npossibleInteger = .Some(100)\n```\n\n在类型名后面的使用`where`来指定对类型的需求，比如，限定类型实现某一个协议，限定两个类型是相同的，或者限定某个类必须有一个特定的父类。\n\n```swift\nfunc anyCommonElements<T: SequenceType, U: SequenceType where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element>(lhs: T, _ rhs: U) -> Bool {\n    for lhsItem in lhs {\n        for rhsItem in rhs {\n            if lhsItem == rhsItem {\n                return true\n            }\n        }\n    }\n    return false\n}\nanyCommonElements([1, 2, 3], [3])\n```\n\n`<T: Equatable>`和`<T where T: Equatable>`是等价的。","source":"_posts/ios/swift-basic.md","raw":"---\ntitle: Swift初见\ndate: 2016-05-21 17:48:59\ntags: ios\n---\n\n# 概述\n\n> 本文摘至：《The Swift Programming Language》\n\nSwift是一种新的编程语言，用于编写ios，OS X和watch OS应用程序。Swift结合了C和Objective-C的优点并且不受C兼容性的限制。Swift采用安全的编程模式并添加了很多新特性，这将使编程更简单，更灵活，也更有趣。Swift是基于成熟而且倍受喜爱的Cocoa和Cocoa Touch框架，它的降临将重新定义软件开发。\n\n> 使用Playground编写Swift，可以实现查看。打开Xcode，创建一个Playground文件(File --> New --> Playground)。\n>\n> Tips:  把鼠标放在Playground的右边区域，会有个小眼睛的图标和一个小白圈，点击有惊喜\n\n![swift-playground](/img/swift/swift-playground.png)\n\n<!-- More -->\n\n画正弦 ![swift-sin](/img/swift/swift-sin.png)\n\n```swift\nvar num: Double\nfor i in 1...100 {\n    num = sin(Double(i) / 10)\n}\n```\n\n## Swift 初见\n\n通常来说，编程语言教程中的第一个程序应该在屏幕上打印\"Hello, world\"。在Swift中，可以用一行代码实现。\n\n```swift\nprint(\"Hello, world!\")\n```\n\n> 不同于java等语言，swift并不需要在语句结尾强制加上一个分号`;`。如果一行写2个语句，需要加上分号`;`\n\n```swift\nlet explicitFloat: Float = 70; let explicitDouble: Double = 4\n```\n\n### 简单值\n\n使用`let`来声明常量，使用`var`来声明变量。一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。类似java的final修饰的变量\n\n```swift\nvar myVariable = 42\nmyVariable = 50\nlet myConstant = 42\n```\n\n> 你不用明确的声明类型，声明的同时赋值的话，编译器会自动推断类型。在上面的例子中，编译器推断出 `myVariable`是一个整数(integer)，因为它的初始值是整数。\n\n如果 初始值没有提供足够的信息(或者没有初始值)，那你需要在变量后面声明类型，用冒号分割。\n\n```swift\nlet implicitInteger = 70\nlet implicitDouble = 70.0\nlet explicitDouble: Double = 70\nlet explicitFloat: Float = 4\n```\n\n值永远不会被隐式转换成其他类型。如果你需要把一个值转换成其它类型，请显示转换。\n\n```swift\nlet label = \"The width is\"\nlet width = 94\nlet widthLabel = label + String(width)\n```\n\n有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：\n\n```swift\nlet apples = 3\nlet oranges = 5\nlet appleSummary = \"I have \\(apples) apples.\"\nlet fruitSummary = \"I have \\(apples + oranges) pieces of fruit.\"\n```\n使用方括号`[]`来创建数组和字典，并使用下标或者键（key）来访问元素。最后一个元素后面允许有个逗号。\n\n```swift\nvar shoppingList = [\"Catfish\", \"water\", \"tulips\", \"blue paint\"]\nshoppingList[1] = \"bottle of water\"\nvar occupations = [\"Malcolm\": \"Captain\", \"Keylee\": \"Mechanic\",]\noccupations[\"Jayne\"] = \"Public Relations\"\n```\n\n要创建一个空数组或者字典，使用初始化语法。\n\n```swift\nlet emptyArray = [String]()\nlet emptyDictionary = [String: Float]()\n```\n\n如果类型信息可以被推断出来，你可以用`[]`和`[:]`来创建空数组和空字典 — 就像你声明变量或者给函数传参数的时候一样。\n\n```swift\nshoppingList = []\noccupations = [:]\n```\n\n### 控制流\n\n使用`if`和`switch`来进行条件操作，使用`for-in`、`for`、`while`和`repeat-while`来进行循环。包裹条件和循环变量括号可以省略，但是语句体的大括号是必须的。\n\n```swift\nlet individualScores = [75, 43, 103, 87, 12]\nvar teamScore = 0\nfor score in individualScores {\n    if score > 50 {\n        teamScore += 3\n    } else {\n        teamScore += 1\n    }\n}\nprint(teamScore) // 11\n```\n 在`if`语句中，条件必须是一个布尔表达式 — 这意味着像`if score { ... }`这样的代码将报错，而不会隐形的与 0 做对比。\n\n你可以一起使用`if`和`let`来处理缺失的情况。这些值可由可先值来代表。一个可选的值是一个具体的值或者是`nil`以表示值缺失。在类型后面加一个问号来标记这个变量的值是可选的。\n\n```swift\nvar optionalString: String? = \"Hello\"\nprint(optionalString == nil)\n\nvar optionalName: String? = \"John Appleseed\"\nvar greeting = \"Hello!\"\nif let name = optionalName {\n    greeting = \"Hello, \\(name)\"\n}\n```\n> `if  let name = optionalName `  这句的意思是：如果optionalName不是nil，就把值赋给 name，条件判断为 `true`，进入 if 语句块；如果optionalName为nil，条件会判断为 `false`，不进入 if  语句块\n\n`switch`支持任意类型的数据以及各种比较操作 — 不仅仅是整数以及测试相等。\n\n```swift\nlet vegetable = \"red pepper\"\nswitch vegetable {\n    case \"celery\":\n        print(\"Add some raisins and make ants on a log.\")\n    case \"cucumber\", \"watercress\":\n        print(\"That would make a good tea sandwich.\")\n    case let x where x.hasSuffix(\"pepper\"):\n        print(\"Is it a spicy \\(x)?\")\n    default:\n        print(\"Everything tastes good in soup.\")\n}\n// 打印 \"Is it a spicy red pepper?\"\n```\n\n> 不同于java ，swift的`case`语句不必加break。\n\n注意`let`在上述例子的等式中是如何使用的，它将匹配等式的值赋给常量`x`。`let x where x.hasSuffix(\"papper\")`这句话的意思是先把vegetable的值赋给`x`，如果赋值成功，再判断调用`hasSuffix`方法判断是否以`pepper`字符串结尾。\n\n运行`switch`中匹配到的子句之后，程序会退出switch语句，并不会继续向下运行，所以不需要在每个子句结尾写`break`。\n\n你可以使用`for-in`来遍历字典，需要两个变量来表示每个键值对。字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束。\n\n下面的程序演示了找出最大值的操作：\n\n```swift\nlet interestingNumbers = [\n    \"Prime\": [2, 3, 5, 7, 11, 13],\n    \"Fibonacci\": [1, 1, 2, 3, 5, 8],\n    \"Square\": [1, 4, 9, 16, 25]]\nvar largest = 0\nfor (kind, numbers) in interestingNumbers {\n    for number in numbers {\n        if number > largest {\n            largest = number\n        }\n    }\n}\nprint(largest) // 25\n```\n\n使用`while`来重复运行一段代码直到不满足条件。循环条件也可以在结尾，保证能至少循环一次。\n\n```swift\nvar n = 2\nwhile n < 100 {\n    n = n * 2\n}\nprint(n) // 128\n\nvar m = 2\nrepeat {\n    m = m * 2\n} while m < 100\nprint(m) // 128\n```\n\n你可以在循环中使用`..<`来表示范围，也可以使用传统的写法，两者是等价的：\n\n```swift\nvar firstForLoop = 0\nfor i in 0..<4{\n    firstForLoop += i\n}\nprint(firstForLoop) // 6\n\nvar secondForLoop = 0\nfor var i = 0; i < 4; ++i {\n    secondForLoop += i\n}\nprint(secondForLoop) // 6\n```\n\n### 函数和闭包\n\n使用`func`来声明一个函数，使用名字和参数来调用函数。使用`->`来指定函数返回值的类型。\n\n```swift\nfunc greet(name: String, day: String) -> String {\n    return \"Hello \\(name), today is \\(day).\"\n}\ngreet(\"Bob\", day: \"Tuesday\")\n```\n\n使用元组来让一个函数返回多个值。该元组的元素可以用名称或数字来表示。\n\n```swift\nfunc calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {\n    var min = scores[0]\n    var max = scores[0]\n    var sum = 0\n    for score in scores {\n        if score > max {\n            max = score\n        } else if score < min {\n            min = score\n        }\n        sum += score\n    }\n    return (min, max, sum)\n}\nlet statistics = calculateStatistics([5, 3, 100, 3, 9])\nprint(statistics.min)\nprint(statistics.max)\nprint(statistics.sum)\nprint(statistics.2)\n```\n\n函数可以带有可变个数的参数，这些参数的函数内表现为数组的形式：\n\n```swift\nfunc sumOf(numbers: Int...) -> Int {\n    var sum = 0\n    for number in numbers {\n        sum += number\n    }\n    return sum\n}\nsumOf()\nsumOf(42, 597, 12)\n```\n\n函数可以嵌套。被嵌套的函数可以访问外侧函数的变量，你可以使用嵌套函数来重构一个太长或者太复杂的函数 。\n\n```swift\nfunc returnFifteen() -> Int {\n    var y = 10\n    func add() {\n        y += 5\n    }\n    add()\n    return y\n}\nreturnFifteen()\n```\n\n函数是第一等类型，这意味着函数可以作为另一个函数的返回值。\n\n```swift\nfunc makeIncrementer() -> (Int -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nvar increment = makeIncrementer()\nincrement(7)\n```\n\n函数也可以当做参数传入另一个函数。\n\n```swift\nfunc hasAnyMatches(list: [Int], condition: Int -> Bool) -> Bool {\n    for item in list {\n        if condition(item) {\n            return true\n        }\n    }\n    return false\n}\nfunc lessThanTen(number: Int) -> Bool {\n    return number < 10\n}\nvar numbers = [20, 19, 7, 12]\nhasAnyMatches(numbers, condition: lessThanTen)\n```\n\n函数实际上是一种特殊的闭包：它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数，即使闭包是在一个不同的作用域被执行的 — 你已经在嵌套函数例子中所看到。你可以使用`{}`来创建一个匿名闭包。使用`in`将参数和返回值类型声明与闭包函数体进行分离。\n\n```swift\nvar numbers = [20, 19, 7, 12]\nnumbers.map({\n    (number: Int) -> Int in\n    let result = 3 * number\n    return result\n})\n```\n\n有很多种创建更简洁的闭包的方法。如果一个闭包的类型已知，比如作为一个回调函数，你可以忽略参数的类型和返回值。单个语句闭包会把它语句的值当做结果返回。\n\n```swift\nlet mappedNumbers = numbers.map({ number in 3 * number })\nprint(mappedNumbers) // [60, 57, 21, 36]\n```\n\nswift内置了一组变量(`$0`、`$1`、`$2` …...)，上述代码还能更简单 \n\n```swift\nmappedNumbers = numbers.map({ $0 * 3 })\nprint(mappedNumbers)\n```\n\n你可以通过参数位置而不是参数名字引用 参数 — 这个方法在非常短的闭包中非常有用。当一个闭包作为最后一个参数传给一个函数的时候，它可以直接跟在括号后面。当一个闭包是传给函数的唯一参数，你可以完全忽略括号。\n\n```swift\nlet sortedNumbers = numbers.sort{ $0 > $1 }\nprint(sortedNumbers) // [20, 19, 12, 7]\n```\n\n### 对象和类\n\n使用`class`和类名来创建一个类。类中属性的声明和常量、变量声明一样，唯一的区别就是它们的上下文是类。同样，方法和函数声明也一样。\n\n```swift\nclass Shape {\n    var numberOfSides = 0\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n要创建一个类的实例，在类名后面加上括号。使用点语法来访问实例的属性和方法。\n\n```swift\nvar shape = Shape()\nshape.numberOfSides = 7\nvar shapeDescription = shape.simpleDescription()\n```\n\n这个版本的`Shape`类缺少了一些重要的东西：一个构造函数来初始化类实例。使用`init`来创建一个构造器。\n\n```swift\nclass NamesShape {\n    var numberOfSides: Int = 0\n    var name: String\n    init (name: String) {\n        self.name = name\n    }\n    func simpleDescription() -> String {\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n```\n\n注意`self`被用来区别实例变量。当你创建实例的时候，像传入函数参数一样给类传入构造器的参数。\n\n每个属性都需要赋值 — 无论是通过声明（就像`numberOfSides`）还是通过构造器（就像`name`）\n\n如果你需要在删除对象之前进行一些清理工作，使用`deinit`创建一个析构函数。\n\n子类的定义方法是在它们的类名后面加上父类的名字，用冒号分割。创建类的时候并不需要一个标准的根类，所以你可以忽略父类。\n\n子类如果要重写父类的方法的话，需要用`override`标记 — 如果没有添加`override`就重写父类的方法的话，编译器会报错。编译器同样会检测`override`标记的方法是否确实在父类中。\n\n```swift\nclass Square: NamesShape {\n    var sideLength: Double\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n\n    func area() -> Double {\n        return sideLength * sideLength\n    }\n    override func simpleDescription() -> String {\n        return \"A square with sides of length \\(sideLength).\"\n    }\n}\nlet test = Square(sideLength: 5.2, name: \"my test square\")\ntest.area() // 27.04\ntest.simpleDescription() // \"A square with sides of length 5.2\"\n```\n\n除了储存简单的属性之外，属性可以有 `getter`和`settter`。\n\n```swift\nclass EquilateralTriangle: NamesShape {\n    var sideLength: Double = 0.0\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n    var perimeter: Double {\n        get{\n            return 3.0 * sideLength\n        }\n        set {\n            sideLength = newValue / 3.0\n        }\n    }\n    override func simpleDescription() -> String {\n        return \"An equilateral triagle with sides of length \\(sideLength).\"\n    }\n}\nlet triangle = EquilateralTriangle(sideLength: 3.1, name: \"a triangle\")\nprint(triangle.perimeter) // 9.3\ntriangle.perimeter = 9.9\nprint(triangle.sideLength) // 3.3\n```\n\n在`perimeter`的`setter`中，新值的名字是`newValue`。你可以在`set`之后显示的设置一人名字。\n\n注意`EquilateralTriangle`类的构造器执行了三步：\n\n1. 设置子类声明的属性\n2. 调用父类的构造器\n3. 改变父类定义的属性值。其它的工作比如调用方法、getter和setter也可以在这个阶段完成。\n\n如果你不需要计算属性，但是仍然需要在设置一相新值之前或者之后运行代码，使用`willSet`和`didSet`。\n\n比如，下面的类确保三角形的边长总是和正方形的边长相同。\n\n```swift\nclass TriangleAndSquare {\n    var triangle: EquilateralTriangle {\n        willSet {\n            square.sideLength = newValue.sideLength\n        }\n    }\n    var square: Square {\n        willSet{\n            triangle.sideLength = newValue.sideLength\n        }\n    }\n    init(size: Double, name: String) {\n        square = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sideLength: size, name: name)\n    }\n}\nvar triangleAndSquare = TriangleAndSquare(size: 10, name: \"another test shape\")\nprint(triangleAndSquare.square.sideLength) // 10\nprint(triangleAndSquare.triangle.sideLength) // 10\ntriangleAndSquare.square = Square(sideLength: 50, name: \"larger square\")\nprint(triangleAndSquare.triangle.sideLength) // 50\n```\n\n处理变量的可选值时，你可以在操作（比如方法、属性和子脚本）之前加`?`。如果 `?`之前的值是`nil`，`?`后面的东西都会被忽略，并且整个表达式返回`nil`。否则，`?`之后的东西都会被运行。在这两种情况下，整个表达 式的值也是一个可选值。\n\n```swift\nlet optionalSquare: Square? = Square(sideLength: 2.5, name: \"optional square\")\nlet sideLength = optionalSquare?.sideLength\n```\n### 枚举和结构体\n\n使用`enum`来创建一个枚举。就像类的其他所有命名类型一样，枚举可以包含方法。\n\n```swift\nenum Rank: Int {\n    case Ace = 1\n    case Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten\n    case Jack, Queen, King\n    func simpleDescription() -> String {\n        switch self {\n        case .Ace:\n            return \"ace\"\n        case .Jack:\n            return \"jack\"\n        case .Queen:\n            return \"queen\"\n        case .King:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n}\nlet ace = Rank.Ace\nlet aceRawValue = ace.rawValue\n```\n\n在上面的例子中，枚举原始值的类型是`Int`，所以你只需要设置第一个原始值。剩下的原始值会按照顺序赋值。你也可以使用字符串或者浮点数作为枚举的原始值。使用`rawValue`属性来访问一个枚举成员的原始值。\n\n使用`init?(rawValue:) `初始化构造器在原始值和枚举值之间进行转换。\n\n```swift\nif let convertedRank = Rank(rawValue: 3) {\n    let threeDescription = convertedRank.simpleDescription()\n}\n```\n\n枚举的成员值是实际值，并不是原始值的另一种表达方法。实际上，以防原始值没有意义，你不需要设置。\n\n```swift\nenum Suit {\n    case Spades, Hearts, Diamonds, Clubs\n    func simpleDescription() -> String {\n        switch self {\n        case .Spades:\n            return \"spades\"\n        case .Hearts:\n            return \"hearts\"\n        case .Diamonds:\n            return \"diamonds\"\n        case .Clubs:\n            return \"clubs\"\n        }\n    }\n}\nlet hearts = Suit.Hearts\nlet heartsDescription = hearts.simpleDescription()\n```\n\n注意，有两种方式可以引用`Hearts`成员：给`hearts`常量赋值时，枚举成员`Suit.Hearts`需要用全名来引用，因为常量没有显式指定类型。在`switch`里，枚举成员使用缩写`.Hearts`来引用，因为`self`的值已经知道是一个`suit`。已知变量类型的情况下你可以使用缩写。\n\n使用`struct`来创建一个结构体。结构体和类有很多相同的地方，比如方法和构造器。它们之间最大的一个区别就是结构体是传值，类是传引用。\n\n```swift\nstruct Card {\n    var rank: Rank\n    var suit: Suit\n    func simpleDescription() -> String {\n        return \"The \\(rank.simpleDescription()) of \\(suit.simpleDescription())\"\n    }\n}\nlet threeOfSpades = Card(rank: .Three, suit: .Spades)\nlet threeOfSpadesDescription = threeOfSpades.simpleDescription()\n```\n\n一个枚举成员的实例可以有实例值。相同枚举成员的实例可以有不同的值。创建实例的时候传入值即可。实例值和原始值是不同的：枚举成员的原始值对于所有实例都是相同的，而且你是在定义枚举的时候设置原始值。\n\n例如，考虑从服务器获取日出和日落的时间。服务器会返回正常结果或者错误信息。\n\n```swift\nenum ServerResponse {\n    case Result(String, String)\n    case Error(String)\n}\nlet success = ServerResponse.Result(\"6:00 am\", \"8:09 pm\")\nlet failure = ServerResponse.Error(\"Out of cheese.\")\nswitch success {\ncase let .Result(sunrise, sunset):\n    let serverResponse = \"Sunrise is at \\(sunrise) and sunset is at \\(sunset).\"\ncase let .Error(error):\n    let serverResponse = \"Failure... \\(error)\"\n}\n```\n\n注意如何从`ServerResponse`中提取日升和日落时间并用得到的值用来和`switch`的情况做比较。\n\n### 协议和扩展\n\n使用`protocol`来声明一个协议。\n\n```swift\nprotocol ExampleProtocol {\n    var simpleDescription: String { get }\n    mutating func adjust()\n}\n```\n\n类、枚举和结构体都可以实现协议。\n\n```swift\nclass SimpleClass: ExampleProtocol {\n    var simpleDescription: String = \"A very simple class.\"\n    var anotherProperty: Int = 69105\n    func adjust() {\n        simpleDescription += \" Now 100% adjusted.\"\n    }\n}\nvar a = SimpleClass()\na.adjust()\nlet aDescription = a.simpleDescription\nstruct SimpleStructure: ExampleProtocol {\n    var simpleDescription: String = \"A simple structure\"\n    mutating func adjust() {\n        simpleDescription += \"(adjusted)\"\n    }\n}\nvar b = SimpleStructure()\nb.adjust()\nlet bDescription = b.simpleDescription\n```\n\n注意声明`SimpleStructure`时候`mutating`关键字用来标记一个会修改结构体的方法。`SimpleClass`的声明不需要标记任何方法，因为类中的方法通常可以修改类属性（类的性质）\n\n使用`extension`来为现有的类型添加功能，比如新的方法和计算属性。你可以使用扩展在别处修改定义，甚至是从外部库或者框架引入的一个类型，使得这个类型遵循某个协议。\n\n```swift\nextension Int: ExampleProtocol {\n    var simpleDescription: String {\n        return \"The number \\(self)\"\n    }\n    mutating func adjust() {\n        self += 42\n    }\n}\nprint(7.simpleDescription) // The number 7\n```\n\n你可以像使用其他命名类型一样使用协议名 — 例如，创建一个有不同类型但是都实现一个协议的对象集合。当你处理类型是协议的值时，协议外定义的方法不可用。\n\n```swift\nlet protocolValue: ExampleProtocol = a\nprint(protocolValue.simpleDescription) //A very simple class. Now 100% adjusted.\n```\n\n即使`protocolValue`变量运行时的类型是`simpleClass`，编译器会把它的类型当做`ExampleProtocol`。这表示你不能调用类在它实现的协议之外实现的方法或属性。\n\n### 泛型\n\n在尖括号里写一个名字来创建一个泛型函数或者类型。\n\n```swift\nfunc repeatItem<Item>(item: Item, numberOfTimes: Int) -> [Item] {\n    var result = [Item]()\n    for _ in 0..<numberOfTimes {\n        result.append(item)\n    }\n    return result\n}\nrepeatItem(\"knock\", numberOfTimes: 4) // [\"knock\", \"knock\", \"knock\", \"knock\"]\n```\n\n你也可以创建泛型函数 、方法、类、枚举和结构体。\n\n```swift\n// Reimplement the Swift standard library's optional type\nenum OptionalValue<Wrapped> {\n    case None\n    case Some(Wrapped)\n}\nvar possibleInteger: OptionalValue<Int> = .None\npossibleInteger = .Some(100)\n```\n\n在类型名后面的使用`where`来指定对类型的需求，比如，限定类型实现某一个协议，限定两个类型是相同的，或者限定某个类必须有一个特定的父类。\n\n```swift\nfunc anyCommonElements<T: SequenceType, U: SequenceType where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element>(lhs: T, _ rhs: U) -> Bool {\n    for lhsItem in lhs {\n        for rhsItem in rhs {\n            if lhsItem == rhsItem {\n                return true\n            }\n        }\n    }\n    return false\n}\nanyCommonElements([1, 2, 3], [3])\n```\n\n`<T: Equatable>`和`<T where T: Equatable>`是等价的。","slug":"ios/swift-basic","published":1,"updated":"2016-12-23T08:48:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u70012fq9mlo41ruz4","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>本文摘至：《The Swift Programming Language》</p>\n</blockquote>\n<p>Swift是一种新的编程语言，用于编写ios，OS X和watch OS应用程序。Swift结合了C和Objective-C的优点并且不受C兼容性的限制。Swift采用安全的编程模式并添加了很多新特性，这将使编程更简单，更灵活，也更有趣。Swift是基于成熟而且倍受喜爱的Cocoa和Cocoa Touch框架，它的降临将重新定义软件开发。</p>\n<blockquote>\n<p>使用Playground编写Swift，可以实现查看。打开Xcode，创建一个Playground文件(File –&gt; New –&gt; Playground)。</p>\n<p>Tips:  把鼠标放在Playground的右边区域，会有个小眼睛的图标和一个小白圈，点击有惊喜</p>\n</blockquote>\n<p><img src=\"/img/swift/swift-playground.png\" alt=\"swift-playground\"></p>\n<a id=\"more\"></a>\n<p>画正弦 <img src=\"/img/swift/swift-sin.png\" alt=\"swift-sin\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"type\">Double</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">100</span> &#123;</div><div class=\"line\">    num = sin(<span class=\"type\">Double</span>(i) / <span class=\"number\">10</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Swift-初见\"><a href=\"#Swift-初见\" class=\"headerlink\" title=\"Swift 初见\"></a>Swift 初见</h2><p>通常来说，编程语言教程中的第一个程序应该在屏幕上打印”Hello, world”。在Swift中，可以用一行代码实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Hello, world!\"</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>不同于java等语言，swift并不需要在语句结尾强制加上一个分号<code>;</code>。如果一行写2个语句，需要加上分号<code>;</code></p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> explicitFloat: <span class=\"type\">Float</span> = <span class=\"number\">70</span>; <span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<h3 id=\"简单值\"><a href=\"#简单值\" class=\"headerlink\" title=\"简单值\"></a>简单值</h3><p>使用<code>let</code>来声明常量，使用<code>var</code>来声明变量。一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。类似java的final修饰的变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVariable = <span class=\"number\">42</span></div><div class=\"line\">myVariable = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"keyword\">let</span> myConstant = <span class=\"number\">42</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>你不用明确的声明类型，声明的同时赋值的话，编译器会自动推断类型。在上面的例子中，编译器推断出 <code>myVariable</code>是一个整数(integer)，因为它的初始值是整数。</p>\n</blockquote>\n<p>如果 初始值没有提供足够的信息(或者没有初始值)，那你需要在变量后面声明类型，用冒号分割。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> implicitInteger = <span class=\"number\">70</span></div><div class=\"line\"><span class=\"keyword\">let</span> implicitDouble = <span class=\"number\">70.0</span></div><div class=\"line\"><span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">70</span></div><div class=\"line\"><span class=\"keyword\">let</span> explicitFloat: <span class=\"type\">Float</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>值永远不会被隐式转换成其他类型。如果你需要把一个值转换成其它类型，请显示转换。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> label = <span class=\"string\">\"The width is\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> width = <span class=\"number\">94</span></div><div class=\"line\"><span class=\"keyword\">let</span> widthLabel = label + <span class=\"type\">String</span>(width)</div></pre></td></tr></table></figure>\n<p>有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apples = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> oranges = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">let</span> appleSummary = <span class=\"string\">\"I have \\(apples) apples.\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> fruitSummary = <span class=\"string\">\"I have \\(apples + oranges) pieces of fruit.\"</span></div></pre></td></tr></table></figure>\n<p>使用方括号<code>[]</code>来创建数组和字典，并使用下标或者键（key）来访问元素。最后一个元素后面允许有个逗号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"Catfish\"</span>, <span class=\"string\">\"water\"</span>, <span class=\"string\">\"tulips\"</span>, <span class=\"string\">\"blue paint\"</span>]</div><div class=\"line\">shoppingList[<span class=\"number\">1</span>] = <span class=\"string\">\"bottle of water\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> occupations = [<span class=\"string\">\"Malcolm\"</span>: <span class=\"string\">\"Captain\"</span>, <span class=\"string\">\"Keylee\"</span>: <span class=\"string\">\"Mechanic\"</span>,]</div><div class=\"line\">occupations[<span class=\"string\">\"Jayne\"</span>] = <span class=\"string\">\"Public Relations\"</span></div></pre></td></tr></table></figure>\n<p>要创建一个空数组或者字典，使用初始化语法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> emptyArray = [<span class=\"type\">String</span>]()</div><div class=\"line\"><span class=\"keyword\">let</span> emptyDictionary = [<span class=\"type\">String</span>: <span class=\"type\">Float</span>]()</div></pre></td></tr></table></figure>\n<p>如果类型信息可以被推断出来，你可以用<code>[]</code>和<code>[:]</code>来创建空数组和空字典 — 就像你声明变量或者给函数传参数的时候一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList = []</div><div class=\"line\">occupations = [:]</div></pre></td></tr></table></figure>\n<h3 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h3><p>使用<code>if</code>和<code>switch</code>来进行条件操作，使用<code>for-in</code>、<code>for</code>、<code>while</code>和<code>repeat-while</code>来进行循环。包裹条件和循环变量括号可以省略，但是语句体的大括号是必须的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> individualScores = [<span class=\"number\">75</span>, <span class=\"number\">43</span>, <span class=\"number\">103</span>, <span class=\"number\">87</span>, <span class=\"number\">12</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> teamScore = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> individualScores &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> score &gt; <span class=\"number\">50</span> &#123;</div><div class=\"line\">        teamScore += <span class=\"number\">3</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        teamScore += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(teamScore) <span class=\"comment\">// 11</span></div></pre></td></tr></table></figure>\n<p> 在<code>if</code>语句中，条件必须是一个布尔表达式 — 这意味着像<code>if score { ... }</code>这样的代码将报错，而不会隐形的与 0 做对比。</p>\n<p>你可以一起使用<code>if</code>和<code>let</code>来处理缺失的情况。这些值可由可先值来代表。一个可选的值是一个具体的值或者是<code>nil</code>以表示值缺失。在类型后面加一个问号来标记这个变量的值是可选的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> optionalString: <span class=\"type\">String</span>? = <span class=\"string\">\"Hello\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(optionalString == <span class=\"literal\">nil</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> optionalName: <span class=\"type\">String</span>? = <span class=\"string\">\"John Appleseed\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name = optionalName &#123;</div><div class=\"line\">    greeting = <span class=\"string\">\"Hello, \\(name)\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>if  let name = optionalName</code>  这句的意思是：如果optionalName不是nil，就把值赋给 name，条件判断为 <code>true</code>，进入 if 语句块；如果optionalName为nil，条件会判断为 <code>false</code>，不进入 if  语句块</p>\n</blockquote>\n<p><code>switch</code>支持任意类型的数据以及各种比较操作 — 不仅仅是整数以及测试相等。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> vegetable = <span class=\"string\">\"red pepper\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> vegetable &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"celery\"</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Add some raisins and make ants on a log.\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"cucumber\"</span>, <span class=\"string\">\"watercress\"</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"That would make a good tea sandwich.\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x.hasSuffix(<span class=\"string\">\"pepper\"</span>):</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Is it a spicy \\(x)?\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Everything tastes good in soup.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Is it a spicy red pepper?\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>不同于java ，swift的<code>case</code>语句不必加break。</p>\n</blockquote>\n<p>注意<code>let</code>在上述例子的等式中是如何使用的，它将匹配等式的值赋给常量<code>x</code>。<code>let x where x.hasSuffix(&quot;papper&quot;)</code>这句话的意思是先把vegetable的值赋给<code>x</code>，如果赋值成功，再判断调用<code>hasSuffix</code>方法判断是否以<code>pepper</code>字符串结尾。</p>\n<p>运行<code>switch</code>中匹配到的子句之后，程序会退出switch语句，并不会继续向下运行，所以不需要在每个子句结尾写<code>break</code>。</p>\n<p>你可以使用<code>for-in</code>来遍历字典，需要两个变量来表示每个键值对。字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束。</p>\n<p>下面的程序演示了找出最大值的操作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> interestingNumbers = [</div><div class=\"line\">    <span class=\"string\">\"Prime\"</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>],</div><div class=\"line\">    <span class=\"string\">\"Fibonacci\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</div><div class=\"line\">    <span class=\"string\">\"Square\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> largest = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> (kind, numbers) <span class=\"keyword\">in</span> interestingNumbers &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &gt; largest &#123;</div><div class=\"line\">            largest = number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(largest) <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<p>使用<code>while</code>来重复运行一段代码直到不满足条件。循环条件也可以在结尾，保证能至少循环一次。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">100</span> &#123;</div><div class=\"line\">    n = n * <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(n) <span class=\"comment\">// 128</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">repeat</span> &#123;</div><div class=\"line\">    m = m * <span class=\"number\">2</span></div><div class=\"line\">&#125; <span class=\"keyword\">while</span> m &lt; <span class=\"number\">100</span></div><div class=\"line\"><span class=\"built_in\">print</span>(m) <span class=\"comment\">// 128</span></div></pre></td></tr></table></figure>\n<p>你可以在循环中使用<code>..&lt;</code>来表示范围，也可以使用传统的写法，两者是等价的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstForLoop = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"number\">4</span>&#123;</div><div class=\"line\">    firstForLoop += i</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(firstForLoop) <span class=\"comment\">// 6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> secondForLoop = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i &#123;</div><div class=\"line\">    secondForLoop += i</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(secondForLoop) <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"函数和闭包\"><a href=\"#函数和闭包\" class=\"headerlink\" title=\"函数和闭包\"></a>函数和闭包</h3><p>使用<code>func</code>来声明一个函数，使用名字和参数来调用函数。使用<code>-&gt;</code>来指定函数返回值的类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(name: String, day: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(name), today is \\(day).\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">greet(<span class=\"string\">\"Bob\"</span>, day: <span class=\"string\">\"Tuesday\"</span>)</div></pre></td></tr></table></figure>\n<p>使用元组来让一个函数返回多个值。该元组的元素可以用名称或数字来表示。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calculateStatistics</span><span class=\"params\">(scores: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>, sum: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">min</span> = scores[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">max</span> = scores[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> scores &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> score &gt; <span class=\"built_in\">max</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">max</span> = score</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &lt; <span class=\"built_in\">min</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">min</span> = score</div><div class=\"line\">        &#125;</div><div class=\"line\">        sum += score</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>, sum)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> statistics = calculateStatistics([<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">100</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"built_in\">min</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"built_in\">max</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.sum)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>函数可以带有可变个数的参数，这些参数的函数内表现为数组的形式：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumOf</span><span class=\"params\">(numbers: Int...)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        sum += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div><div class=\"line\">sumOf()</div><div class=\"line\">sumOf(<span class=\"number\">42</span>, <span class=\"number\">597</span>, <span class=\"number\">12</span>)</div></pre></td></tr></table></figure>\n<p>函数可以嵌套。被嵌套的函数可以访问外侧函数的变量，你可以使用嵌套函数来重构一个太长或者太复杂的函数 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnFifteen</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        y += <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    add()</div><div class=\"line\">    <span class=\"keyword\">return</span> y</div><div class=\"line\">&#125;</div><div class=\"line\">returnFifteen()</div></pre></td></tr></table></figure>\n<p>函数是第一等类型，这意味着函数可以作为另一个函数的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addOne</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> addOne</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> increment = makeIncrementer()</div><div class=\"line\">increment(<span class=\"number\">7</span>)</div></pre></td></tr></table></figure>\n<p>函数也可以当做参数传入另一个函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasAnyMatches</span><span class=\"params\">(list: [Int], condition: Int -&gt; Bool)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lessThanTen</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> number &lt; <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</div><div class=\"line\">hasAnyMatches(numbers, condition: lessThanTen)</div></pre></td></tr></table></figure>\n<p>函数实际上是一种特殊的闭包：它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数，即使闭包是在一个不同的作用域被执行的 — 你已经在嵌套函数例子中所看到。你可以使用<code>{}</code>来创建一个匿名闭包。使用<code>in</code>将参数和返回值类型声明与闭包函数体进行分离。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</div><div class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;</div><div class=\"line\">    (number: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">3</span> * number</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>有很多种创建更简洁的闭包的方法。如果一个闭包的类型已知，比如作为一个回调函数，你可以忽略参数的类型和返回值。单个语句闭包会把它语句的值当做结果返回。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mappedNumbers = numbers.<span class=\"built_in\">map</span>(&#123; number <span class=\"keyword\">in</span> <span class=\"number\">3</span> * number &#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(mappedNumbers) <span class=\"comment\">// [60, 57, 21, 36]</span></div></pre></td></tr></table></figure>\n<p>swift内置了一组变量(<code>$0</code>、<code>$1</code>、<code>$2</code> ……)，上述代码还能更简单 </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mappedNumbers = numbers.<span class=\"built_in\">map</span>(&#123; $<span class=\"number\">0</span> * <span class=\"number\">3</span> &#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(mappedNumbers)</div></pre></td></tr></table></figure>\n<p>你可以通过参数位置而不是参数名字引用 参数 — 这个方法在非常短的闭包中非常有用。当一个闭包作为最后一个参数传给一个函数的时候，它可以直接跟在括号后面。当一个闭包是传给函数的唯一参数，你可以完全忽略括号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sortedNumbers = numbers.<span class=\"built_in\">sort</span>&#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedNumbers) <span class=\"comment\">// [20, 19, 12, 7]</span></div></pre></td></tr></table></figure>\n<h3 id=\"对象和类\"><a href=\"#对象和类\" class=\"headerlink\" title=\"对象和类\"></a>对象和类</h3><p>使用<code>class</code>和类名来创建一个类。类中属性的声明和常量、变量声明一样，唯一的区别就是它们的上下文是类。同样，方法和函数声明也一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfSides = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要创建一个类的实例，在类名后面加上括号。使用点语法来访问实例的属性和方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shape = <span class=\"type\">Shape</span>()</div><div class=\"line\">shape.numberOfSides = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"keyword\">var</span> shapeDescription = shape.simpleDescription()</div></pre></td></tr></table></figure>\n<p>这个版本的<code>Shape</code>类缺少了一些重要的东西：一个构造函数来初始化类实例。使用<code>init</code>来创建一个构造器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span> (name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意<code>self</code>被用来区别实例变量。当你创建实例的时候，像传入函数参数一样给类传入构造器的参数。</p>\n<p>每个属性都需要赋值 — 无论是通过声明（就像<code>numberOfSides</code>）还是通过构造器（就像<code>name</code>）</p>\n<p>如果你需要在删除对象之前进行一些清理工作，使用<code>deinit</code>创建一个析构函数。</p>\n<p>子类的定义方法是在它们的类名后面加上父类的名字，用冒号分割。创建类的时候并不需要一个标准的根类，所以你可以忽略父类。</p>\n<p>子类如果要重写父类的方法的话，需要用<code>override</code>标记 — 如果没有添加<code>override</code>就重写父类的方法的话，编译器会报错。编译器同样会检测<code>override</code>标记的方法是否确实在父类中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        numberOfSides = <span class=\"number\">4</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sideLength * sideLength</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A square with sides of length \\(sideLength).\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">\"my test square\"</span>)</div><div class=\"line\">test.area() <span class=\"comment\">// 27.04</span></div><div class=\"line\">test.simpleDescription() <span class=\"comment\">// \"A square with sides of length 5.2\"</span></div></pre></td></tr></table></figure>\n<p>除了储存简单的属性之外，属性可以有 <code>getter</code>和<code>settter</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EquilateralTriangle</span>: <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span> = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        numberOfSides = <span class=\"number\">4</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> perimeter: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3.0</span> * sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            sideLength = newValue / <span class=\"number\">3.0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"An equilateral triagle with sides of length \\(sideLength).\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> triangle = <span class=\"type\">EquilateralTriangle</span>(sideLength: <span class=\"number\">3.1</span>, name: <span class=\"string\">\"a triangle\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter) <span class=\"comment\">// 9.3</span></div><div class=\"line\">triangle.perimeter = <span class=\"number\">9.9</span></div><div class=\"line\"><span class=\"built_in\">print</span>(triangle.sideLength) <span class=\"comment\">// 3.3</span></div></pre></td></tr></table></figure>\n<p>在<code>perimeter</code>的<code>setter</code>中，新值的名字是<code>newValue</code>。你可以在<code>set</code>之后显示的设置一人名字。</p>\n<p>注意<code>EquilateralTriangle</code>类的构造器执行了三步：</p>\n<ol>\n<li>设置子类声明的属性</li>\n<li>调用父类的构造器</li>\n<li>改变父类定义的属性值。其它的工作比如调用方法、getter和setter也可以在这个阶段完成。</li>\n</ol>\n<p>如果你不需要计算属性，但是仍然需要在设置一相新值之前或者之后运行代码，使用<code>willSet</code>和<code>didSet</code>。</p>\n<p>比如，下面的类确保三角形的边长总是和正方形的边长相同。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TriangleAndSquare</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> triangle: <span class=\"type\">EquilateralTriangle</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</div><div class=\"line\">            square.sideLength = newValue.sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> square: <span class=\"type\">Square</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>&#123;</div><div class=\"line\">            triangle.sideLength = newValue.sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(size: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        square = <span class=\"type\">Square</span>(sideLength: size, name: name)</div><div class=\"line\">        triangle = <span class=\"type\">EquilateralTriangle</span>(sideLength: size, name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> triangleAndSquare = <span class=\"type\">TriangleAndSquare</span>(size: <span class=\"number\">10</span>, name: <span class=\"string\">\"another test shape\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.square.sideLength) <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength) <span class=\"comment\">// 10</span></div><div class=\"line\">triangleAndSquare.square = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">50</span>, name: <span class=\"string\">\"larger square\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength) <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<p>处理变量的可选值时，你可以在操作（比如方法、属性和子脚本）之前加<code>?</code>。如果 <code>?</code>之前的值是<code>nil</code>，<code>?</code>后面的东西都会被忽略，并且整个表达式返回<code>nil</code>。否则，<code>?</code>之后的东西都会被运行。在这两种情况下，整个表达 式的值也是一个可选值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> optionalSquare: <span class=\"type\">Square</span>? = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">2.5</span>, name: <span class=\"string\">\"optional square\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> sideLength = optionalSquare?.sideLength</div></pre></td></tr></table></figure>\n<h3 id=\"枚举和结构体\"><a href=\"#枚举和结构体\" class=\"headerlink\" title=\"枚举和结构体\"></a>枚举和结构体</h3><p>使用<code>enum</code>来创建一个枚举。就像类的其他所有命名类型一样，枚举可以包含方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Rank</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Ace</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Two</span>, <span class=\"type\">Three</span>, <span class=\"type\">Four</span>, <span class=\"type\">Five</span>, <span class=\"type\">Six</span>, <span class=\"type\">Seven</span>, <span class=\"type\">Eight</span>, <span class=\"type\">Nine</span>, <span class=\"type\">Ten</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Jack</span>, <span class=\"type\">Queen</span>, <span class=\"type\">King</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Ace</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"ace\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Jack</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"jack\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Queen</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"queen\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">King</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"king\"</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ace = <span class=\"type\">Rank</span>.<span class=\"type\">Ace</span></div><div class=\"line\"><span class=\"keyword\">let</span> aceRawValue = ace.rawValue</div></pre></td></tr></table></figure>\n<p>在上面的例子中，枚举原始值的类型是<code>Int</code>，所以你只需要设置第一个原始值。剩下的原始值会按照顺序赋值。你也可以使用字符串或者浮点数作为枚举的原始值。使用<code>rawValue</code>属性来访问一个枚举成员的原始值。</p>\n<p>使用<code>init?(rawValue:)</code>初始化构造器在原始值和枚举值之间进行转换。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> convertedRank = <span class=\"type\">Rank</span>(rawValue: <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> threeDescription = convertedRank.simpleDescription()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举的成员值是实际值，并不是原始值的另一种表达方法。实际上，以防原始值没有意义，你不需要设置。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Suit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Spades</span>, <span class=\"type\">Hearts</span>, <span class=\"type\">Diamonds</span>, <span class=\"type\">Clubs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Spades</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"spades\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Hearts</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"hearts\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Diamonds</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"diamonds\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Clubs</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"clubs\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> hearts = <span class=\"type\">Suit</span>.<span class=\"type\">Hearts</span></div><div class=\"line\"><span class=\"keyword\">let</span> heartsDescription = hearts.simpleDescription()</div></pre></td></tr></table></figure>\n<p>注意，有两种方式可以引用<code>Hearts</code>成员：给<code>hearts</code>常量赋值时，枚举成员<code>Suit.Hearts</code>需要用全名来引用，因为常量没有显式指定类型。在<code>switch</code>里，枚举成员使用缩写<code>.Hearts</code>来引用，因为<code>self</code>的值已经知道是一个<code>suit</code>。已知变量类型的情况下你可以使用缩写。</p>\n<p>使用<code>struct</code>来创建一个结构体。结构体和类有很多相同的地方，比如方法和构造器。它们之间最大的一个区别就是结构体是传值，类是传引用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Card</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rank: <span class=\"type\">Rank</span></div><div class=\"line\">    <span class=\"keyword\">var</span> suit: <span class=\"type\">Suit</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The \\(rank.simpleDescription()) of \\(suit.simpleDescription())\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> threeOfSpades = <span class=\"type\">Card</span>(rank: .<span class=\"type\">Three</span>, suit: .<span class=\"type\">Spades</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> threeOfSpadesDescription = threeOfSpades.simpleDescription()</div></pre></td></tr></table></figure>\n<p>一个枚举成员的实例可以有实例值。相同枚举成员的实例可以有不同的值。创建实例的时候传入值即可。实例值和原始值是不同的：枚举成员的原始值对于所有实例都是相同的，而且你是在定义枚举的时候设置原始值。</p>\n<p>例如，考虑从服务器获取日出和日落的时间。服务器会返回正常结果或者错误信息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ServerResponse</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Result</span>(<span class=\"type\">String</span>, <span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Error</span>(<span class=\"type\">String</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"type\">ServerResponse</span>.<span class=\"type\">Result</span>(<span class=\"string\">\"6:00 am\"</span>, <span class=\"string\">\"8:09 pm\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> failure = <span class=\"type\">ServerResponse</span>.<span class=\"type\">Error</span>(<span class=\"string\">\"Out of cheese.\"</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> success &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .<span class=\"type\">Result</span>(sunrise, sunset):</div><div class=\"line\">    <span class=\"keyword\">let</span> serverResponse = <span class=\"string\">\"Sunrise is at \\(sunrise) and sunset is at \\(sunset).\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .<span class=\"type\">Error</span>(error):</div><div class=\"line\">    <span class=\"keyword\">let</span> serverResponse = <span class=\"string\">\"Failure... \\(error)\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意如何从<code>ServerResponse</code>中提取日升和日落时间并用得到的值用来和<code>switch</code>的情况做比较。</p>\n<h3 id=\"协议和扩展\"><a href=\"#协议和扩展\" class=\"headerlink\" title=\"协议和扩展\"></a>协议和扩展</h3><p>使用<code>protocol</code>来声明一个协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类、枚举和结构体都可以实现协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleClass</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> = <span class=\"string\">\"A very simple class.\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> anotherProperty: <span class=\"type\">Int</span> = <span class=\"number\">69105</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        simpleDescription += <span class=\"string\">\" Now 100% adjusted.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"type\">SimpleClass</span>()</div><div class=\"line\">a.adjust()</div><div class=\"line\"><span class=\"keyword\">let</span> aDescription = a.simpleDescription</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SimpleStructure</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> = <span class=\"string\">\"A simple structure\"</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        simpleDescription += <span class=\"string\">\"(adjusted)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"type\">SimpleStructure</span>()</div><div class=\"line\">b.adjust()</div><div class=\"line\"><span class=\"keyword\">let</span> bDescription = b.simpleDescription</div></pre></td></tr></table></figure>\n<p>注意声明<code>SimpleStructure</code>时候<code>mutating</code>关键字用来标记一个会修改结构体的方法。<code>SimpleClass</code>的声明不需要标记任何方法，因为类中的方法通常可以修改类属性（类的性质）</p>\n<p>使用<code>extension</code>来为现有的类型添加功能，比如新的方法和计算属性。你可以使用扩展在别处修改定义，甚至是从外部库或者框架引入的一个类型，使得这个类型遵循某个协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The number \\(self)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span> += <span class=\"number\">42</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7</span>.simpleDescription) <span class=\"comment\">// The number 7</span></div></pre></td></tr></table></figure>\n<p>你可以像使用其他命名类型一样使用协议名 — 例如，创建一个有不同类型但是都实现一个协议的对象集合。当你处理类型是协议的值时，协议外定义的方法不可用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> protocolValue: <span class=\"type\">ExampleProtocol</span> = a</div><div class=\"line\"><span class=\"built_in\">print</span>(protocolValue.simpleDescription) <span class=\"comment\">//A very simple class. Now 100% adjusted.</span></div></pre></td></tr></table></figure>\n<p>即使<code>protocolValue</code>变量运行时的类型是<code>simpleClass</code>，编译器会把它的类型当做<code>ExampleProtocol</code>。这表示你不能调用类在它实现的协议之外实现的方法或属性。</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>在尖括号里写一个名字来创建一个泛型函数或者类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">repeatItem</span>&lt;Item&gt;<span class=\"params\">(item: Item, numberOfTimes: Int)</span></span> -&gt; [<span class=\"type\">Item</span>] &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [<span class=\"type\">Item</span>]()</div><div class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;numberOfTimes &#123;</div><div class=\"line\">        result.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\">repeatItem(<span class=\"string\">\"knock\"</span>, numberOfTimes: <span class=\"number\">4</span>) <span class=\"comment\">// [\"knock\", \"knock\", \"knock\", \"knock\"]</span></div></pre></td></tr></table></figure>\n<p>你也可以创建泛型函数 、方法、类、枚举和结构体。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Reimplement the Swift standard library's optional type</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OptionalValue</span>&lt;<span class=\"title\">Wrapped</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">None</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">Wrapped</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> possibleInteger: <span class=\"type\">OptionalValue</span>&lt;<span class=\"type\">Int</span>&gt; = .<span class=\"type\">None</span></div><div class=\"line\">possibleInteger = .<span class=\"type\">Some</span>(<span class=\"number\">100</span>)</div></pre></td></tr></table></figure>\n<p>在类型名后面的使用<code>where</code>来指定对类型的需求，比如，限定类型实现某一个协议，限定两个类型是相同的，或者限定某个类必须有一个特定的父类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">anyCommonElements</span>&lt;T: SequenceType, U: SequenceType where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element&gt;<span class=\"params\">(lhs: T, <span class=\"number\">_</span> rhs: U)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> lhsItem <span class=\"keyword\">in</span> lhs &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> rhsItem <span class=\"keyword\">in</span> rhs &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> lhsItem == rhsItem &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\">anyCommonElements([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<p><code>&lt;T: Equatable&gt;</code>和<code>&lt;T where T: Equatable&gt;</code>是等价的。</p>\n","excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>本文摘至：《The Swift Programming Language》</p>\n</blockquote>\n<p>Swift是一种新的编程语言，用于编写ios，OS X和watch OS应用程序。Swift结合了C和Objective-C的优点并且不受C兼容性的限制。Swift采用安全的编程模式并添加了很多新特性，这将使编程更简单，更灵活，也更有趣。Swift是基于成熟而且倍受喜爱的Cocoa和Cocoa Touch框架，它的降临将重新定义软件开发。</p>\n<blockquote>\n<p>使用Playground编写Swift，可以实现查看。打开Xcode，创建一个Playground文件(File –&gt; New –&gt; Playground)。</p>\n<p>Tips:  把鼠标放在Playground的右边区域，会有个小眼睛的图标和一个小白圈，点击有惊喜</p>\n</blockquote>\n<p><img src=\"/img/swift/swift-playground.png\" alt=\"swift-playground\"></p>","more":"<p>画正弦 <img src=\"/img/swift/swift-sin.png\" alt=\"swift-sin\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"type\">Double</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">100</span> &#123;</div><div class=\"line\">    num = sin(<span class=\"type\">Double</span>(i) / <span class=\"number\">10</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Swift-初见\"><a href=\"#Swift-初见\" class=\"headerlink\" title=\"Swift 初见\"></a>Swift 初见</h2><p>通常来说，编程语言教程中的第一个程序应该在屏幕上打印”Hello, world”。在Swift中，可以用一行代码实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Hello, world!\"</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>不同于java等语言，swift并不需要在语句结尾强制加上一个分号<code>;</code>。如果一行写2个语句，需要加上分号<code>;</code></p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> explicitFloat: <span class=\"type\">Float</span> = <span class=\"number\">70</span>; <span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<h3 id=\"简单值\"><a href=\"#简单值\" class=\"headerlink\" title=\"简单值\"></a>简单值</h3><p>使用<code>let</code>来声明常量，使用<code>var</code>来声明变量。一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。类似java的final修饰的变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVariable = <span class=\"number\">42</span></div><div class=\"line\">myVariable = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"keyword\">let</span> myConstant = <span class=\"number\">42</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>你不用明确的声明类型，声明的同时赋值的话，编译器会自动推断类型。在上面的例子中，编译器推断出 <code>myVariable</code>是一个整数(integer)，因为它的初始值是整数。</p>\n</blockquote>\n<p>如果 初始值没有提供足够的信息(或者没有初始值)，那你需要在变量后面声明类型，用冒号分割。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> implicitInteger = <span class=\"number\">70</span></div><div class=\"line\"><span class=\"keyword\">let</span> implicitDouble = <span class=\"number\">70.0</span></div><div class=\"line\"><span class=\"keyword\">let</span> explicitDouble: <span class=\"type\">Double</span> = <span class=\"number\">70</span></div><div class=\"line\"><span class=\"keyword\">let</span> explicitFloat: <span class=\"type\">Float</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>值永远不会被隐式转换成其他类型。如果你需要把一个值转换成其它类型，请显示转换。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> label = <span class=\"string\">\"The width is\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> width = <span class=\"number\">94</span></div><div class=\"line\"><span class=\"keyword\">let</span> widthLabel = label + <span class=\"type\">String</span>(width)</div></pre></td></tr></table></figure>\n<p>有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> apples = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> oranges = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">let</span> appleSummary = <span class=\"string\">\"I have \\(apples) apples.\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> fruitSummary = <span class=\"string\">\"I have \\(apples + oranges) pieces of fruit.\"</span></div></pre></td></tr></table></figure>\n<p>使用方括号<code>[]</code>来创建数组和字典，并使用下标或者键（key）来访问元素。最后一个元素后面允许有个逗号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppingList = [<span class=\"string\">\"Catfish\"</span>, <span class=\"string\">\"water\"</span>, <span class=\"string\">\"tulips\"</span>, <span class=\"string\">\"blue paint\"</span>]</div><div class=\"line\">shoppingList[<span class=\"number\">1</span>] = <span class=\"string\">\"bottle of water\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> occupations = [<span class=\"string\">\"Malcolm\"</span>: <span class=\"string\">\"Captain\"</span>, <span class=\"string\">\"Keylee\"</span>: <span class=\"string\">\"Mechanic\"</span>,]</div><div class=\"line\">occupations[<span class=\"string\">\"Jayne\"</span>] = <span class=\"string\">\"Public Relations\"</span></div></pre></td></tr></table></figure>\n<p>要创建一个空数组或者字典，使用初始化语法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> emptyArray = [<span class=\"type\">String</span>]()</div><div class=\"line\"><span class=\"keyword\">let</span> emptyDictionary = [<span class=\"type\">String</span>: <span class=\"type\">Float</span>]()</div></pre></td></tr></table></figure>\n<p>如果类型信息可以被推断出来，你可以用<code>[]</code>和<code>[:]</code>来创建空数组和空字典 — 就像你声明变量或者给函数传参数的时候一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">shoppingList = []</div><div class=\"line\">occupations = [:]</div></pre></td></tr></table></figure>\n<h3 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h3><p>使用<code>if</code>和<code>switch</code>来进行条件操作，使用<code>for-in</code>、<code>for</code>、<code>while</code>和<code>repeat-while</code>来进行循环。包裹条件和循环变量括号可以省略，但是语句体的大括号是必须的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> individualScores = [<span class=\"number\">75</span>, <span class=\"number\">43</span>, <span class=\"number\">103</span>, <span class=\"number\">87</span>, <span class=\"number\">12</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> teamScore = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> individualScores &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> score &gt; <span class=\"number\">50</span> &#123;</div><div class=\"line\">        teamScore += <span class=\"number\">3</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        teamScore += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(teamScore) <span class=\"comment\">// 11</span></div></pre></td></tr></table></figure>\n<p> 在<code>if</code>语句中，条件必须是一个布尔表达式 — 这意味着像<code>if score { ... }</code>这样的代码将报错，而不会隐形的与 0 做对比。</p>\n<p>你可以一起使用<code>if</code>和<code>let</code>来处理缺失的情况。这些值可由可先值来代表。一个可选的值是一个具体的值或者是<code>nil</code>以表示值缺失。在类型后面加一个问号来标记这个变量的值是可选的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> optionalString: <span class=\"type\">String</span>? = <span class=\"string\">\"Hello\"</span></div><div class=\"line\"><span class=\"built_in\">print</span>(optionalString == <span class=\"literal\">nil</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> optionalName: <span class=\"type\">String</span>? = <span class=\"string\">\"John Appleseed\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name = optionalName &#123;</div><div class=\"line\">    greeting = <span class=\"string\">\"Hello, \\(name)\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>if  let name = optionalName</code>  这句的意思是：如果optionalName不是nil，就把值赋给 name，条件判断为 <code>true</code>，进入 if 语句块；如果optionalName为nil，条件会判断为 <code>false</code>，不进入 if  语句块</p>\n</blockquote>\n<p><code>switch</code>支持任意类型的数据以及各种比较操作 — 不仅仅是整数以及测试相等。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> vegetable = <span class=\"string\">\"red pepper\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> vegetable &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"celery\"</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Add some raisins and make ants on a log.\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"cucumber\"</span>, <span class=\"string\">\"watercress\"</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"That would make a good tea sandwich.\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> x <span class=\"keyword\">where</span> x.hasSuffix(<span class=\"string\">\"pepper\"</span>):</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Is it a spicy \\(x)?\"</span>)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Everything tastes good in soup.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Is it a spicy red pepper?\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>不同于java ，swift的<code>case</code>语句不必加break。</p>\n</blockquote>\n<p>注意<code>let</code>在上述例子的等式中是如何使用的，它将匹配等式的值赋给常量<code>x</code>。<code>let x where x.hasSuffix(&quot;papper&quot;)</code>这句话的意思是先把vegetable的值赋给<code>x</code>，如果赋值成功，再判断调用<code>hasSuffix</code>方法判断是否以<code>pepper</code>字符串结尾。</p>\n<p>运行<code>switch</code>中匹配到的子句之后，程序会退出switch语句，并不会继续向下运行，所以不需要在每个子句结尾写<code>break</code>。</p>\n<p>你可以使用<code>for-in</code>来遍历字典，需要两个变量来表示每个键值对。字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束。</p>\n<p>下面的程序演示了找出最大值的操作：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> interestingNumbers = [</div><div class=\"line\">    <span class=\"string\">\"Prime\"</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>],</div><div class=\"line\">    <span class=\"string\">\"Fibonacci\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>],</div><div class=\"line\">    <span class=\"string\">\"Square\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> largest = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> (kind, numbers) <span class=\"keyword\">in</span> interestingNumbers &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> number &gt; largest &#123;</div><div class=\"line\">            largest = number</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(largest) <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<p>使用<code>while</code>来重复运行一段代码直到不满足条件。循环条件也可以在结尾，保证能至少循环一次。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">100</span> &#123;</div><div class=\"line\">    n = n * <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(n) <span class=\"comment\">// 128</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">repeat</span> &#123;</div><div class=\"line\">    m = m * <span class=\"number\">2</span></div><div class=\"line\">&#125; <span class=\"keyword\">while</span> m &lt; <span class=\"number\">100</span></div><div class=\"line\"><span class=\"built_in\">print</span>(m) <span class=\"comment\">// 128</span></div></pre></td></tr></table></figure>\n<p>你可以在循环中使用<code>..&lt;</code>来表示范围，也可以使用传统的写法，两者是等价的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> firstForLoop = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"number\">4</span>&#123;</div><div class=\"line\">    firstForLoop += i</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(firstForLoop) <span class=\"comment\">// 6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> secondForLoop = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i &#123;</div><div class=\"line\">    secondForLoop += i</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(secondForLoop) <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"函数和闭包\"><a href=\"#函数和闭包\" class=\"headerlink\" title=\"函数和闭包\"></a>函数和闭包</h3><p>使用<code>func</code>来声明一个函数，使用名字和参数来调用函数。使用<code>-&gt;</code>来指定函数返回值的类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greet</span><span class=\"params\">(name: String, day: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \\(name), today is \\(day).\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">greet(<span class=\"string\">\"Bob\"</span>, day: <span class=\"string\">\"Tuesday\"</span>)</div></pre></td></tr></table></figure>\n<p>使用元组来让一个函数返回多个值。该元组的元素可以用名称或数字来表示。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calculateStatistics</span><span class=\"params\">(scores: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>, sum: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">min</span> = scores[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">max</span> = scores[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> score <span class=\"keyword\">in</span> scores &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> score &gt; <span class=\"built_in\">max</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">max</span> = score</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &lt; <span class=\"built_in\">min</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">min</span> = score</div><div class=\"line\">        &#125;</div><div class=\"line\">        sum += score</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>, sum)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> statistics = calculateStatistics([<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">100</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"built_in\">min</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"built_in\">max</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.sum)</div><div class=\"line\"><span class=\"built_in\">print</span>(statistics.<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>函数可以带有可变个数的参数，这些参数的函数内表现为数组的形式：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sumOf</span><span class=\"params\">(numbers: Int...)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        sum += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div><div class=\"line\">sumOf()</div><div class=\"line\">sumOf(<span class=\"number\">42</span>, <span class=\"number\">597</span>, <span class=\"number\">12</span>)</div></pre></td></tr></table></figure>\n<p>函数可以嵌套。被嵌套的函数可以访问外侧函数的变量，你可以使用嵌套函数来重构一个太长或者太复杂的函数 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnFifteen</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        y += <span class=\"number\">5</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    add()</div><div class=\"line\">    <span class=\"keyword\">return</span> y</div><div class=\"line\">&#125;</div><div class=\"line\">returnFifteen()</div></pre></td></tr></table></figure>\n<p>函数是第一等类型，这意味着函数可以作为另一个函数的返回值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementer</span><span class=\"params\">()</span></span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addOne</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> addOne</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> increment = makeIncrementer()</div><div class=\"line\">increment(<span class=\"number\">7</span>)</div></pre></td></tr></table></figure>\n<p>函数也可以当做参数传入另一个函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasAnyMatches</span><span class=\"params\">(list: [Int], condition: Int -&gt; Bool)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> condition(item) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lessThanTen</span><span class=\"params\">(number: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> number &lt; <span class=\"number\">10</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</div><div class=\"line\">hasAnyMatches(numbers, condition: lessThanTen)</div></pre></td></tr></table></figure>\n<p>函数实际上是一种特殊的闭包：它是一段能之后被调取的代码。闭包中的代码能访问闭包所建作用域中能得到的变量和函数，即使闭包是在一个不同的作用域被执行的 — 你已经在嵌套函数例子中所看到。你可以使用<code>{}</code>来创建一个匿名闭包。使用<code>in</code>将参数和返回值类型声明与闭包函数体进行分离。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">7</span>, <span class=\"number\">12</span>]</div><div class=\"line\">numbers.<span class=\"built_in\">map</span>(&#123;</div><div class=\"line\">    (number: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">3</span> * number</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>有很多种创建更简洁的闭包的方法。如果一个闭包的类型已知，比如作为一个回调函数，你可以忽略参数的类型和返回值。单个语句闭包会把它语句的值当做结果返回。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> mappedNumbers = numbers.<span class=\"built_in\">map</span>(&#123; number <span class=\"keyword\">in</span> <span class=\"number\">3</span> * number &#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(mappedNumbers) <span class=\"comment\">// [60, 57, 21, 36]</span></div></pre></td></tr></table></figure>\n<p>swift内置了一组变量(<code>$0</code>、<code>$1</code>、<code>$2</code> ……)，上述代码还能更简单 </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mappedNumbers = numbers.<span class=\"built_in\">map</span>(&#123; $<span class=\"number\">0</span> * <span class=\"number\">3</span> &#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(mappedNumbers)</div></pre></td></tr></table></figure>\n<p>你可以通过参数位置而不是参数名字引用 参数 — 这个方法在非常短的闭包中非常有用。当一个闭包作为最后一个参数传给一个函数的时候，它可以直接跟在括号后面。当一个闭包是传给函数的唯一参数，你可以完全忽略括号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sortedNumbers = numbers.<span class=\"built_in\">sort</span>&#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(sortedNumbers) <span class=\"comment\">// [20, 19, 12, 7]</span></div></pre></td></tr></table></figure>\n<h3 id=\"对象和类\"><a href=\"#对象和类\" class=\"headerlink\" title=\"对象和类\"></a>对象和类</h3><p>使用<code>class</code>和类名来创建一个类。类中属性的声明和常量、变量声明一样，唯一的区别就是它们的上下文是类。同样，方法和函数声明也一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfSides = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要创建一个类的实例，在类名后面加上括号。使用点语法来访问实例的属性和方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shape = <span class=\"type\">Shape</span>()</div><div class=\"line\">shape.numberOfSides = <span class=\"number\">7</span></div><div class=\"line\"><span class=\"keyword\">var</span> shapeDescription = shape.simpleDescription()</div></pre></td></tr></table></figure>\n<p>这个版本的<code>Shape</code>类缺少了一些重要的东西：一个构造函数来初始化类实例。使用<code>init</code>来创建一个构造器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfSides: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span> (name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A shape with \\(numberOfSides) sides.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意<code>self</code>被用来区别实例变量。当你创建实例的时候，像传入函数参数一样给类传入构造器的参数。</p>\n<p>每个属性都需要赋值 — 无论是通过声明（就像<code>numberOfSides</code>）还是通过构造器（就像<code>name</code>）</p>\n<p>如果你需要在删除对象之前进行一些清理工作，使用<code>deinit</code>创建一个析构函数。</p>\n<p>子类的定义方法是在它们的类名后面加上父类的名字，用冒号分割。创建类的时候并不需要一个标准的根类，所以你可以忽略父类。</p>\n<p>子类如果要重写父类的方法的话，需要用<code>override</code>标记 — 如果没有添加<code>override</code>就重写父类的方法的话，编译器会报错。编译器同样会检测<code>override</code>标记的方法是否确实在父类中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        numberOfSides = <span class=\"number\">4</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">area</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sideLength * sideLength</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A square with sides of length \\(sideLength).\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">5.2</span>, name: <span class=\"string\">\"my test square\"</span>)</div><div class=\"line\">test.area() <span class=\"comment\">// 27.04</span></div><div class=\"line\">test.simpleDescription() <span class=\"comment\">// \"A square with sides of length 5.2\"</span></div></pre></td></tr></table></figure>\n<p>除了储存简单的属性之外，属性可以有 <code>getter</code>和<code>settter</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EquilateralTriangle</span>: <span class=\"title\">NamesShape</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sideLength: <span class=\"type\">Double</span> = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(sideLength: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.sideLength = sideLength</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        numberOfSides = <span class=\"number\">4</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> perimeter: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3.0</span> * sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            sideLength = newValue / <span class=\"number\">3.0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"An equilateral triagle with sides of length \\(sideLength).\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> triangle = <span class=\"type\">EquilateralTriangle</span>(sideLength: <span class=\"number\">3.1</span>, name: <span class=\"string\">\"a triangle\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangle.perimeter) <span class=\"comment\">// 9.3</span></div><div class=\"line\">triangle.perimeter = <span class=\"number\">9.9</span></div><div class=\"line\"><span class=\"built_in\">print</span>(triangle.sideLength) <span class=\"comment\">// 3.3</span></div></pre></td></tr></table></figure>\n<p>在<code>perimeter</code>的<code>setter</code>中，新值的名字是<code>newValue</code>。你可以在<code>set</code>之后显示的设置一人名字。</p>\n<p>注意<code>EquilateralTriangle</code>类的构造器执行了三步：</p>\n<ol>\n<li>设置子类声明的属性</li>\n<li>调用父类的构造器</li>\n<li>改变父类定义的属性值。其它的工作比如调用方法、getter和setter也可以在这个阶段完成。</li>\n</ol>\n<p>如果你不需要计算属性，但是仍然需要在设置一相新值之前或者之后运行代码，使用<code>willSet</code>和<code>didSet</code>。</p>\n<p>比如，下面的类确保三角形的边长总是和正方形的边长相同。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TriangleAndSquare</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> triangle: <span class=\"type\">EquilateralTriangle</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</div><div class=\"line\">            square.sideLength = newValue.sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> square: <span class=\"type\">Square</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">willSet</span>&#123;</div><div class=\"line\">            triangle.sideLength = newValue.sideLength</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(size: <span class=\"type\">Double</span>, name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        square = <span class=\"type\">Square</span>(sideLength: size, name: name)</div><div class=\"line\">        triangle = <span class=\"type\">EquilateralTriangle</span>(sideLength: size, name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> triangleAndSquare = <span class=\"type\">TriangleAndSquare</span>(size: <span class=\"number\">10</span>, name: <span class=\"string\">\"another test shape\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.square.sideLength) <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength) <span class=\"comment\">// 10</span></div><div class=\"line\">triangleAndSquare.square = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">50</span>, name: <span class=\"string\">\"larger square\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(triangleAndSquare.triangle.sideLength) <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<p>处理变量的可选值时，你可以在操作（比如方法、属性和子脚本）之前加<code>?</code>。如果 <code>?</code>之前的值是<code>nil</code>，<code>?</code>后面的东西都会被忽略，并且整个表达式返回<code>nil</code>。否则，<code>?</code>之后的东西都会被运行。在这两种情况下，整个表达 式的值也是一个可选值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> optionalSquare: <span class=\"type\">Square</span>? = <span class=\"type\">Square</span>(sideLength: <span class=\"number\">2.5</span>, name: <span class=\"string\">\"optional square\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> sideLength = optionalSquare?.sideLength</div></pre></td></tr></table></figure>\n<h3 id=\"枚举和结构体\"><a href=\"#枚举和结构体\" class=\"headerlink\" title=\"枚举和结构体\"></a>枚举和结构体</h3><p>使用<code>enum</code>来创建一个枚举。就像类的其他所有命名类型一样，枚举可以包含方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Rank</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Ace</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Two</span>, <span class=\"type\">Three</span>, <span class=\"type\">Four</span>, <span class=\"type\">Five</span>, <span class=\"type\">Six</span>, <span class=\"type\">Seven</span>, <span class=\"type\">Eight</span>, <span class=\"type\">Nine</span>, <span class=\"type\">Ten</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Jack</span>, <span class=\"type\">Queen</span>, <span class=\"type\">King</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Ace</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"ace\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Jack</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"jack\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Queen</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"queen\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">King</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"king\"</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ace = <span class=\"type\">Rank</span>.<span class=\"type\">Ace</span></div><div class=\"line\"><span class=\"keyword\">let</span> aceRawValue = ace.rawValue</div></pre></td></tr></table></figure>\n<p>在上面的例子中，枚举原始值的类型是<code>Int</code>，所以你只需要设置第一个原始值。剩下的原始值会按照顺序赋值。你也可以使用字符串或者浮点数作为枚举的原始值。使用<code>rawValue</code>属性来访问一个枚举成员的原始值。</p>\n<p>使用<code>init?(rawValue:)</code>初始化构造器在原始值和枚举值之间进行转换。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> convertedRank = <span class=\"type\">Rank</span>(rawValue: <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> threeDescription = convertedRank.simpleDescription()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举的成员值是实际值，并不是原始值的另一种表达方法。实际上，以防原始值没有意义，你不需要设置。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Suit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Spades</span>, <span class=\"type\">Hearts</span>, <span class=\"type\">Diamonds</span>, <span class=\"type\">Clubs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Spades</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"spades\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Hearts</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"hearts\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Diamonds</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"diamonds\"</span></div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Clubs</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"clubs\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> hearts = <span class=\"type\">Suit</span>.<span class=\"type\">Hearts</span></div><div class=\"line\"><span class=\"keyword\">let</span> heartsDescription = hearts.simpleDescription()</div></pre></td></tr></table></figure>\n<p>注意，有两种方式可以引用<code>Hearts</code>成员：给<code>hearts</code>常量赋值时，枚举成员<code>Suit.Hearts</code>需要用全名来引用，因为常量没有显式指定类型。在<code>switch</code>里，枚举成员使用缩写<code>.Hearts</code>来引用，因为<code>self</code>的值已经知道是一个<code>suit</code>。已知变量类型的情况下你可以使用缩写。</p>\n<p>使用<code>struct</code>来创建一个结构体。结构体和类有很多相同的地方，比如方法和构造器。它们之间最大的一个区别就是结构体是传值，类是传引用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Card</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rank: <span class=\"type\">Rank</span></div><div class=\"line\">    <span class=\"keyword\">var</span> suit: <span class=\"type\">Suit</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleDescription</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The \\(rank.simpleDescription()) of \\(suit.simpleDescription())\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> threeOfSpades = <span class=\"type\">Card</span>(rank: .<span class=\"type\">Three</span>, suit: .<span class=\"type\">Spades</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> threeOfSpadesDescription = threeOfSpades.simpleDescription()</div></pre></td></tr></table></figure>\n<p>一个枚举成员的实例可以有实例值。相同枚举成员的实例可以有不同的值。创建实例的时候传入值即可。实例值和原始值是不同的：枚举成员的原始值对于所有实例都是相同的，而且你是在定义枚举的时候设置原始值。</p>\n<p>例如，考虑从服务器获取日出和日落的时间。服务器会返回正常结果或者错误信息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ServerResponse</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Result</span>(<span class=\"type\">String</span>, <span class=\"type\">String</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Error</span>(<span class=\"type\">String</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"type\">ServerResponse</span>.<span class=\"type\">Result</span>(<span class=\"string\">\"6:00 am\"</span>, <span class=\"string\">\"8:09 pm\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> failure = <span class=\"type\">ServerResponse</span>.<span class=\"type\">Error</span>(<span class=\"string\">\"Out of cheese.\"</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> success &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .<span class=\"type\">Result</span>(sunrise, sunset):</div><div class=\"line\">    <span class=\"keyword\">let</span> serverResponse = <span class=\"string\">\"Sunrise is at \\(sunrise) and sunset is at \\(sunset).\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .<span class=\"type\">Error</span>(error):</div><div class=\"line\">    <span class=\"keyword\">let</span> serverResponse = <span class=\"string\">\"Failure... \\(error)\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意如何从<code>ServerResponse</code>中提取日升和日落时间并用得到的值用来和<code>switch</code>的情况做比较。</p>\n<h3 id=\"协议和扩展\"><a href=\"#协议和扩展\" class=\"headerlink\" title=\"协议和扩展\"></a>协议和扩展</h3><p>使用<code>protocol</code>来声明一个协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类、枚举和结构体都可以实现协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleClass</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> = <span class=\"string\">\"A very simple class.\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> anotherProperty: <span class=\"type\">Int</span> = <span class=\"number\">69105</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        simpleDescription += <span class=\"string\">\" Now 100% adjusted.\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"type\">SimpleClass</span>()</div><div class=\"line\">a.adjust()</div><div class=\"line\"><span class=\"keyword\">let</span> aDescription = a.simpleDescription</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SimpleStructure</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> = <span class=\"string\">\"A simple structure\"</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        simpleDescription += <span class=\"string\">\"(adjusted)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"type\">SimpleStructure</span>()</div><div class=\"line\">b.adjust()</div><div class=\"line\"><span class=\"keyword\">let</span> bDescription = b.simpleDescription</div></pre></td></tr></table></figure>\n<p>注意声明<code>SimpleStructure</code>时候<code>mutating</code>关键字用来标记一个会修改结构体的方法。<code>SimpleClass</code>的声明不需要标记任何方法，因为类中的方法通常可以修改类属性（类的性质）</p>\n<p>使用<code>extension</code>来为现有的类型添加功能，比如新的方法和计算属性。你可以使用扩展在别处修改定义，甚至是从外部库或者框架引入的一个类型，使得这个类型遵循某个协议。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">ExampleProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> simpleDescription: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"The number \\(self)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adjust</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span> += <span class=\"number\">42</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">7</span>.simpleDescription) <span class=\"comment\">// The number 7</span></div></pre></td></tr></table></figure>\n<p>你可以像使用其他命名类型一样使用协议名 — 例如，创建一个有不同类型但是都实现一个协议的对象集合。当你处理类型是协议的值时，协议外定义的方法不可用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> protocolValue: <span class=\"type\">ExampleProtocol</span> = a</div><div class=\"line\"><span class=\"built_in\">print</span>(protocolValue.simpleDescription) <span class=\"comment\">//A very simple class. Now 100% adjusted.</span></div></pre></td></tr></table></figure>\n<p>即使<code>protocolValue</code>变量运行时的类型是<code>simpleClass</code>，编译器会把它的类型当做<code>ExampleProtocol</code>。这表示你不能调用类在它实现的协议之外实现的方法或属性。</p>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>在尖括号里写一个名字来创建一个泛型函数或者类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">repeatItem</span>&lt;Item&gt;<span class=\"params\">(item: Item, numberOfTimes: Int)</span></span> -&gt; [<span class=\"type\">Item</span>] &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [<span class=\"type\">Item</span>]()</div><div class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;numberOfTimes &#123;</div><div class=\"line\">        result.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div><div class=\"line\">repeatItem(<span class=\"string\">\"knock\"</span>, numberOfTimes: <span class=\"number\">4</span>) <span class=\"comment\">// [\"knock\", \"knock\", \"knock\", \"knock\"]</span></div></pre></td></tr></table></figure>\n<p>你也可以创建泛型函数 、方法、类、枚举和结构体。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Reimplement the Swift standard library's optional type</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OptionalValue</span>&lt;<span class=\"title\">Wrapped</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">None</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">Wrapped</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> possibleInteger: <span class=\"type\">OptionalValue</span>&lt;<span class=\"type\">Int</span>&gt; = .<span class=\"type\">None</span></div><div class=\"line\">possibleInteger = .<span class=\"type\">Some</span>(<span class=\"number\">100</span>)</div></pre></td></tr></table></figure>\n<p>在类型名后面的使用<code>where</code>来指定对类型的需求，比如，限定类型实现某一个协议，限定两个类型是相同的，或者限定某个类必须有一个特定的父类。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">anyCommonElements</span>&lt;T: SequenceType, U: SequenceType where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element&gt;<span class=\"params\">(lhs: T, <span class=\"number\">_</span> rhs: U)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> lhsItem <span class=\"keyword\">in</span> lhs &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> rhsItem <span class=\"keyword\">in</span> rhs &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> lhsItem == rhsItem &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\">anyCommonElements([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<p><code>&lt;T: Equatable&gt;</code>和<code>&lt;T where T: Equatable&gt;</code>是等价的。</p>"},{"title":"swift-life-cycle","date":"2016-06-30T09:08:15.000Z","_content":"\n### IOS生命周期\n\n|      |       IOS        | Android  |\n| ---- | :--------------: | :------: |\n|      |  viewWillAppear  | onCreate |\n|      |  viewDidAppear   | onResume |\n|      | viewWillDisapper | onPause  |\n|      |   viewDidApper   |  onStop  |\n\n","source":"_posts/ios/swift-life-cycle.md","raw":"---\ntitle: swift-life-cycle\ndate: 2016-06-30 17:08:15\ntags: ios\n---\n\n### IOS生命周期\n\n|      |       IOS        | Android  |\n| ---- | :--------------: | :------: |\n|      |  viewWillAppear  | onCreate |\n|      |  viewDidAppear   | onResume |\n|      | viewWillDisapper | onPause  |\n|      |   viewDidApper   |  onStop  |\n\n","slug":"ios/swift-life-cycle","published":1,"updated":"2016-12-23T08:48:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6u80014fq9maltck9ul","content":"<h3 id=\"IOS生命周期\"><a href=\"#IOS生命周期\" class=\"headerlink\" title=\"IOS生命周期\"></a>IOS生命周期</h3><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">IOS</th>\n<th style=\"text-align:center\">Android</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewWillAppear</td>\n<td style=\"text-align:center\">onCreate</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewDidAppear</td>\n<td style=\"text-align:center\">onResume</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewWillDisapper</td>\n<td style=\"text-align:center\">onPause</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewDidApper</td>\n<td style=\"text-align:center\">onStop</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h3 id=\"IOS生命周期\"><a href=\"#IOS生命周期\" class=\"headerlink\" title=\"IOS生命周期\"></a>IOS生命周期</h3><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">IOS</th>\n<th style=\"text-align:center\">Android</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewWillAppear</td>\n<td style=\"text-align:center\">onCreate</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewDidAppear</td>\n<td style=\"text-align:center\">onResume</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewWillDisapper</td>\n<td style=\"text-align:center\">onPause</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\">viewDidApper</td>\n<td style=\"text-align:center\">onStop</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"10个惊艳的Swift单行代码","date":"2016-05-22T10:59:51.000Z","_content":"\n# 概述\n\n> 摘至：[10 Swift One Liners To Impress Your Friends](https://www.uraimo.com/2016/01/06/10-Swift-One-Liners-To-Impress-Your-Friends/)\n\n\n\n1. 数组中的每个元素乘以2\n\n   ```swift\n   (1...1024).map{ $0 * 2 }\n   ```\n\n2. 数组中的元素求和\n\n   ```swift\n   (1...1024).reduce(0, combine: +)\n   ```\n\n<!-- More -->\n\n1. 验证在字符串是否存在指定单词\n\n   使用filter\n\n   ```swift\n   let words = [\"Swift\",\"iOS\",\"cocoa\",\"OSX\",\"tvOS\"]\n   let tweet = \"This is an example tweet larking about Swift\"\n   let valid = !words.filter({tweet.containsString($0)}).isEmpty\n   print(valid) // true\n   // or\n   words.contains(tweet.containsString)\n   // or\n   tweet.characters.split(\" \").lazy.map(String.init).contains(Set(words).contains)\n   ```\n\n2. 读取文件\n\n   ```swift\n   let path = NSBundle.mainBundle().pathForResource(\"test\", ofType: \"txt\")\n   let lines = try? String(contentsOfFile: path!).characters.split{$0 == \"\\n\"}.map(String.init)\n   if let lines=lines {\n       lines[0] // O! for a Muse of fire, that would ascend\n       lines[1] // The brightest heaven of invention!\n       lines[2] // A kingdom for a stage, princes to act\n       lines[3] // And monarchs to behold the swelling scene.\n   }\n   ```\n\n3. 祝你生日快乐!\n\n   ```swift\n    let name = \"uraimo\"\n    (1...4).forEach{print(\"Happy Birthday \" + (($0 == 3) ? \"dear \\(name)\":\"to You\"))}\n   ```\n\n4. 过滤数组中的数字\n\n   ```swift\n    var part3 = [82, 58, 76, 49, 88, 90].reduce( ([],[]), combine: {\n        (a:([Int],[Int]),n:Int) -> ([Int],[Int]) in\n        (n<60) ? (a.0+[n],a.1) : (a.0,a.1+[n])\n    })\n    print(part3) // ([58, 49], [82, 76, 88, 90])\n   ```\n\n5. 获取并解析XML Web服务\n\n   ```swift\n    let xmlDoc = try? AEXMLDocument(xmlData: NSData(contentsOfURL: NSURL(string:\"https://www.ibiblio.org/xml/examples/shakespeare/hen_v.xml\")!)!)\n    if let xmlDoc=xmlDoc {\n        var prologue = xmlDoc.root.children[6][\"PROLOGUE\"][\"SPEECH\"]\n        prologue.children[1].stringValue // Now all the youth of England are on fire,\n        prologue.children[2].stringValue // And silken dalliance in the wardrobe lies:\n        prologue.children[3].stringValue // Now thrive the armourers, and honour's thought\n        prologue.children[4].stringValue // Reigns solely in the breast of every man:\n        prologue.children[5].stringValue // They sell the pasture now to buy the horse,\n    }\n   ```\n\n6. 在数组中查找最小（或最大）值\n\n   ```swift\n    //Find the minimum of an array of Ints\n    [10,-22,753,55,137,-1,-279,1034,77].sort().first\n    [10,-22,753,55,137,-1,-279,1034,77].reduce(Int.max, combine: min)\n    [10,-22,753,55,137,-1,-279,1034,77].minElement()\n    //Find the maximum of an array of Ints\n    [10,-22,753,55,137,-1,-279,1034,77].sort().last\n    [10,-22,753,55,137,-1,-279,1034,77].reduce(Int.min, combine: max)\n    [10,-22,753,55,137,-1,-279,1034,77].maxElement()\n   ```\n\n7. 并行处理\n\n   某些语言允许用一种简单和透明的方式启用数组对功能，例如map和flatMap的并行处理，以加  快顺序和独立操作的执行。\n\n   此功能Swift中还不可用，但可以使用GCD构建：http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html\n\n8. 埃拉托斯特尼筛法\n\n   埃拉托斯特尼筛法用于查找所有的素数直到给定的上限n。\n\n   从小于n的所有整数序列开始，算法删除所有整数的倍数，直到只剩下素数。并且为了加快执行速\t度，我们实际上并不需要检查每个整数的倍数，我们止步于n的平方根就可以了。\n\n   根据这一定义首次执行可能是这样的：\n\n   ```swift\n   var n = 50\n   var primes = Set(2...n)\n\n   (2...Int(sqrt(Double(n)))).forEach{primes.subtractInPlace((2*$0).stride(through:n, by:$0))}\n   primes.sort()\n   ```\n\n   我们使用外部范围来迭代我们要检查的整数，并且对于每一个整数我们使用 stride(through:Int by:Int)计算出数字的倍数的序列。那些序列然后从Set中减去，Set用所有从2到n的整数初始化。\n\n   但正如你所看到的，为了实际移除倍数，我们使用外部可变Set，导致了附带后果。\n\n   为了消除附带后果，正如我们通常应该做的那样，我们会先计算所有序列，用倍数的单一数组来\tflatMap它们，并从初始Set中删除这些整数。\n\n   ```swift\n   var sameprimes = Set(2...n)\n\n   sameprimes.subtractInPlace((2...Int(sqrt(Double(n))))\n   \t\t\t\t\t\t   .flatMap{ (2*$0).stride(through:n, by:$0)})\n   sameprimes.sort()\n   ```\n\n   方式更清洁，使用flatMap的一个很好的例子以生成扁平化的嵌套数组。\n\n9. 元组交换\n\n   ```swift\n   var a=1, b=2\n   (a, b) = (b, a)\n   print(a) // 2\n   print(b) // 1\n   ```\n\n","source":"_posts/ios/swift-skill.md","raw":"---\ntitle: 10个惊艳的Swift单行代码\ndate: 2016-05-22 18:59:51\ntags: ios\n#top: true\n---\n\n# 概述\n\n> 摘至：[10 Swift One Liners To Impress Your Friends](https://www.uraimo.com/2016/01/06/10-Swift-One-Liners-To-Impress-Your-Friends/)\n\n\n\n1. 数组中的每个元素乘以2\n\n   ```swift\n   (1...1024).map{ $0 * 2 }\n   ```\n\n2. 数组中的元素求和\n\n   ```swift\n   (1...1024).reduce(0, combine: +)\n   ```\n\n<!-- More -->\n\n1. 验证在字符串是否存在指定单词\n\n   使用filter\n\n   ```swift\n   let words = [\"Swift\",\"iOS\",\"cocoa\",\"OSX\",\"tvOS\"]\n   let tweet = \"This is an example tweet larking about Swift\"\n   let valid = !words.filter({tweet.containsString($0)}).isEmpty\n   print(valid) // true\n   // or\n   words.contains(tweet.containsString)\n   // or\n   tweet.characters.split(\" \").lazy.map(String.init).contains(Set(words).contains)\n   ```\n\n2. 读取文件\n\n   ```swift\n   let path = NSBundle.mainBundle().pathForResource(\"test\", ofType: \"txt\")\n   let lines = try? String(contentsOfFile: path!).characters.split{$0 == \"\\n\"}.map(String.init)\n   if let lines=lines {\n       lines[0] // O! for a Muse of fire, that would ascend\n       lines[1] // The brightest heaven of invention!\n       lines[2] // A kingdom for a stage, princes to act\n       lines[3] // And monarchs to behold the swelling scene.\n   }\n   ```\n\n3. 祝你生日快乐!\n\n   ```swift\n    let name = \"uraimo\"\n    (1...4).forEach{print(\"Happy Birthday \" + (($0 == 3) ? \"dear \\(name)\":\"to You\"))}\n   ```\n\n4. 过滤数组中的数字\n\n   ```swift\n    var part3 = [82, 58, 76, 49, 88, 90].reduce( ([],[]), combine: {\n        (a:([Int],[Int]),n:Int) -> ([Int],[Int]) in\n        (n<60) ? (a.0+[n],a.1) : (a.0,a.1+[n])\n    })\n    print(part3) // ([58, 49], [82, 76, 88, 90])\n   ```\n\n5. 获取并解析XML Web服务\n\n   ```swift\n    let xmlDoc = try? AEXMLDocument(xmlData: NSData(contentsOfURL: NSURL(string:\"https://www.ibiblio.org/xml/examples/shakespeare/hen_v.xml\")!)!)\n    if let xmlDoc=xmlDoc {\n        var prologue = xmlDoc.root.children[6][\"PROLOGUE\"][\"SPEECH\"]\n        prologue.children[1].stringValue // Now all the youth of England are on fire,\n        prologue.children[2].stringValue // And silken dalliance in the wardrobe lies:\n        prologue.children[3].stringValue // Now thrive the armourers, and honour's thought\n        prologue.children[4].stringValue // Reigns solely in the breast of every man:\n        prologue.children[5].stringValue // They sell the pasture now to buy the horse,\n    }\n   ```\n\n6. 在数组中查找最小（或最大）值\n\n   ```swift\n    //Find the minimum of an array of Ints\n    [10,-22,753,55,137,-1,-279,1034,77].sort().first\n    [10,-22,753,55,137,-1,-279,1034,77].reduce(Int.max, combine: min)\n    [10,-22,753,55,137,-1,-279,1034,77].minElement()\n    //Find the maximum of an array of Ints\n    [10,-22,753,55,137,-1,-279,1034,77].sort().last\n    [10,-22,753,55,137,-1,-279,1034,77].reduce(Int.min, combine: max)\n    [10,-22,753,55,137,-1,-279,1034,77].maxElement()\n   ```\n\n7. 并行处理\n\n   某些语言允许用一种简单和透明的方式启用数组对功能，例如map和flatMap的并行处理，以加  快顺序和独立操作的执行。\n\n   此功能Swift中还不可用，但可以使用GCD构建：http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html\n\n8. 埃拉托斯特尼筛法\n\n   埃拉托斯特尼筛法用于查找所有的素数直到给定的上限n。\n\n   从小于n的所有整数序列开始，算法删除所有整数的倍数，直到只剩下素数。并且为了加快执行速\t度，我们实际上并不需要检查每个整数的倍数，我们止步于n的平方根就可以了。\n\n   根据这一定义首次执行可能是这样的：\n\n   ```swift\n   var n = 50\n   var primes = Set(2...n)\n\n   (2...Int(sqrt(Double(n)))).forEach{primes.subtractInPlace((2*$0).stride(through:n, by:$0))}\n   primes.sort()\n   ```\n\n   我们使用外部范围来迭代我们要检查的整数，并且对于每一个整数我们使用 stride(through:Int by:Int)计算出数字的倍数的序列。那些序列然后从Set中减去，Set用所有从2到n的整数初始化。\n\n   但正如你所看到的，为了实际移除倍数，我们使用外部可变Set，导致了附带后果。\n\n   为了消除附带后果，正如我们通常应该做的那样，我们会先计算所有序列，用倍数的单一数组来\tflatMap它们，并从初始Set中删除这些整数。\n\n   ```swift\n   var sameprimes = Set(2...n)\n\n   sameprimes.subtractInPlace((2...Int(sqrt(Double(n))))\n   \t\t\t\t\t\t   .flatMap{ (2*$0).stride(through:n, by:$0)})\n   sameprimes.sort()\n   ```\n\n   方式更清洁，使用flatMap的一个很好的例子以生成扁平化的嵌套数组。\n\n9. 元组交换\n\n   ```swift\n   var a=1, b=2\n   (a, b) = (b, a)\n   print(a) // 2\n   print(b) // 1\n   ```\n\n","slug":"ios/swift-skill","published":1,"updated":"2016-12-23T08:48:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ua0017fq9mx5gloc4t","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>摘至：<a href=\"https://www.uraimo.com/2016/01/06/10-Swift-One-Liners-To-Impress-Your-Friends/\" target=\"_blank\" rel=\"external\">10 Swift One Liners To Impress Your Friends</a></p>\n</blockquote>\n<ol>\n<li><p>数组中的每个元素乘以2</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">1024</span>).<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组中的元素求和</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">1024</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>验证在字符串是否存在指定单词</p>\n<p>使用filter</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> words = [<span class=\"string\">\"Swift\"</span>,<span class=\"string\">\"iOS\"</span>,<span class=\"string\">\"cocoa\"</span>,<span class=\"string\">\"OSX\"</span>,<span class=\"string\">\"tvOS\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> tweet = <span class=\"string\">\"This is an example tweet larking about Swift\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> valid = !words.<span class=\"built_in\">filter</span>(&#123;tweet.containsString($<span class=\"number\">0</span>)&#125;).isEmpty</div><div class=\"line\"><span class=\"built_in\">print</span>(valid) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">words.<span class=\"built_in\">contains</span>(tweet.containsString)</div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">tweet.characters.<span class=\"built_in\">split</span>(<span class=\"string\">\" \"</span>).<span class=\"built_in\">lazy</span>.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).<span class=\"built_in\">contains</span>(<span class=\"type\">Set</span>(words).<span class=\"built_in\">contains</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取文件</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"test\"</span>, ofType: <span class=\"string\">\"txt\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> lines = <span class=\"keyword\">try</span>? <span class=\"type\">String</span>(contentsOfFile: path!).characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\"\\n\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> lines=lines &#123;</div><div class=\"line\">    lines[<span class=\"number\">0</span>] <span class=\"comment\">// O! for a Muse of fire, that would ascend</span></div><div class=\"line\">    lines[<span class=\"number\">1</span>] <span class=\"comment\">// The brightest heaven of invention!</span></div><div class=\"line\">    lines[<span class=\"number\">2</span>] <span class=\"comment\">// A kingdom for a stage, princes to act</span></div><div class=\"line\">    lines[<span class=\"number\">3</span>] <span class=\"comment\">// And monarchs to behold the swelling scene.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>祝你生日快乐!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"uraimo\"</span></div><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">4</span>).forEach&#123;<span class=\"built_in\">print</span>(<span class=\"string\">\"Happy Birthday \"</span> + (($<span class=\"number\">0</span> == <span class=\"number\">3</span>) ? <span class=\"string\">\"dear \\(name)\"</span>:<span class=\"string\">\"to You\"</span>))&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>过滤数组中的数字</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> part3 = [<span class=\"number\">82</span>, <span class=\"number\">58</span>, <span class=\"number\">76</span>, <span class=\"number\">49</span>, <span class=\"number\">88</span>, <span class=\"number\">90</span>].<span class=\"built_in\">reduce</span>( ([],[]), combine: &#123;</div><div class=\"line\">    (a:([<span class=\"type\">Int</span>],[<span class=\"type\">Int</span>]),n:<span class=\"type\">Int</span>) -&gt; ([<span class=\"type\">Int</span>],[<span class=\"type\">Int</span>]) <span class=\"keyword\">in</span></div><div class=\"line\">    (n&lt;<span class=\"number\">60</span>) ? (a.<span class=\"number\">0</span>+[n],a.<span class=\"number\">1</span>) : (a.<span class=\"number\">0</span>,a.<span class=\"number\">1</span>+[n])</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(part3) <span class=\"comment\">// ([58, 49], [82, 76, 88, 90])</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取并解析XML Web服务</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> xmlDoc = <span class=\"keyword\">try</span>? <span class=\"type\">AEXMLDocument</span>(xmlData: <span class=\"type\">NSData</span>(contentsOfURL: <span class=\"type\">NSURL</span>(string:<span class=\"string\">\"https://www.ibiblio.org/xml/examples/shakespeare/hen_v.xml\"</span>)!)!)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> xmlDoc=xmlDoc &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prologue = xmlDoc.root.children[<span class=\"number\">6</span>][<span class=\"string\">\"PROLOGUE\"</span>][<span class=\"string\">\"SPEECH\"</span>]</div><div class=\"line\">    prologue.children[<span class=\"number\">1</span>].stringValue <span class=\"comment\">// Now all the youth of England are on fire,</span></div><div class=\"line\">    prologue.children[<span class=\"number\">2</span>].stringValue <span class=\"comment\">// And silken dalliance in the wardrobe lies:</span></div><div class=\"line\">    prologue.children[<span class=\"number\">3</span>].stringValue <span class=\"comment\">// Now thrive the armourers, and honour's thought</span></div><div class=\"line\">    prologue.children[<span class=\"number\">4</span>].stringValue <span class=\"comment\">// Reigns solely in the breast of every man:</span></div><div class=\"line\">    prologue.children[<span class=\"number\">5</span>].stringValue <span class=\"comment\">// They sell the pasture now to buy the horse,</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在数组中查找最小（或最大）值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Find the minimum of an array of Ints</span></div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">sort</span>().first</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">reduce</span>(<span class=\"type\">Int</span>.<span class=\"built_in\">max</span>, combine: <span class=\"built_in\">min</span>)</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">minElement</span>()</div><div class=\"line\"><span class=\"comment\">//Find the maximum of an array of Ints</span></div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">sort</span>().last</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">reduce</span>(<span class=\"type\">Int</span>.<span class=\"built_in\">min</span>, combine: <span class=\"built_in\">max</span>)</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">maxElement</span>()</div></pre></td></tr></table></figure>\n</li>\n<li><p>并行处理</p>\n<p>某些语言允许用一种简单和透明的方式启用数组对功能，例如map和flatMap的并行处理，以加  快顺序和独立操作的执行。</p>\n<p>此功能Swift中还不可用，但可以使用GCD构建：<a href=\"http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html\" target=\"_blank\" rel=\"external\">http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html</a></p>\n</li>\n<li><p>埃拉托斯特尼筛法</p>\n<p>埃拉托斯特尼筛法用于查找所有的素数直到给定的上限n。</p>\n<p>从小于n的所有整数序列开始，算法删除所有整数的倍数，直到只剩下素数。并且为了加快执行速    度，我们实际上并不需要检查每个整数的倍数，我们止步于n的平方根就可以了。</p>\n<p>根据这一定义首次执行可能是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"keyword\">var</span> primes = <span class=\"type\">Set</span>(<span class=\"number\">2</span>...n)</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">2</span>...<span class=\"type\">Int</span>(sqrt(<span class=\"type\">Double</span>(n)))).forEach&#123;primes.subtractInPlace((<span class=\"number\">2</span>*$<span class=\"number\">0</span>).<span class=\"built_in\">stride</span>(through:n, by:$<span class=\"number\">0</span>))&#125;</div><div class=\"line\">primes.<span class=\"built_in\">sort</span>()</div></pre></td></tr></table></figure>\n<p>我们使用外部范围来迭代我们要检查的整数，并且对于每一个整数我们使用 stride(through:Int by:Int)计算出数字的倍数的序列。那些序列然后从Set中减去，Set用所有从2到n的整数初始化。</p>\n<p>但正如你所看到的，为了实际移除倍数，我们使用外部可变Set，导致了附带后果。</p>\n<p>为了消除附带后果，正如我们通常应该做的那样，我们会先计算所有序列，用倍数的单一数组来    flatMap它们，并从初始Set中删除这些整数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sameprimes = <span class=\"type\">Set</span>(<span class=\"number\">2</span>...n)</div><div class=\"line\"></div><div class=\"line\">sameprimes.subtractInPlace((<span class=\"number\">2</span>...<span class=\"type\">Int</span>(sqrt(<span class=\"type\">Double</span>(n))))</div><div class=\"line\">\t\t\t\t\t\t   .flatMap&#123; (<span class=\"number\">2</span>*$<span class=\"number\">0</span>).<span class=\"built_in\">stride</span>(through:n, by:$<span class=\"number\">0</span>)&#125;)</div><div class=\"line\">sameprimes.<span class=\"built_in\">sort</span>()</div></pre></td></tr></table></figure>\n<p>方式更清洁，使用flatMap的一个很好的例子以生成扁平化的嵌套数组。</p>\n</li>\n<li><p>元组交换</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span></div><div class=\"line\">(a, b) = (b, a)</div><div class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>摘至：<a href=\"https://www.uraimo.com/2016/01/06/10-Swift-One-Liners-To-Impress-Your-Friends/\">10 Swift One Liners To Impress Your Friends</a></p>\n</blockquote>\n<ol>\n<li><p>数组中的每个元素乘以2</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">1024</span>).<span class=\"built_in\">map</span>&#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组中的元素求和</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">1024</span>).<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p>验证在字符串是否存在指定单词</p>\n<p>使用filter</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> words = [<span class=\"string\">\"Swift\"</span>,<span class=\"string\">\"iOS\"</span>,<span class=\"string\">\"cocoa\"</span>,<span class=\"string\">\"OSX\"</span>,<span class=\"string\">\"tvOS\"</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> tweet = <span class=\"string\">\"This is an example tweet larking about Swift\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> valid = !words.<span class=\"built_in\">filter</span>(&#123;tweet.containsString($<span class=\"number\">0</span>)&#125;).isEmpty</div><div class=\"line\"><span class=\"built_in\">print</span>(valid) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">words.<span class=\"built_in\">contains</span>(tweet.containsString)</div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">tweet.characters.<span class=\"built_in\">split</span>(<span class=\"string\">\" \"</span>).<span class=\"built_in\">lazy</span>.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>).<span class=\"built_in\">contains</span>(<span class=\"type\">Set</span>(words).<span class=\"built_in\">contains</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取文件</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"type\">NSBundle</span>.mainBundle().pathForResource(<span class=\"string\">\"test\"</span>, ofType: <span class=\"string\">\"txt\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> lines = <span class=\"keyword\">try</span>? <span class=\"type\">String</span>(contentsOfFile: path!).characters.<span class=\"built_in\">split</span>&#123;$<span class=\"number\">0</span> == <span class=\"string\">\"\\n\"</span>&#125;.<span class=\"built_in\">map</span>(<span class=\"type\">String</span>.<span class=\"keyword\">init</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> lines=lines &#123;</div><div class=\"line\">    lines[<span class=\"number\">0</span>] <span class=\"comment\">// O! for a Muse of fire, that would ascend</span></div><div class=\"line\">    lines[<span class=\"number\">1</span>] <span class=\"comment\">// The brightest heaven of invention!</span></div><div class=\"line\">    lines[<span class=\"number\">2</span>] <span class=\"comment\">// A kingdom for a stage, princes to act</span></div><div class=\"line\">    lines[<span class=\"number\">3</span>] <span class=\"comment\">// And monarchs to behold the swelling scene.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>祝你生日快乐!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"uraimo\"</span></div><div class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">4</span>).forEach&#123;<span class=\"built_in\">print</span>(<span class=\"string\">\"Happy Birthday \"</span> + (($<span class=\"number\">0</span> == <span class=\"number\">3</span>) ? <span class=\"string\">\"dear \\(name)\"</span>:<span class=\"string\">\"to You\"</span>))&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>过滤数组中的数字</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> part3 = [<span class=\"number\">82</span>, <span class=\"number\">58</span>, <span class=\"number\">76</span>, <span class=\"number\">49</span>, <span class=\"number\">88</span>, <span class=\"number\">90</span>].<span class=\"built_in\">reduce</span>( ([],[]), combine: &#123;</div><div class=\"line\">    (a:([<span class=\"type\">Int</span>],[<span class=\"type\">Int</span>]),n:<span class=\"type\">Int</span>) -&gt; ([<span class=\"type\">Int</span>],[<span class=\"type\">Int</span>]) <span class=\"keyword\">in</span></div><div class=\"line\">    (n&lt;<span class=\"number\">60</span>) ? (a.<span class=\"number\">0</span>+[n],a.<span class=\"number\">1</span>) : (a.<span class=\"number\">0</span>,a.<span class=\"number\">1</span>+[n])</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">print</span>(part3) <span class=\"comment\">// ([58, 49], [82, 76, 88, 90])</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取并解析XML Web服务</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> xmlDoc = <span class=\"keyword\">try</span>? <span class=\"type\">AEXMLDocument</span>(xmlData: <span class=\"type\">NSData</span>(contentsOfURL: <span class=\"type\">NSURL</span>(string:<span class=\"string\">\"https://www.ibiblio.org/xml/examples/shakespeare/hen_v.xml\"</span>)!)!)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> xmlDoc=xmlDoc &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> prologue = xmlDoc.root.children[<span class=\"number\">6</span>][<span class=\"string\">\"PROLOGUE\"</span>][<span class=\"string\">\"SPEECH\"</span>]</div><div class=\"line\">    prologue.children[<span class=\"number\">1</span>].stringValue <span class=\"comment\">// Now all the youth of England are on fire,</span></div><div class=\"line\">    prologue.children[<span class=\"number\">2</span>].stringValue <span class=\"comment\">// And silken dalliance in the wardrobe lies:</span></div><div class=\"line\">    prologue.children[<span class=\"number\">3</span>].stringValue <span class=\"comment\">// Now thrive the armourers, and honour's thought</span></div><div class=\"line\">    prologue.children[<span class=\"number\">4</span>].stringValue <span class=\"comment\">// Reigns solely in the breast of every man:</span></div><div class=\"line\">    prologue.children[<span class=\"number\">5</span>].stringValue <span class=\"comment\">// They sell the pasture now to buy the horse,</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在数组中查找最小（或最大）值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Find the minimum of an array of Ints</span></div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">sort</span>().first</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">reduce</span>(<span class=\"type\">Int</span>.<span class=\"built_in\">max</span>, combine: <span class=\"built_in\">min</span>)</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">minElement</span>()</div><div class=\"line\"><span class=\"comment\">//Find the maximum of an array of Ints</span></div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">sort</span>().last</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">reduce</span>(<span class=\"type\">Int</span>.<span class=\"built_in\">min</span>, combine: <span class=\"built_in\">max</span>)</div><div class=\"line\">[<span class=\"number\">10</span>,-<span class=\"number\">22</span>,<span class=\"number\">753</span>,<span class=\"number\">55</span>,<span class=\"number\">137</span>,-<span class=\"number\">1</span>,-<span class=\"number\">279</span>,<span class=\"number\">1034</span>,<span class=\"number\">77</span>].<span class=\"built_in\">maxElement</span>()</div></pre></td></tr></table></figure>\n</li>\n<li><p>并行处理</p>\n<p>某些语言允许用一种简单和透明的方式启用数组对功能，例如map和flatMap的并行处理，以加  快顺序和独立操作的执行。</p>\n<p>此功能Swift中还不可用，但可以使用GCD构建：<a href=\"http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html\">http://moreindirection.blogspot.it/2015/07/gcd-and-parallel-collections-in-swift.html</a></p>\n</li>\n<li><p>埃拉托斯特尼筛法</p>\n<p>埃拉托斯特尼筛法用于查找所有的素数直到给定的上限n。</p>\n<p>从小于n的所有整数序列开始，算法删除所有整数的倍数，直到只剩下素数。并且为了加快执行速    度，我们实际上并不需要检查每个整数的倍数，我们止步于n的平方根就可以了。</p>\n<p>根据这一定义首次执行可能是这样的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">50</span></div><div class=\"line\"><span class=\"keyword\">var</span> primes = <span class=\"type\">Set</span>(<span class=\"number\">2</span>...n)</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">2</span>...<span class=\"type\">Int</span>(sqrt(<span class=\"type\">Double</span>(n)))).forEach&#123;primes.subtractInPlace((<span class=\"number\">2</span>*$<span class=\"number\">0</span>).<span class=\"built_in\">stride</span>(through:n, by:$<span class=\"number\">0</span>))&#125;</div><div class=\"line\">primes.<span class=\"built_in\">sort</span>()</div></pre></td></tr></table></figure>\n<p>我们使用外部范围来迭代我们要检查的整数，并且对于每一个整数我们使用 stride(through:Int by:Int)计算出数字的倍数的序列。那些序列然后从Set中减去，Set用所有从2到n的整数初始化。</p>\n<p>但正如你所看到的，为了实际移除倍数，我们使用外部可变Set，导致了附带后果。</p>\n<p>为了消除附带后果，正如我们通常应该做的那样，我们会先计算所有序列，用倍数的单一数组来    flatMap它们，并从初始Set中删除这些整数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sameprimes = <span class=\"type\">Set</span>(<span class=\"number\">2</span>...n)</div><div class=\"line\"></div><div class=\"line\">sameprimes.subtractInPlace((<span class=\"number\">2</span>...<span class=\"type\">Int</span>(sqrt(<span class=\"type\">Double</span>(n))))</div><div class=\"line\">\t\t\t\t\t\t   .flatMap&#123; (<span class=\"number\">2</span>*$<span class=\"number\">0</span>).<span class=\"built_in\">stride</span>(through:n, by:$<span class=\"number\">0</span>)&#125;)</div><div class=\"line\">sameprimes.<span class=\"built_in\">sort</span>()</div></pre></td></tr></table></figure>\n<p>方式更清洁，使用flatMap的一个很好的例子以生成扁平化的嵌套数组。</p>\n</li>\n<li><p>元组交换</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span></div><div class=\"line\">(a, b) = (b, a)</div><div class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Hexo错误集锦","date":"2018-01-30T02:38:13.000Z","_content":"\n使用Hexo部署的过程中报出以下错误。\n\n```python\nHexo: TypeError: Cannot set property 'lastIndex' of undefined\n```\n\n解决方法：打开主工程的配置文件_config.yml(非主题里面的配置文件)，找到`auto_detect`，设置为false即可 ","source":"_posts/hole/hexo-error.md","raw":"---\ntitle: Hexo错误集锦\ndate: 2018-01-30 10:38:13\ntags: hole\n---\n\n使用Hexo部署的过程中报出以下错误。\n\n```python\nHexo: TypeError: Cannot set property 'lastIndex' of undefined\n```\n\n解决方法：打开主工程的配置文件_config.yml(非主题里面的配置文件)，找到`auto_detect`，设置为false即可 ","slug":"hole/hexo-error","published":1,"updated":"2018-01-30T03:55:50.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ud0019fq9mbrvh5p9l","content":"<p>使用Hexo部署的过程中报出以下错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hexo: TypeError: Cannot set property <span class=\"string\">'lastIndex'</span> of undefined</div></pre></td></tr></table></figure>\n<p>解决方法：打开主工程的配置文件_config.yml(非主题里面的配置文件)，找到<code>auto_detect</code>，设置为false即可 </p>\n","excerpt":"","more":"<p>使用Hexo部署的过程中报出以下错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hexo: TypeError: Cannot set property <span class=\"string\">'lastIndex'</span> of undefined</div></pre></td></tr></table></figure>\n<p>解决方法：打开主工程的配置文件_config.yml(非主题里面的配置文件)，找到<code>auto_detect</code>，设置为false即可 </p>\n"},{"title":"记一次Android端H5调用微信支付引发的坑","date":"2018-01-30T07:28:26.000Z","_content":"\n### 事件背景\n\n今天一位H5的同事过来找我们，说他们在H5里调用微信支付(不是通过jsapi调用)，到支付界面，点击返回键，会导致APP重新启动，把`webview`给关掉了\n\n### 事件原因分析\n\n经过我一顿猛操作，最后发现原来是`webview`设置`userAgent`引发的问题。\n\n因为H5的要求，我们会在`userAgent`里设置一些信息，这里以`abc`为例，我们把`abc`这个字符串设置到了`userAgent`里，同时在`AndroidManifest`的`activity`节点注册了`abc`的`scheme`\n\n```java\n// 设置userAgent\nwebSettings.setUserAgentString(ua + \" abc/\" + getVersionName());\n```\n\n```java\n// 设置scheme\n<intent-filter>\n  <data android:scheme=\"abc\" />\n  <action android:name=\"android.intent.action.VIEW\" />\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n</intent-filter>\n```\n\n这里设置之后，当点击微信支付的返回按钮后，发现微信会发起一个类似下面结构的`Intent`:\n\n```\nurl: abc://\naction: android.intent.action.VIEW\n```\n\n这里导致我们注册的`scheme`的`Activiy`会接收到，导致应用重启。\n\n### 解决办法\n\n通过我们的观察，发现`scheme`是区别大小写的，我们最后把`userAgent`的`abc`改成大写`ABC`就OK了","source":"_posts/hole/hole-android-js-wxpay.md","raw":"---\ntitle: 记一次Android端H5调用微信支付引发的坑\ndate: 2018-01-30 15:28:26\ntags: hole\n---\n\n### 事件背景\n\n今天一位H5的同事过来找我们，说他们在H5里调用微信支付(不是通过jsapi调用)，到支付界面，点击返回键，会导致APP重新启动，把`webview`给关掉了\n\n### 事件原因分析\n\n经过我一顿猛操作，最后发现原来是`webview`设置`userAgent`引发的问题。\n\n因为H5的要求，我们会在`userAgent`里设置一些信息，这里以`abc`为例，我们把`abc`这个字符串设置到了`userAgent`里，同时在`AndroidManifest`的`activity`节点注册了`abc`的`scheme`\n\n```java\n// 设置userAgent\nwebSettings.setUserAgentString(ua + \" abc/\" + getVersionName());\n```\n\n```java\n// 设置scheme\n<intent-filter>\n  <data android:scheme=\"abc\" />\n  <action android:name=\"android.intent.action.VIEW\" />\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n</intent-filter>\n```\n\n这里设置之后，当点击微信支付的返回按钮后，发现微信会发起一个类似下面结构的`Intent`:\n\n```\nurl: abc://\naction: android.intent.action.VIEW\n```\n\n这里导致我们注册的`scheme`的`Activiy`会接收到，导致应用重启。\n\n### 解决办法\n\n通过我们的观察，发现`scheme`是区别大小写的，我们最后把`userAgent`的`abc`改成大写`ABC`就OK了","slug":"hole/hole-android-js-wxpay","published":1,"updated":"2018-01-30T07:42:45.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ue001bfq9m88zvgpbc","content":"<h3 id=\"事件背景\"><a href=\"#事件背景\" class=\"headerlink\" title=\"事件背景\"></a>事件背景</h3><p>今天一位H5的同事过来找我们，说他们在H5里调用微信支付(不是通过jsapi调用)，到支付界面，点击返回键，会导致APP重新启动，把<code>webview</code>给关掉了</p>\n<h3 id=\"事件原因分析\"><a href=\"#事件原因分析\" class=\"headerlink\" title=\"事件原因分析\"></a>事件原因分析</h3><p>经过我一顿猛操作，最后发现原来是<code>webview</code>设置<code>userAgent</code>引发的问题。</p>\n<p>因为H5的要求，我们会在<code>userAgent</code>里设置一些信息，这里以<code>abc</code>为例，我们把<code>abc</code>这个字符串设置到了<code>userAgent</code>里，同时在<code>AndroidManifest</code>的<code>activity</code>节点注册了<code>abc</code>的<code>scheme</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置userAgent</span></div><div class=\"line\">webSettings.setUserAgentString(ua + <span class=\"string\">\" abc/\"</span> + getVersionName());</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置scheme</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;data android:scheme=\"abc\" /&gt;</div><div class=\"line\">  &lt;action android:name=\"android.intent.action.VIEW\" /&gt;</div><div class=\"line\">  &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</div><div class=\"line\">  &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>这里设置之后，当点击微信支付的返回按钮后，发现微信会发起一个类似下面结构的<code>Intent</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: abc://</div><div class=\"line\">action: android.intent.action.VIEW</div></pre></td></tr></table></figure>\n<p>这里导致我们注册的<code>scheme</code>的<code>Activiy</code>会接收到，导致应用重启。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>通过我们的观察，发现<code>scheme</code>是区别大小写的，我们最后把<code>userAgent</code>的<code>abc</code>改成大写<code>ABC</code>就OK了</p>\n","excerpt":"","more":"<h3 id=\"事件背景\"><a href=\"#事件背景\" class=\"headerlink\" title=\"事件背景\"></a>事件背景</h3><p>今天一位H5的同事过来找我们，说他们在H5里调用微信支付(不是通过jsapi调用)，到支付界面，点击返回键，会导致APP重新启动，把<code>webview</code>给关掉了</p>\n<h3 id=\"事件原因分析\"><a href=\"#事件原因分析\" class=\"headerlink\" title=\"事件原因分析\"></a>事件原因分析</h3><p>经过我一顿猛操作，最后发现原来是<code>webview</code>设置<code>userAgent</code>引发的问题。</p>\n<p>因为H5的要求，我们会在<code>userAgent</code>里设置一些信息，这里以<code>abc</code>为例，我们把<code>abc</code>这个字符串设置到了<code>userAgent</code>里，同时在<code>AndroidManifest</code>的<code>activity</code>节点注册了<code>abc</code>的<code>scheme</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置userAgent</span></div><div class=\"line\">webSettings.setUserAgentString(ua + <span class=\"string\">\" abc/\"</span> + getVersionName());</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置scheme</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;data android:scheme=\"abc\" /&gt;</div><div class=\"line\">  &lt;action android:name=\"android.intent.action.VIEW\" /&gt;</div><div class=\"line\">  &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</div><div class=\"line\">  &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>这里设置之后，当点击微信支付的返回按钮后，发现微信会发起一个类似下面结构的<code>Intent</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: abc://</div><div class=\"line\">action: android.intent.action.VIEW</div></pre></td></tr></table></figure>\n<p>这里导致我们注册的<code>scheme</code>的<code>Activiy</code>会接收到，导致应用重启。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>通过我们的观察，发现<code>scheme</code>是区别大小写的，我们最后把<code>userAgent</code>的<code>abc</code>改成大写<code>ABC</code>就OK了</p>\n"},{"title":"jenkins-android","date":"2017-07-07T03:37:13.000Z","_content":"\n之前用jenkins打包时，提示`Failed to find Build Tools revision xx.x.x` ，于是进入到`var/lib/jenkins/tools/android-sdk/tools/`下面，输入下面命令\n\n```java\nandroid list sdk -a\n```\n\n控制台没有反应，于是又试了下其他命令\n\n<!-- More -->\n\n```java\nandroid -h\n```\n\n也没反应，瞬间懵逼。于是想看看其它命令是不是也没反应，切换到platform-tools目录去执行 adb 命令：\n\n出现\"libc.so.6: version 'GLIBC_2.15' not found\"问题，才知道是由于glibc版本过低，升级glibc即可。\n\n参照：http://blog.csdn.net/hnhuangyiyang/article/details/50392997\n\n1.查看系统glibc支持的版本\n\n```java\nstrings /lib64/libc.so.6 |grep GLIBC  \n#查看当前glibc版本  \nll /lib64/libc.so.6   \nlrwxrwxrwx. 1 root root 12 Oct  9  2014 /lib64/libc.so.6 -> libc-2.12.so  \n```\n\n2.下载glibc源码包 (http://ftp.gnu.org/gnu/glibc/)\n\n```java\ncd /usr/src/  \nwget http://mirror.bjtu.edu.cn/gnu/glibc/glibc-2.15.tar.gz  \nwget http://mirror.bjtu.edu.cn/gnu/glibc/glibc-ports-2.15.tar.gz　　　　　　#glibc插件 \n```\n\n3.解压安装升级glibc\n\n```java\ntar zxvf glibc-2.15.tar.gz  \ntar zxvf glibc-ports-2.15.tar.gz  \nmv glibc-ports-2.15 glibc-2.15/ports  \nmkdir build  \ncd build  \n../glibc-2.15/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin  \nmake -j4  \nmake install\n```\n\n4.验证(查看系统glibc支持的版本)\n\n```java\nstrings /lib64/libc.so.6 |grep GLIBC \n```\n\n5.误删libc.so.6解决办法(命令行执行如下：)\n\n```java\n#LD_PRELOAD=/lib/libc-2.12.so ln -s /lib/libc-2.12.so lib/libc.so.6 \n```\n\n升级完glibc之后，android 命令终于有反应了，继续执行\n\n```\nandroid list sdk -a\n```\n\n卡住了，想了想应该是被墙的原因，还好androd命令提供了代理参数：\n\n```java\n--proxy-host //设置代理host\n--proxy-port //设置代理端口\n```\n\n网络找了找个国内的Android代理镜像服务器\n\n```java\nhttp://mirrors.neusoft.edu.cn 端口：80\n```\n\n接下来执行\n\n```java\nandroid list sdk --proxy-host mirrors.neusoft.edu.cn --proxy-port 80 -s --all\n```\n\n成功了\n\n```java\nPackages available for installation or update: 184\n   1- Android SDK Tools, revision 25.2.5\n   2- Android SDK Platform-tools, revision 26\n   3- Android SDK Build-tools, revision 26\n   4- Android SDK Build-tools, revision 25.0.3\n   5- Android SDK Build-tools, revision 25.0.2\n   6- Android SDK Build-tools, revision 25.0.1\n   7- Android SDK Build-tools, revision 25\n   8- Android SDK Build-tools, revision 24.0.3\n   9- Android SDK Build-tools, revision 24.0.2\n  10- Android SDK Build-tools, revision 24.0.1\n  11- Android SDK Build-tools, revision 24\n```\n\n接下来执行下载sdk命令\n\n```java\n// --filter 3后面的数字3对面上面列表的项，这时表示下载 (3- Android SDK Build-tools, revision 26)\nandroid update sdk --no-ui --filter 3 --proxy-host mirrors.neusoft.edu.cn --proxy-port 80 -s --all\n```\n\n安装的时候会提示是否接受`license`\n\n类似\n\n```\nDo you accept the license 'android-sdk-license-c81a61d9' [y/n]:\n```\n\n输入`y`之后开始下载，等待安装成功，又可以愉快的玩耍了","source":"_posts/hole/jenkins-android.md","raw":"---\ntitle: jenkins-android\ndate: 2017-07-07 11:37:13\ntags: hole\n---\n\n之前用jenkins打包时，提示`Failed to find Build Tools revision xx.x.x` ，于是进入到`var/lib/jenkins/tools/android-sdk/tools/`下面，输入下面命令\n\n```java\nandroid list sdk -a\n```\n\n控制台没有反应，于是又试了下其他命令\n\n<!-- More -->\n\n```java\nandroid -h\n```\n\n也没反应，瞬间懵逼。于是想看看其它命令是不是也没反应，切换到platform-tools目录去执行 adb 命令：\n\n出现\"libc.so.6: version 'GLIBC_2.15' not found\"问题，才知道是由于glibc版本过低，升级glibc即可。\n\n参照：http://blog.csdn.net/hnhuangyiyang/article/details/50392997\n\n1.查看系统glibc支持的版本\n\n```java\nstrings /lib64/libc.so.6 |grep GLIBC  \n#查看当前glibc版本  \nll /lib64/libc.so.6   \nlrwxrwxrwx. 1 root root 12 Oct  9  2014 /lib64/libc.so.6 -> libc-2.12.so  \n```\n\n2.下载glibc源码包 (http://ftp.gnu.org/gnu/glibc/)\n\n```java\ncd /usr/src/  \nwget http://mirror.bjtu.edu.cn/gnu/glibc/glibc-2.15.tar.gz  \nwget http://mirror.bjtu.edu.cn/gnu/glibc/glibc-ports-2.15.tar.gz　　　　　　#glibc插件 \n```\n\n3.解压安装升级glibc\n\n```java\ntar zxvf glibc-2.15.tar.gz  \ntar zxvf glibc-ports-2.15.tar.gz  \nmv glibc-ports-2.15 glibc-2.15/ports  \nmkdir build  \ncd build  \n../glibc-2.15/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin  \nmake -j4  \nmake install\n```\n\n4.验证(查看系统glibc支持的版本)\n\n```java\nstrings /lib64/libc.so.6 |grep GLIBC \n```\n\n5.误删libc.so.6解决办法(命令行执行如下：)\n\n```java\n#LD_PRELOAD=/lib/libc-2.12.so ln -s /lib/libc-2.12.so lib/libc.so.6 \n```\n\n升级完glibc之后，android 命令终于有反应了，继续执行\n\n```\nandroid list sdk -a\n```\n\n卡住了，想了想应该是被墙的原因，还好androd命令提供了代理参数：\n\n```java\n--proxy-host //设置代理host\n--proxy-port //设置代理端口\n```\n\n网络找了找个国内的Android代理镜像服务器\n\n```java\nhttp://mirrors.neusoft.edu.cn 端口：80\n```\n\n接下来执行\n\n```java\nandroid list sdk --proxy-host mirrors.neusoft.edu.cn --proxy-port 80 -s --all\n```\n\n成功了\n\n```java\nPackages available for installation or update: 184\n   1- Android SDK Tools, revision 25.2.5\n   2- Android SDK Platform-tools, revision 26\n   3- Android SDK Build-tools, revision 26\n   4- Android SDK Build-tools, revision 25.0.3\n   5- Android SDK Build-tools, revision 25.0.2\n   6- Android SDK Build-tools, revision 25.0.1\n   7- Android SDK Build-tools, revision 25\n   8- Android SDK Build-tools, revision 24.0.3\n   9- Android SDK Build-tools, revision 24.0.2\n  10- Android SDK Build-tools, revision 24.0.1\n  11- Android SDK Build-tools, revision 24\n```\n\n接下来执行下载sdk命令\n\n```java\n// --filter 3后面的数字3对面上面列表的项，这时表示下载 (3- Android SDK Build-tools, revision 26)\nandroid update sdk --no-ui --filter 3 --proxy-host mirrors.neusoft.edu.cn --proxy-port 80 -s --all\n```\n\n安装的时候会提示是否接受`license`\n\n类似\n\n```\nDo you accept the license 'android-sdk-license-c81a61d9' [y/n]:\n```\n\n输入`y`之后开始下载，等待安装成功，又可以愉快的玩耍了","slug":"hole/jenkins-android","published":1,"updated":"2018-01-26T09:30:32.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ug001dfq9m5jzghafk","content":"<p>之前用jenkins打包时，提示<code>Failed to find Build Tools revision xx.x.x</code> ，于是进入到<code>var/lib/jenkins/tools/android-sdk/tools/</code>下面，输入下面命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk -a</div></pre></td></tr></table></figure>\n<p>控制台没有反应，于是又试了下其他命令</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android -h</div></pre></td></tr></table></figure>\n<p>也没反应，瞬间懵逼。于是想看看其它命令是不是也没反应，切换到platform-tools目录去执行 adb 命令：</p>\n<p>出现”libc.so.6: version ‘GLIBC_2.15’ not found”问题，才知道是由于glibc版本过低，升级glibc即可。</p>\n<p>参照：<a href=\"http://blog.csdn.net/hnhuangyiyang/article/details/50392997\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hnhuangyiyang/article/details/50392997</a></p>\n<p>1.查看系统glibc支持的版本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings /lib64/libc.so.6 |grep GLIBC  </div><div class=\"line\">#查看当前glibc版本  </div><div class=\"line\">ll /lib64/libc.so.6   </div><div class=\"line\">lrwxrwxrwx. 1 root root 12 Oct  9  2014 /lib64/libc.so.6 -&gt; libc-2.12.so</div></pre></td></tr></table></figure>\n<p>2.下载glibc源码包 (<a href=\"http://ftp.gnu.org/gnu/glibc/\" target=\"_blank\" rel=\"external\">http://ftp.gnu.org/gnu/glibc/</a>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/src/  </div><div class=\"line\">wget http:<span class=\"comment\">//mirror.bjtu.edu.cn/gnu/glibc/glibc-2.15.tar.gz  </span></div><div class=\"line\">wget http:<span class=\"comment\">//mirror.bjtu.edu.cn/gnu/glibc/glibc-ports-2.15.tar.gz　　　　　　#glibc插件</span></div></pre></td></tr></table></figure>\n<p>3.解压安装升级glibc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf glibc-<span class=\"number\">2.15</span>.tar.gz  </div><div class=\"line\">tar zxvf glibc-ports-<span class=\"number\">2.15</span>.tar.gz  </div><div class=\"line\">mv glibc-ports-<span class=\"number\">2.15</span> glibc-<span class=\"number\">2.15</span>/ports  </div><div class=\"line\">mkdir build  </div><div class=\"line\">cd build  </div><div class=\"line\">../glibc-<span class=\"number\">2.15</span>/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin  </div><div class=\"line\">make -j4  </div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>4.验证(查看系统glibc支持的版本)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings /lib64/libc.so.6 |grep GLIBC</div></pre></td></tr></table></figure>\n<p>5.误删libc.so.6解决办法(命令行执行如下：)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#LD_PRELOAD=/lib/libc-2.12.so ln -s /lib/libc-2.12.so lib/libc.so.6</div></pre></td></tr></table></figure>\n<p>升级完glibc之后，android 命令终于有反应了，继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk -a</div></pre></td></tr></table></figure>\n<p>卡住了，想了想应该是被墙的原因，还好androd命令提供了代理参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">--proxy-host <span class=\"comment\">//设置代理host</span></div><div class=\"line\">--proxy-port <span class=\"comment\">//设置代理端口</span></div></pre></td></tr></table></figure>\n<p>网络找了找个国内的Android代理镜像服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//mirrors.neusoft.edu.cn 端口：80</span></div></pre></td></tr></table></figure>\n<p>接下来执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk --proxy-host mirrors.neusoft.edu.cn --proxy-port <span class=\"number\">80</span> -s --all</div></pre></td></tr></table></figure>\n<p>成功了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Packages available <span class=\"keyword\">for</span> installation or update: <span class=\"number\">184</span></div><div class=\"line\">   <span class=\"number\">1</span>- Android SDK Tools, revision <span class=\"number\">25.2</span>.5</div><div class=\"line\">   <span class=\"number\">2</span>- Android SDK Platform-tools, revision <span class=\"number\">26</span></div><div class=\"line\">   <span class=\"number\">3</span>- Android SDK Build-tools, revision <span class=\"number\">26</span></div><div class=\"line\">   <span class=\"number\">4</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.3</div><div class=\"line\">   <span class=\"number\">5</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.2</div><div class=\"line\">   <span class=\"number\">6</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.1</div><div class=\"line\">   <span class=\"number\">7</span>- Android SDK Build-tools, revision <span class=\"number\">25</span></div><div class=\"line\">   <span class=\"number\">8</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.3</div><div class=\"line\">   <span class=\"number\">9</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.2</div><div class=\"line\">  <span class=\"number\">10</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.1</div><div class=\"line\">  <span class=\"number\">11</span>- Android SDK Build-tools, revision <span class=\"number\">24</span></div></pre></td></tr></table></figure>\n<p>接下来执行下载sdk命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// --filter 3后面的数字3对面上面列表的项，这时表示下载 (3- Android SDK Build-tools, revision 26)</span></div><div class=\"line\">android update sdk --no-ui --filter <span class=\"number\">3</span> --proxy-host mirrors.neusoft.edu.cn --proxy-port <span class=\"number\">80</span> -s --all</div></pre></td></tr></table></figure>\n<p>安装的时候会提示是否接受<code>license</code></p>\n<p>类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Do you accept the license &apos;android-sdk-license-c81a61d9&apos; [y/n]:</div></pre></td></tr></table></figure>\n<p>输入<code>y</code>之后开始下载，等待安装成功，又可以愉快的玩耍了</p>\n","excerpt":"<p>之前用jenkins打包时，提示<code>Failed to find Build Tools revision xx.x.x</code> ，于是进入到<code>var/lib/jenkins/tools/android-sdk/tools/</code>下面，输入下面命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk -a</div></pre></td></tr></table></figure>\n<p>控制台没有反应，于是又试了下其他命令</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android -h</div></pre></td></tr></table></figure>\n<p>也没反应，瞬间懵逼。于是想看看其它命令是不是也没反应，切换到platform-tools目录去执行 adb 命令：</p>\n<p>出现”libc.so.6: version ‘GLIBC_2.15’ not found”问题，才知道是由于glibc版本过低，升级glibc即可。</p>\n<p>参照：<a href=\"http://blog.csdn.net/hnhuangyiyang/article/details/50392997\">http://blog.csdn.net/hnhuangyiyang/article/details/50392997</a></p>\n<p>1.查看系统glibc支持的版本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings /lib64/libc.so.6 |grep GLIBC  </div><div class=\"line\">#查看当前glibc版本  </div><div class=\"line\">ll /lib64/libc.so.6   </div><div class=\"line\">lrwxrwxrwx. 1 root root 12 Oct  9  2014 /lib64/libc.so.6 -&gt; libc-2.12.so</div></pre></td></tr></table></figure>\n<p>2.下载glibc源码包 (<a href=\"http://ftp.gnu.org/gnu/glibc/\">http://ftp.gnu.org/gnu/glibc/</a>)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/src/  </div><div class=\"line\">wget http:<span class=\"comment\">//mirror.bjtu.edu.cn/gnu/glibc/glibc-2.15.tar.gz  </span></div><div class=\"line\">wget http:<span class=\"comment\">//mirror.bjtu.edu.cn/gnu/glibc/glibc-ports-2.15.tar.gz　　　　　　#glibc插件</span></div></pre></td></tr></table></figure>\n<p>3.解压安装升级glibc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf glibc-<span class=\"number\">2.15</span>.tar.gz  </div><div class=\"line\">tar zxvf glibc-ports-<span class=\"number\">2.15</span>.tar.gz  </div><div class=\"line\">mv glibc-ports-<span class=\"number\">2.15</span> glibc-<span class=\"number\">2.15</span>/ports  </div><div class=\"line\">mkdir build  </div><div class=\"line\">cd build  </div><div class=\"line\">../glibc-<span class=\"number\">2.15</span>/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin  </div><div class=\"line\">make -j4  </div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>4.验证(查看系统glibc支持的版本)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strings /lib64/libc.so.6 |grep GLIBC</div></pre></td></tr></table></figure>\n<p>5.误删libc.so.6解决办法(命令行执行如下：)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#LD_PRELOAD=/lib/libc-2.12.so ln -s /lib/libc-2.12.so lib/libc.so.6</div></pre></td></tr></table></figure>\n<p>升级完glibc之后，android 命令终于有反应了，继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk -a</div></pre></td></tr></table></figure>\n<p>卡住了，想了想应该是被墙的原因，还好androd命令提供了代理参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">--proxy-host <span class=\"comment\">//设置代理host</span></div><div class=\"line\">--proxy-port <span class=\"comment\">//设置代理端口</span></div></pre></td></tr></table></figure>\n<p>网络找了找个国内的Android代理镜像服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//mirrors.neusoft.edu.cn 端口：80</span></div></pre></td></tr></table></figure>\n<p>接下来执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android list sdk --proxy-host mirrors.neusoft.edu.cn --proxy-port <span class=\"number\">80</span> -s --all</div></pre></td></tr></table></figure>\n<p>成功了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Packages available <span class=\"keyword\">for</span> installation or update: <span class=\"number\">184</span></div><div class=\"line\">   <span class=\"number\">1</span>- Android SDK Tools, revision <span class=\"number\">25.2</span>.5</div><div class=\"line\">   <span class=\"number\">2</span>- Android SDK Platform-tools, revision <span class=\"number\">26</span></div><div class=\"line\">   <span class=\"number\">3</span>- Android SDK Build-tools, revision <span class=\"number\">26</span></div><div class=\"line\">   <span class=\"number\">4</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.3</div><div class=\"line\">   <span class=\"number\">5</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.2</div><div class=\"line\">   <span class=\"number\">6</span>- Android SDK Build-tools, revision <span class=\"number\">25.0</span>.1</div><div class=\"line\">   <span class=\"number\">7</span>- Android SDK Build-tools, revision <span class=\"number\">25</span></div><div class=\"line\">   <span class=\"number\">8</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.3</div><div class=\"line\">   <span class=\"number\">9</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.2</div><div class=\"line\">  <span class=\"number\">10</span>- Android SDK Build-tools, revision <span class=\"number\">24.0</span>.1</div><div class=\"line\">  <span class=\"number\">11</span>- Android SDK Build-tools, revision <span class=\"number\">24</span></div></pre></td></tr></table></figure>\n<p>接下来执行下载sdk命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// --filter 3后面的数字3对面上面列表的项，这时表示下载 (3- Android SDK Build-tools, revision 26)</span></div><div class=\"line\">android update sdk --no-ui --filter <span class=\"number\">3</span> --proxy-host mirrors.neusoft.edu.cn --proxy-port <span class=\"number\">80</span> -s --all</div></pre></td></tr></table></figure>\n<p>安装的时候会提示是否接受<code>license</code></p>\n<p>类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Do you accept the license &apos;android-sdk-license-c81a61d9&apos; [y/n]:</div></pre></td></tr></table></figure>\n<p>输入<code>y</code>之后开始下载，等待安装成功，又可以愉快的玩耍了</p>"},{"title":"css-border","date":"2017-07-11T09:28:04.000Z","_content":"\n#### 本章主要包含以下内容\n\n```\n边框>内阴影>背景图片>背景颜色>外阴影\n```\n\n- border-radius\n- box-shadow\n- border-image\n\n<!-- More -->\n\n**浏览器支持**\n\n|               | IE 9 + | Firefox 3.5 | Chrome | Safari | Opera |\n| ------------- | ------ | ----------- | ------ | ------ | ----- |\n| border-radius | YES    | YES         | YES    | YES    | YES   |\n| box-shadow    | YES    | YES         | YES    | YES    | YES   |\n| border-image  | NO     | YES         | YES    | YES    | YES   |\n\n> Internet Explorer 9+ 支持 border-radius 和 box-shadow 属性。\n>\n> Firefox、Chrome 以及 Safari 支持所有新的边框属性。\n>\n> 注释：对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。\n>\n> Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。\n\n为了兼容各主流浏览器并支持这些主流浏览器的较低版本，在基于Webkit的Chrome和Safari等浏览器上使用box-shadow属性时，我们需要将属性的名称写成-webkit-box-shadow的形式。Firefox浏览器则需要写成-moz-box-shadow的形式。\n\n```javascript\n.box-radius {  \n    //Firefox4.0-  \n    -moz-box-radius: 25px;  \n\n    //Safariand Google chrome10.0-  \n    -webkit-box-radius:25px;  \n\n    //Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  \n    box-radius:  25px;  // 角度\n  \tborder: 2px solid; // 边框\n}\n.box-shadow {  \n         //Firefox4.0-  \n         -moz-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  \n  \n         //Safariand Google chrome10.0-  \n         -webkit-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  \n  \n         //Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  \n         box-shadow:  投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;  \n}  \n```\n\n#### border-radius （用于为元素添加圆角边框!）\n\n**定义和用法**\n\nborder-radius 属性是一个简写属性，用于设置四个 `border-*-radius  ` 属性。\n\n| 默认值           | 0                                 |\n| ------------- | --------------------------------- |\n| 继承性           | no                                |\n| 版本            | CSS3                              |\n| JavaScript语法： | *object*.style.borderRadius=\"5px\" |\n\n**语法**\n\n```javascript\nborder-radius: 1-4 length|% / 1-4 length|%;\n```\n\n**注释**：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。\n\n| 值      | 描述          |\n| ------ | ----------- |\n| length | 定义圆角的形状     |\n| %      | 以百分比定义圆角的形状 |\n\n**例1：**\n\n```javascript\nborder-radius: 2em;\n```\n\n等价于\n\n```javascript\nborder-top-left-radius: 2em;\nborder-top-right-radius: 2em;\nborder-bottom-right-radius: 2em;\nborder-bottom-left-radius: 2em;\n```\n\n**例2**\n\n```javascript\nborder-radius: 2em 1em 4em / 0.5em 3em;\n```\n\n等价于：\n\n```javascript\nborder-top-left-radius: 2em 0.5em;\nborder-top-right-radius: 1em 3em;\nborder-bottom-right-radius: 4em 0.5em;\nborder-bottom-left-radius: 1em 3em;\n```\n\n#### box-shadow\n\n> box-shadow: 投影方式 x轴偏移量 y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色\n>\n> 阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；\n>\n> X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边\n>\n> Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；\n>\n> 阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；\n>\n> 阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；\n>\n> 阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。\n\n#### border-image （属性允许您规定用于边框的图片！）\n\n```javascript\n.box-image {  \n    //Firefox4.0-  \n    -moz-box-image:  url(border.png) 30 30 round;  \n\n    //Safariand Google chrome10.0-  \n    -webkit-box-image:  url(border.png) 30 30 round; \n  \n  \t// Opera\n    -o-border-image: url(border.png) 30 30 round\n\n    box-image: url(border.png) 30 30 round;  // 角度\n}\n```","source":"_posts/fe/css-border.md","raw":"---\ntitle: css-border\ndate: 2017-07-11 17:28:04\ntags: fe\n---\n\n#### 本章主要包含以下内容\n\n```\n边框>内阴影>背景图片>背景颜色>外阴影\n```\n\n- border-radius\n- box-shadow\n- border-image\n\n<!-- More -->\n\n**浏览器支持**\n\n|               | IE 9 + | Firefox 3.5 | Chrome | Safari | Opera |\n| ------------- | ------ | ----------- | ------ | ------ | ----- |\n| border-radius | YES    | YES         | YES    | YES    | YES   |\n| box-shadow    | YES    | YES         | YES    | YES    | YES   |\n| border-image  | NO     | YES         | YES    | YES    | YES   |\n\n> Internet Explorer 9+ 支持 border-radius 和 box-shadow 属性。\n>\n> Firefox、Chrome 以及 Safari 支持所有新的边框属性。\n>\n> 注释：对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。\n>\n> Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。\n\n为了兼容各主流浏览器并支持这些主流浏览器的较低版本，在基于Webkit的Chrome和Safari等浏览器上使用box-shadow属性时，我们需要将属性的名称写成-webkit-box-shadow的形式。Firefox浏览器则需要写成-moz-box-shadow的形式。\n\n```javascript\n.box-radius {  \n    //Firefox4.0-  \n    -moz-box-radius: 25px;  \n\n    //Safariand Google chrome10.0-  \n    -webkit-box-radius:25px;  \n\n    //Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  \n    box-radius:  25px;  // 角度\n  \tborder: 2px solid; // 边框\n}\n.box-shadow {  \n         //Firefox4.0-  \n         -moz-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  \n  \n         //Safariand Google chrome10.0-  \n         -webkit-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  \n  \n         //Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  \n         box-shadow:  投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;  \n}  \n```\n\n#### border-radius （用于为元素添加圆角边框!）\n\n**定义和用法**\n\nborder-radius 属性是一个简写属性，用于设置四个 `border-*-radius  ` 属性。\n\n| 默认值           | 0                                 |\n| ------------- | --------------------------------- |\n| 继承性           | no                                |\n| 版本            | CSS3                              |\n| JavaScript语法： | *object*.style.borderRadius=\"5px\" |\n\n**语法**\n\n```javascript\nborder-radius: 1-4 length|% / 1-4 length|%;\n```\n\n**注释**：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。\n\n| 值      | 描述          |\n| ------ | ----------- |\n| length | 定义圆角的形状     |\n| %      | 以百分比定义圆角的形状 |\n\n**例1：**\n\n```javascript\nborder-radius: 2em;\n```\n\n等价于\n\n```javascript\nborder-top-left-radius: 2em;\nborder-top-right-radius: 2em;\nborder-bottom-right-radius: 2em;\nborder-bottom-left-radius: 2em;\n```\n\n**例2**\n\n```javascript\nborder-radius: 2em 1em 4em / 0.5em 3em;\n```\n\n等价于：\n\n```javascript\nborder-top-left-radius: 2em 0.5em;\nborder-top-right-radius: 1em 3em;\nborder-bottom-right-radius: 4em 0.5em;\nborder-bottom-left-radius: 1em 3em;\n```\n\n#### box-shadow\n\n> box-shadow: 投影方式 x轴偏移量 y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色\n>\n> 阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；\n>\n> X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边\n>\n> Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；\n>\n> 阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；\n>\n> 阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；\n>\n> 阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。\n\n#### border-image （属性允许您规定用于边框的图片！）\n\n```javascript\n.box-image {  \n    //Firefox4.0-  \n    -moz-box-image:  url(border.png) 30 30 round;  \n\n    //Safariand Google chrome10.0-  \n    -webkit-box-image:  url(border.png) 30 30 round; \n  \n  \t// Opera\n    -o-border-image: url(border.png) 30 30 round\n\n    box-image: url(border.png) 30 30 round;  // 角度\n}\n```","slug":"fe/css-border","published":1,"updated":"2018-01-30T03:41:41.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uh001ffq9mxsm5jkek","content":"<h4 id=\"本章主要包含以下内容\"><a href=\"#本章主要包含以下内容\" class=\"headerlink\" title=\"本章主要包含以下内容\"></a>本章主要包含以下内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">边框&gt;内阴影&gt;背景图片&gt;背景颜色&gt;外阴影</div></pre></td></tr></table></figure>\n<ul>\n<li>border-radius</li>\n<li>box-shadow</li>\n<li>border-image</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>浏览器支持</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IE 9 +</th>\n<th>Firefox 3.5</th>\n<th>Chrome</th>\n<th>Safari</th>\n<th>Opera</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>border-radius</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>box-shadow</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>border-image</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Internet Explorer 9+ 支持 border-radius 和 box-shadow 属性。</p>\n<p>Firefox、Chrome 以及 Safari 支持所有新的边框属性。</p>\n<p>注释：对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。</p>\n<p>Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。</p>\n</blockquote>\n<p>为了兼容各主流浏览器并支持这些主流浏览器的较低版本，在基于Webkit的Chrome和Safari等浏览器上使用box-shadow属性时，我们需要将属性的名称写成-webkit-box-shadow的形式。Firefox浏览器则需要写成-moz-box-shadow的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-radius &#123;  </div><div class=\"line\">    <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">    -moz-box-radius: <span class=\"number\">25</span>px;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">    -webkit-box-radius:<span class=\"number\">25</span>px;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  </span></div><div class=\"line\">    box-radius:  <span class=\"number\">25</span>px;  <span class=\"comment\">// 角度</span></div><div class=\"line\">  \tborder: <span class=\"number\">2</span>px solid; <span class=\"comment\">// 边框</span></div><div class=\"line\">&#125;</div><div class=\"line\">.box-shadow &#123;  </div><div class=\"line\">         <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">         -moz-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">  </div><div class=\"line\">         <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">         -webkit-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">  </div><div class=\"line\">         <span class=\"comment\">//Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  </span></div><div class=\"line\">         box-shadow:  投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"border-radius-（用于为元素添加圆角边框-）\"><a href=\"#border-radius-（用于为元素添加圆角边框-）\" class=\"headerlink\" title=\"border-radius （用于为元素添加圆角边框!）\"></a>border-radius （用于为元素添加圆角边框!）</h4><p><strong>定义和用法</strong></p>\n<p>border-radius 属性是一个简写属性，用于设置四个 <code>border-*-radius</code> 属性。</p>\n<table>\n<thead>\n<tr>\n<th>默认值</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>继承性</td>\n<td>no</td>\n</tr>\n<tr>\n<td>版本</td>\n<td>CSS3</td>\n</tr>\n<tr>\n<td>JavaScript语法：</td>\n<td><em>object</em>.style.borderRadius=”5px”</td>\n</tr>\n</tbody>\n</table>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">1</span><span class=\"number\">-4</span> length|% <span class=\"regexp\">/ 1-4 length|%;</span></div></pre></td></tr></table></figure>\n<p><strong>注释</strong>：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>length</td>\n<td>定义圆角的形状</td>\n</tr>\n<tr>\n<td>%</td>\n<td>以百分比定义圆角的形状</td>\n</tr>\n</tbody>\n</table>\n<p><strong>例1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">2</span>em;</div></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-left-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-top-right-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-bottom-right-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-bottom-left-radius: <span class=\"number\">2</span>em;</div></pre></td></tr></table></figure>\n<p><strong>例2</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">2</span>em <span class=\"number\">1</span>em <span class=\"number\">4</span>em / <span class=\"number\">0.5</span>em <span class=\"number\">3</span>em;</div></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-left-radius: <span class=\"number\">2</span>em <span class=\"number\">0.5</span>em;</div><div class=\"line\">border-top-right-radius: <span class=\"number\">1</span>em <span class=\"number\">3</span>em;</div><div class=\"line\">border-bottom-right-radius: <span class=\"number\">4</span>em <span class=\"number\">0.5</span>em;</div><div class=\"line\">border-bottom-left-radius: <span class=\"number\">1</span>em <span class=\"number\">3</span>em;</div></pre></td></tr></table></figure>\n<h4 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h4><blockquote>\n<p>box-shadow: 投影方式 x轴偏移量 y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色</p>\n<p>阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；</p>\n<p>X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边</p>\n<p>Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；</p>\n<p>阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；</p>\n<p>阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；</p>\n<p>阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。</p>\n</blockquote>\n<h4 id=\"border-image-（属性允许您规定用于边框的图片！）\"><a href=\"#border-image-（属性允许您规定用于边框的图片！）\" class=\"headerlink\" title=\"border-image （属性允许您规定用于边框的图片！）\"></a>border-image （属性允许您规定用于边框的图片！）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-image &#123;  </div><div class=\"line\">    <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">    -moz-box-image:  url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">    -webkit-box-image:  url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round; </div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">// Opera</span></div><div class=\"line\">    -o-border-image: url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round</div><div class=\"line\"></div><div class=\"line\">    box-image: url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round;  <span class=\"comment\">// 角度</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"本章主要包含以下内容\"><a href=\"#本章主要包含以下内容\" class=\"headerlink\" title=\"本章主要包含以下内容\"></a>本章主要包含以下内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">边框&gt;内阴影&gt;背景图片&gt;背景颜色&gt;外阴影</div></pre></td></tr></table></figure>\n<ul>\n<li>border-radius</li>\n<li>box-shadow</li>\n<li>border-image</li>\n</ul>","more":"<p><strong>浏览器支持</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IE 9 +</th>\n<th>Firefox 3.5</th>\n<th>Chrome</th>\n<th>Safari</th>\n<th>Opera</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>border-radius</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>box-shadow</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>border-image</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Internet Explorer 9+ 支持 border-radius 和 box-shadow 属性。</p>\n<p>Firefox、Chrome 以及 Safari 支持所有新的边框属性。</p>\n<p>注释：对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。</p>\n<p>Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。</p>\n</blockquote>\n<p>为了兼容各主流浏览器并支持这些主流浏览器的较低版本，在基于Webkit的Chrome和Safari等浏览器上使用box-shadow属性时，我们需要将属性的名称写成-webkit-box-shadow的形式。Firefox浏览器则需要写成-moz-box-shadow的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-radius &#123;  </div><div class=\"line\">    <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">    -moz-box-radius: <span class=\"number\">25</span>px;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">    -webkit-box-radius:<span class=\"number\">25</span>px;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  </span></div><div class=\"line\">    box-radius:  <span class=\"number\">25</span>px;  <span class=\"comment\">// 角度</span></div><div class=\"line\">  \tborder: <span class=\"number\">2</span>px solid; <span class=\"comment\">// 边框</span></div><div class=\"line\">&#125;</div><div class=\"line\">.box-shadow &#123;  </div><div class=\"line\">         <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">         -moz-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">  </div><div class=\"line\">         <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">         -webkit-box-shadow:投影方式 X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">  </div><div class=\"line\">         <span class=\"comment\">//Firefox4.0+、 Google chrome 10.0+ 、 Oprea10.5+ and IE9  </span></div><div class=\"line\">         box-shadow:  投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"border-radius-（用于为元素添加圆角边框-）\"><a href=\"#border-radius-（用于为元素添加圆角边框-）\" class=\"headerlink\" title=\"border-radius （用于为元素添加圆角边框!）\"></a>border-radius （用于为元素添加圆角边框!）</h4><p><strong>定义和用法</strong></p>\n<p>border-radius 属性是一个简写属性，用于设置四个 <code>border-*-radius</code> 属性。</p>\n<table>\n<thead>\n<tr>\n<th>默认值</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>继承性</td>\n<td>no</td>\n</tr>\n<tr>\n<td>版本</td>\n<td>CSS3</td>\n</tr>\n<tr>\n<td>JavaScript语法：</td>\n<td><em>object</em>.style.borderRadius=”5px”</td>\n</tr>\n</tbody>\n</table>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">1</span><span class=\"number\">-4</span> length|% <span class=\"regexp\">/ 1-4 length|%;</span></div></pre></td></tr></table></figure>\n<p><strong>注释</strong>：按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>length</td>\n<td>定义圆角的形状</td>\n</tr>\n<tr>\n<td>%</td>\n<td>以百分比定义圆角的形状</td>\n</tr>\n</tbody>\n</table>\n<p><strong>例1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">2</span>em;</div></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-left-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-top-right-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-bottom-right-radius: <span class=\"number\">2</span>em;</div><div class=\"line\">border-bottom-left-radius: <span class=\"number\">2</span>em;</div></pre></td></tr></table></figure>\n<p><strong>例2</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-radius: <span class=\"number\">2</span>em <span class=\"number\">1</span>em <span class=\"number\">4</span>em / <span class=\"number\">0.5</span>em <span class=\"number\">3</span>em;</div></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-left-radius: <span class=\"number\">2</span>em <span class=\"number\">0.5</span>em;</div><div class=\"line\">border-top-right-radius: <span class=\"number\">1</span>em <span class=\"number\">3</span>em;</div><div class=\"line\">border-bottom-right-radius: <span class=\"number\">4</span>em <span class=\"number\">0.5</span>em;</div><div class=\"line\">border-bottom-left-radius: <span class=\"number\">1</span>em <span class=\"number\">3</span>em;</div></pre></td></tr></table></figure>\n<h4 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h4><blockquote>\n<p>box-shadow: 投影方式 x轴偏移量 y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色</p>\n<p>阴影类型：此参数可选。如不设值，默认投影方式是外阴影；如取其唯一值“inset”，其投影为内阴影；</p>\n<p>X-offset:阴影水平偏移量，其值可以是正负值。如果值为正值，则阴影在对象的右边，其值为负值时，阴影在对象的左边</p>\n<p>Y-offset:阴影垂直偏移量，其值也可以是正负值。如果为正值，阴影在对象的底部，其值为负值时，阴影在对象的顶部；</p>\n<p>阴影模糊半径：此参数可选，，但其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；</p>\n<p>阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；</p>\n<p>阴影颜色：此参数可选。如不设定颜色，浏览器会取默认色，但各浏览器默认取色不一致，特别是在webkit内核下的safari和chrome浏览器下表现为透明色，在Firefox/Opera下表现为黑色（已验证），建议不要省略此参数。</p>\n</blockquote>\n<h4 id=\"border-image-（属性允许您规定用于边框的图片！）\"><a href=\"#border-image-（属性允许您规定用于边框的图片！）\" class=\"headerlink\" title=\"border-image （属性允许您规定用于边框的图片！）\"></a>border-image （属性允许您规定用于边框的图片！）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-image &#123;  </div><div class=\"line\">    <span class=\"comment\">//Firefox4.0-  </span></div><div class=\"line\">    -moz-box-image:  url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Safariand Google chrome10.0-  </span></div><div class=\"line\">    -webkit-box-image:  url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round; </div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">// Opera</span></div><div class=\"line\">    -o-border-image: url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round</div><div class=\"line\"></div><div class=\"line\">    box-image: url(border.png) <span class=\"number\">30</span> <span class=\"number\">30</span> round;  <span class=\"comment\">// 角度</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"css-background","date":"2017-07-12T03:34:23.000Z","_content":"\n#### 本章包含以下内容\n\n- background-size\n- background-origin\n\n<!-- More -->\n\n**浏览器支持**\n\n|                   | IE 9 + | Firefox 3.5 | Chrome | Safari | Opera |\n| ----------------- | ------ | ----------- | ------ | ------ | ----- |\n| background-size   | YES    | YES         | YES    | YES    | YES   |\n| background-origin | YES    | YES         | YES    | YES    | YES   |\n\nInternet Explorer 9+、Firefox、Chrome、Safari 以及 Opera 支持新的背景属性。\n\n#### CSS3 background-size 属性\n\nbackgrond-size 属性规定背景图片的尺寸。您能够以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。\n\n**例1：**\n\n调整背景图片的大小：\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  -moz-background-size:63px 100px; /* 老版本的 Firefox */\n  background-size:63px 100px;\n  background-repeat:no-repeat;\n}\n```\n\n**例2：**\n\n对背景图片进行拉伸，使其完成填充内容区域：\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  -moz-background-size:40% 100%; /* 老版本的 Firefox */\n  background-size:40% 100%;\n  background-repeat:no-repeat;\n}\n```\n\n#### CSS3 background-origin 属性\n\nbackground-origin 属性规定背景图片的定位区域。\n\n背景图片可以放置于 content-box、padding-box 或 border-box 区域。\n\n![background-origin](../../img/css/background-origin.png)\n\n**实例**\n\n在 content-box中定位背景图片\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  background-repeat:no-repeat;\n  background-size:100% 100%;\n  -webkit-background-origin:content-box; /* Safari */\n  background-origin:content-box;\n}\n```\n\n#### CSS3 多重背景图片\n\nCSS3 允许您为元素使用多个背景图像。\n\n**实例**\n\n为 body 元素设置两幅背景图片：\n\n```javascript\nbody { \n\tbackground-image:url(bg_flower.gif),url(bg_flower_2.gif);\n}\n```\n\n#### 新的背景属性\n\n| 属性                | 描述           | CSS  |\n| ----------------- | ------------ | ---- |\n| background-clip   | 规定背景的绘制区域。   | 3    |\n| background-origin | 规定背景图片的定位区域。 | 3    |\n| background-size   | 规定背景图片的尺寸。   | 3    |\n\n**background-clip**\n\n规定背景的绘制区域：\n\n```javascript\ndiv {\n  background-color:yellow;\n  background-clip:content-box;\n}\n```\n\n语法\n\n```javascript\n// 默认border-box\nbackground-clip: border-box|padding-box|content-box;\n```\n\n| 值           | 描述          |\n| ----------- | ----------- |\n| border-box  | 背景被裁剪到边框盒   |\n| padding-box | 背景被裁剪到内边距框。 |\n| content-box | 背景被裁剪到内容框。  |","source":"_posts/fe/css-background.md","raw":"---\ntitle: css-background\ndate: 2017-07-12 11:34:23\ntags: fe\n---\n\n#### 本章包含以下内容\n\n- background-size\n- background-origin\n\n<!-- More -->\n\n**浏览器支持**\n\n|                   | IE 9 + | Firefox 3.5 | Chrome | Safari | Opera |\n| ----------------- | ------ | ----------- | ------ | ------ | ----- |\n| background-size   | YES    | YES         | YES    | YES    | YES   |\n| background-origin | YES    | YES         | YES    | YES    | YES   |\n\nInternet Explorer 9+、Firefox、Chrome、Safari 以及 Opera 支持新的背景属性。\n\n#### CSS3 background-size 属性\n\nbackgrond-size 属性规定背景图片的尺寸。您能够以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。\n\n**例1：**\n\n调整背景图片的大小：\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  -moz-background-size:63px 100px; /* 老版本的 Firefox */\n  background-size:63px 100px;\n  background-repeat:no-repeat;\n}\n```\n\n**例2：**\n\n对背景图片进行拉伸，使其完成填充内容区域：\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  -moz-background-size:40% 100%; /* 老版本的 Firefox */\n  background-size:40% 100%;\n  background-repeat:no-repeat;\n}\n```\n\n#### CSS3 background-origin 属性\n\nbackground-origin 属性规定背景图片的定位区域。\n\n背景图片可以放置于 content-box、padding-box 或 border-box 区域。\n\n![background-origin](../../img/css/background-origin.png)\n\n**实例**\n\n在 content-box中定位背景图片\n\n```javascript\ndiv {\n  background:url(bg_flower.gif);\n  background-repeat:no-repeat;\n  background-size:100% 100%;\n  -webkit-background-origin:content-box; /* Safari */\n  background-origin:content-box;\n}\n```\n\n#### CSS3 多重背景图片\n\nCSS3 允许您为元素使用多个背景图像。\n\n**实例**\n\n为 body 元素设置两幅背景图片：\n\n```javascript\nbody { \n\tbackground-image:url(bg_flower.gif),url(bg_flower_2.gif);\n}\n```\n\n#### 新的背景属性\n\n| 属性                | 描述           | CSS  |\n| ----------------- | ------------ | ---- |\n| background-clip   | 规定背景的绘制区域。   | 3    |\n| background-origin | 规定背景图片的定位区域。 | 3    |\n| background-size   | 规定背景图片的尺寸。   | 3    |\n\n**background-clip**\n\n规定背景的绘制区域：\n\n```javascript\ndiv {\n  background-color:yellow;\n  background-clip:content-box;\n}\n```\n\n语法\n\n```javascript\n// 默认border-box\nbackground-clip: border-box|padding-box|content-box;\n```\n\n| 值           | 描述          |\n| ----------- | ----------- |\n| border-box  | 背景被裁剪到边框盒   |\n| padding-box | 背景被裁剪到内边距框。 |\n| content-box | 背景被裁剪到内容框。  |","slug":"fe/css-background","published":1,"updated":"2018-01-30T03:41:35.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ui001hfq9m9kymwtg4","content":"<h4 id=\"本章包含以下内容\"><a href=\"#本章包含以下内容\" class=\"headerlink\" title=\"本章包含以下内容\"></a>本章包含以下内容</h4><ul>\n<li>background-size</li>\n<li>background-origin</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>浏览器支持</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IE 9 +</th>\n<th>Firefox 3.5</th>\n<th>Chrome</th>\n<th>Safari</th>\n<th>Opera</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background-size</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>background-origin</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<p>Internet Explorer 9+、Firefox、Chrome、Safari 以及 Opera 支持新的背景属性。</p>\n<h4 id=\"CSS3-background-size-属性\"><a href=\"#CSS3-background-size-属性\" class=\"headerlink\" title=\"CSS3 background-size 属性\"></a>CSS3 background-size 属性</h4><p>backgrond-size 属性规定背景图片的尺寸。您能够以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。</p>\n<p><strong>例1：</strong></p>\n<p>调整背景图片的大小：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  -moz-background-size:<span class=\"number\">63</span>px <span class=\"number\">100</span>px; <span class=\"comment\">/* 老版本的 Firefox */</span></div><div class=\"line\">  background-size:<span class=\"number\">63</span>px <span class=\"number\">100</span>px;</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>例2：</strong></p>\n<p>对背景图片进行拉伸，使其完成填充内容区域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  -moz-background-size:<span class=\"number\">40</span>% <span class=\"number\">100</span>%; <span class=\"comment\">/* 老版本的 Firefox */</span></div><div class=\"line\">  background-size:<span class=\"number\">40</span>% <span class=\"number\">100</span>%;</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS3-background-origin-属性\"><a href=\"#CSS3-background-origin-属性\" class=\"headerlink\" title=\"CSS3 background-origin 属性\"></a>CSS3 background-origin 属性</h4><p>background-origin 属性规定背景图片的定位区域。</p>\n<p>背景图片可以放置于 content-box、padding-box 或 border-box 区域。</p>\n<p><img src=\"../../img/css/background-origin.png\" alt=\"background-origin\"></p>\n<p><strong>实例</strong></p>\n<p>在 content-box中定位背景图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">  background-size:<span class=\"number\">100</span>% <span class=\"number\">100</span>%;</div><div class=\"line\">  -webkit-background-origin:content-box; <span class=\"comment\">/* Safari */</span></div><div class=\"line\">  background-origin:content-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS3-多重背景图片\"><a href=\"#CSS3-多重背景图片\" class=\"headerlink\" title=\"CSS3 多重背景图片\"></a>CSS3 多重背景图片</h4><p>CSS3 允许您为元素使用多个背景图像。</p>\n<p><strong>实例</strong></p>\n<p>为 body 元素设置两幅背景图片：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123; </div><div class=\"line\">\tbackground-image:url(bg_flower.gif),url(bg_flower_2.gif);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"新的背景属性\"><a href=\"#新的背景属性\" class=\"headerlink\" title=\"新的背景属性\"></a>新的背景属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background-clip</td>\n<td>规定背景的绘制区域。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>background-origin</td>\n<td>规定背景图片的定位区域。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>background-size</td>\n<td>规定背景图片的尺寸。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>background-clip</strong></p>\n<p>规定背景的绘制区域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  background-color:yellow;</div><div class=\"line\">  background-clip:content-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 默认border-box</span></div><div class=\"line\">background-clip: border-box|padding-box|content-box;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>border-box</td>\n<td>背景被裁剪到边框盒</td>\n</tr>\n<tr>\n<td>padding-box</td>\n<td>背景被裁剪到内边距框。</td>\n</tr>\n<tr>\n<td>content-box</td>\n<td>背景被裁剪到内容框。</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h4 id=\"本章包含以下内容\"><a href=\"#本章包含以下内容\" class=\"headerlink\" title=\"本章包含以下内容\"></a>本章包含以下内容</h4><ul>\n<li>background-size</li>\n<li>background-origin</li>\n</ul>","more":"<p><strong>浏览器支持</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IE 9 +</th>\n<th>Firefox 3.5</th>\n<th>Chrome</th>\n<th>Safari</th>\n<th>Opera</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background-size</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>background-origin</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<p>Internet Explorer 9+、Firefox、Chrome、Safari 以及 Opera 支持新的背景属性。</p>\n<h4 id=\"CSS3-background-size-属性\"><a href=\"#CSS3-background-size-属性\" class=\"headerlink\" title=\"CSS3 background-size 属性\"></a>CSS3 background-size 属性</h4><p>backgrond-size 属性规定背景图片的尺寸。您能够以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。</p>\n<p><strong>例1：</strong></p>\n<p>调整背景图片的大小：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  -moz-background-size:<span class=\"number\">63</span>px <span class=\"number\">100</span>px; <span class=\"comment\">/* 老版本的 Firefox */</span></div><div class=\"line\">  background-size:<span class=\"number\">63</span>px <span class=\"number\">100</span>px;</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>例2：</strong></p>\n<p>对背景图片进行拉伸，使其完成填充内容区域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  -moz-background-size:<span class=\"number\">40</span>% <span class=\"number\">100</span>%; <span class=\"comment\">/* 老版本的 Firefox */</span></div><div class=\"line\">  background-size:<span class=\"number\">40</span>% <span class=\"number\">100</span>%;</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS3-background-origin-属性\"><a href=\"#CSS3-background-origin-属性\" class=\"headerlink\" title=\"CSS3 background-origin 属性\"></a>CSS3 background-origin 属性</h4><p>background-origin 属性规定背景图片的定位区域。</p>\n<p>背景图片可以放置于 content-box、padding-box 或 border-box 区域。</p>\n<p><img src=\"../../img/css/background-origin.png\" alt=\"background-origin\"></p>\n<p><strong>实例</strong></p>\n<p>在 content-box中定位背景图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  <span class=\"attr\">background</span>:url(bg_flower.gif);</div><div class=\"line\">  background-repeat:no-repeat;</div><div class=\"line\">  background-size:<span class=\"number\">100</span>% <span class=\"number\">100</span>%;</div><div class=\"line\">  -webkit-background-origin:content-box; <span class=\"comment\">/* Safari */</span></div><div class=\"line\">  background-origin:content-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"CSS3-多重背景图片\"><a href=\"#CSS3-多重背景图片\" class=\"headerlink\" title=\"CSS3 多重背景图片\"></a>CSS3 多重背景图片</h4><p>CSS3 允许您为元素使用多个背景图像。</p>\n<p><strong>实例</strong></p>\n<p>为 body 元素设置两幅背景图片：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123; </div><div class=\"line\">\tbackground-image:url(bg_flower.gif),url(bg_flower_2.gif);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"新的背景属性\"><a href=\"#新的背景属性\" class=\"headerlink\" title=\"新的背景属性\"></a>新的背景属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background-clip</td>\n<td>规定背景的绘制区域。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>background-origin</td>\n<td>规定背景图片的定位区域。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>background-size</td>\n<td>规定背景图片的尺寸。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>background-clip</strong></p>\n<p>规定背景的绘制区域：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  background-color:yellow;</div><div class=\"line\">  background-clip:content-box;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 默认border-box</span></div><div class=\"line\">background-clip: border-box|padding-box|content-box;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>border-box</td>\n<td>背景被裁剪到边框盒</td>\n</tr>\n<tr>\n<td>padding-box</td>\n<td>背景被裁剪到内边距框。</td>\n</tr>\n<tr>\n<td>content-box</td>\n<td>背景被裁剪到内容框。</td>\n</tr>\n</tbody>\n</table>"},{"title":"react-native-flex","date":"2016-08-29T07:18:42.000Z","_content":"\n### 使用Flexbox布局\n\n我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。\n\n一般来说，使用`flexDirection`、`alignItems`、`justifyContent`三个样式属性就已经能满足大多数布局要求。\n\n#### Flex Direction\n\n在组件的`style`中指定`flexDirection`可以决定布局的**主轴**。子元素是应该沿着**水平轴**(row)方向排列，还是沿着**竖直轴**(column)方向排列呢？默认值是**竖直轴**(column)方向。\n\n#### Justify Content\n\n在组件的style中指定`justifyContent`可以决定其子元素沿着**主轴**的**排列方式**。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：`flex-start`、`center`、`flex-end`、`space-around`以及`space-between`\n\n#### Align Items\n\n在组件的style中指定`alignItems`可以决定其子元素沿着**次轴**（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：`flex-start`、`center`、`flex-end`以及`stretch`。\n\n> 注意：要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸\n","source":"_posts/fe/react-native-flex.md","raw":"---\ntitle: react-native-flex\ndate: 2016-08-29 15:18:42\ntags: fe\n---\n\n### 使用Flexbox布局\n\n我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。\n\n一般来说，使用`flexDirection`、`alignItems`、`justifyContent`三个样式属性就已经能满足大多数布局要求。\n\n#### Flex Direction\n\n在组件的`style`中指定`flexDirection`可以决定布局的**主轴**。子元素是应该沿着**水平轴**(row)方向排列，还是沿着**竖直轴**(column)方向排列呢？默认值是**竖直轴**(column)方向。\n\n#### Justify Content\n\n在组件的style中指定`justifyContent`可以决定其子元素沿着**主轴**的**排列方式**。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：`flex-start`、`center`、`flex-end`、`space-around`以及`space-between`\n\n#### Align Items\n\n在组件的style中指定`alignItems`可以决定其子元素沿着**次轴**（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：`flex-start`、`center`、`flex-end`以及`stretch`。\n\n> 注意：要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸\n","slug":"fe/react-native-flex","published":1,"updated":"2018-01-30T03:41:44.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uj001jfq9mbtp1cq9u","content":"<h3 id=\"使用Flexbox布局\"><a href=\"#使用Flexbox布局\" class=\"headerlink\" title=\"使用Flexbox布局\"></a>使用Flexbox布局</h3><p>我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。</p>\n<p>一般来说，使用<code>flexDirection</code>、<code>alignItems</code>、<code>justifyContent</code>三个样式属性就已经能满足大多数布局要求。</p>\n<h4 id=\"Flex-Direction\"><a href=\"#Flex-Direction\" class=\"headerlink\" title=\"Flex Direction\"></a>Flex Direction</h4><p>在组件的<code>style</code>中指定<code>flexDirection</code>可以决定布局的<strong>主轴</strong>。子元素是应该沿着<strong>水平轴</strong>(row)方向排列，还是沿着<strong>竖直轴</strong>(column)方向排列呢？默认值是<strong>竖直轴</strong>(column)方向。</p>\n<h4 id=\"Justify-Content\"><a href=\"#Justify-Content\" class=\"headerlink\" title=\"Justify Content\"></a>Justify Content</h4><p>在组件的style中指定<code>justifyContent</code>可以决定其子元素沿着<strong>主轴</strong>的<strong>排列方式</strong>。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：<code>flex-start</code>、<code>center</code>、<code>flex-end</code>、<code>space-around</code>以及<code>space-between</code></p>\n<h4 id=\"Align-Items\"><a href=\"#Align-Items\" class=\"headerlink\" title=\"Align Items\"></a>Align Items</h4><p>在组件的style中指定<code>alignItems</code>可以决定其子元素沿着<strong>次轴</strong>（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：<code>flex-start</code>、<code>center</code>、<code>flex-end</code>以及<code>stretch</code>。</p>\n<blockquote>\n<p>注意：要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸</p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"使用Flexbox布局\"><a href=\"#使用Flexbox布局\" class=\"headerlink\" title=\"使用Flexbox布局\"></a>使用Flexbox布局</h3><p>我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。</p>\n<p>一般来说，使用<code>flexDirection</code>、<code>alignItems</code>、<code>justifyContent</code>三个样式属性就已经能满足大多数布局要求。</p>\n<h4 id=\"Flex-Direction\"><a href=\"#Flex-Direction\" class=\"headerlink\" title=\"Flex Direction\"></a>Flex Direction</h4><p>在组件的<code>style</code>中指定<code>flexDirection</code>可以决定布局的<strong>主轴</strong>。子元素是应该沿着<strong>水平轴</strong>(row)方向排列，还是沿着<strong>竖直轴</strong>(column)方向排列呢？默认值是<strong>竖直轴</strong>(column)方向。</p>\n<h4 id=\"Justify-Content\"><a href=\"#Justify-Content\" class=\"headerlink\" title=\"Justify Content\"></a>Justify Content</h4><p>在组件的style中指定<code>justifyContent</code>可以决定其子元素沿着<strong>主轴</strong>的<strong>排列方式</strong>。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：<code>flex-start</code>、<code>center</code>、<code>flex-end</code>、<code>space-around</code>以及<code>space-between</code></p>\n<h4 id=\"Align-Items\"><a href=\"#Align-Items\" class=\"headerlink\" title=\"Align Items\"></a>Align Items</h4><p>在组件的style中指定<code>alignItems</code>可以决定其子元素沿着<strong>次轴</strong>（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：<code>flex-start</code>、<code>center</code>、<code>flex-end</code>以及<code>stretch</code>。</p>\n<blockquote>\n<p>注意：要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸</p>\n</blockquote>\n"},{"title":"react-native-text","date":"2016-08-22T08:47:44.000Z","_content":"\n### Text\n\n一个用于显示文本的React组件\n\n`Text`支持嵌套、样式和触摸事件\n\n### Props\n\n---\naccessible bool\n\nWhen set to true, indicates that the view is an accessibility element. The default value for a Text element is true.\n\n\nSee the Accessibility guide for more information.\n---\n\nellipsizeMode enum('head', 'middle', 'tail', 'clip')\n\nThis can be one of the following values:\n\nhead - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\nmiddle - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\ntail - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\nclip - Lines are not drawn past the edge of the text container.\nThe default is tail.\n\nnumberOfLines must be set in conjunction with this prop.\n\nclip is working only for iOS\nnumberOfLines number\n\nUsed to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.\n\nThis prop is commonly used with ellipsizeMode.\n\nonLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: {layout: {x, y, width, height}}}\n\nonLongPress function\n\nThis function is called on long press.\n\ne.g., `onLongPress={this.increaseSize}>``\n\nonPress function\n\nThis function is called on press.\n\ne.g., `onPress={() => console.log('1st')}``\n","source":"_posts/fe/react-native-text.md","raw":"---\ntitle: react-native-text\ndate: 2016-08-22 16:47:44\ntags: fe\n---\n\n### Text\n\n一个用于显示文本的React组件\n\n`Text`支持嵌套、样式和触摸事件\n\n### Props\n\n---\naccessible bool\n\nWhen set to true, indicates that the view is an accessibility element. The default value for a Text element is true.\n\n\nSee the Accessibility guide for more information.\n---\n\nellipsizeMode enum('head', 'middle', 'tail', 'clip')\n\nThis can be one of the following values:\n\nhead - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\nmiddle - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\ntail - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\nclip - Lines are not drawn past the edge of the text container.\nThe default is tail.\n\nnumberOfLines must be set in conjunction with this prop.\n\nclip is working only for iOS\nnumberOfLines number\n\nUsed to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.\n\nThis prop is commonly used with ellipsizeMode.\n\nonLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: {layout: {x, y, width, height}}}\n\nonLongPress function\n\nThis function is called on long press.\n\ne.g., `onLongPress={this.increaseSize}>``\n\nonPress function\n\nThis function is called on press.\n\ne.g., `onPress={() => console.log('1st')}``\n","slug":"fe/react-native-text","published":1,"updated":"2018-01-30T03:41:48.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uj001kfq9mbi97zis7","content":"<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>一个用于显示文本的React组件</p>\n<p><code>Text</code>支持嵌套、样式和触摸事件</p>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><hr>\n<p>accessible bool</p>\n<p>When set to true, indicates that the view is an accessibility element. The default value for a Text element is true.</p>\n<h2 id=\"See-the-Accessibility-guide-for-more-information\"><a href=\"#See-the-Accessibility-guide-for-more-information\" class=\"headerlink\" title=\"See the Accessibility guide for more information.\"></a>See the Accessibility guide for more information.</h2><p>ellipsizeMode enum(‘head’, ‘middle’, ‘tail’, ‘clip’)</p>\n<p>This can be one of the following values:</p>\n<p>head - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., “…wxyz”<br>middle - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. “ab…yz”<br>tail - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., “abcd…”<br>clip - Lines are not drawn past the edge of the text container.<br>The default is tail.</p>\n<p>numberOfLines must be set in conjunction with this prop.</p>\n<p>clip is working only for iOS<br>numberOfLines number</p>\n<p>Used to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.</p>\n<p>This prop is commonly used with ellipsizeMode.</p>\n<p>onLayout function</p>\n<p>Invoked on mount and layout changes with</p>\n<p>{nativeEvent: {layout: {x, y, width, height}}}</p>\n<p>onLongPress function</p>\n<p>This function is called on long press.</p>\n<p>e.g., `onLongPress={this.increaseSize}&gt;``</p>\n<p>onPress function</p>\n<p>This function is called on press.</p>\n<p>e.g., `onPress={() =&gt; console.log(‘1st’)}``</p>\n","excerpt":"","more":"<h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>一个用于显示文本的React组件</p>\n<p><code>Text</code>支持嵌套、样式和触摸事件</p>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><hr>\n<p>accessible bool</p>\n<p>When set to true, indicates that the view is an accessibility element. The default value for a Text element is true.</p>\n<h2 id=\"See-the-Accessibility-guide-for-more-information\"><a href=\"#See-the-Accessibility-guide-for-more-information\" class=\"headerlink\" title=\"See the Accessibility guide for more information.\"></a>See the Accessibility guide for more information.</h2><p>ellipsizeMode enum(‘head’, ‘middle’, ‘tail’, ‘clip’)</p>\n<p>This can be one of the following values:</p>\n<p>head - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., “…wxyz”<br>middle - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. “ab…yz”<br>tail - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., “abcd…”<br>clip - Lines are not drawn past the edge of the text container.<br>The default is tail.</p>\n<p>numberOfLines must be set in conjunction with this prop.</p>\n<p>clip is working only for iOS<br>numberOfLines number</p>\n<p>Used to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.</p>\n<p>This prop is commonly used with ellipsizeMode.</p>\n<p>onLayout function</p>\n<p>Invoked on mount and layout changes with</p>\n<p>{nativeEvent: {layout: {x, y, width, height}}}</p>\n<p>onLongPress function</p>\n<p>This function is called on long press.</p>\n<p>e.g., `onLongPress={this.increaseSize}&gt;``</p>\n<p>onPress function</p>\n<p>This function is called on press.</p>\n<p>e.g., `onPress={() =&gt; console.log(‘1st’)}``</p>\n"},{"title":"react-native-view","date":"2016-08-22T08:22:47.000Z","_content":"\n### View\n\n最基本的构建UI视图的容器，`View` 支持flexbox、style、一些触摸事件和访问性控制，`View`直接映射到`native`视图，不管在什么平台，不管它是UIView，<div>，android.view，等等...\n\n`View`设计成嵌套其它视图，可以有0到任何类型的children\n\n> View的设计初衷是和StyleSheet搭配使用，这样可以使代码更清晰并且获得更高的性能。尽管内联样式也同样可以使用\n\n### 合成触摸事件\n\n### Props\n\n#### style\n\n`backfaceVisibility` ReactPropTypes.oneOf(['visible', 'hidden'])\n`backgroundColor` color\n`borderBottomColor` color\n`borderBottomLeftRadius` ReactPropTypes.number\n`borderBottomRightRadius` ReactPropTypes.number\n`borderBottomWidth` ReactPropTypes.number\n`borderColor` color\n`borderLeftColor` color\n`borderLeftWidth` ReactPropTypes.number\n`borderRadius` ReactPropTypes.number\n`borderRightColor` color\n`borderRightWidth` ReactPropTypes.number\n`borderStyle` ReactPropTypes.oneOf(['solid', 'dotted', 'dashed'])\n`borderTopColor` color\n`borderTopLeftRadius` ReactPropTypes.number\n`borderTopRightRadius` ReactPropTypes.number\n`borderTopWidth` ReactPropTypes.number\n`borderWidth` ReactPropTypes.number\n`opacity` ReactPropTypes.number\n`overflow` ReactPropTypes.oneOf(['visible', 'hidden'])\n","source":"_posts/fe/react-native-view.md","raw":"---\ntitle: react-native-view\ndate: 2016-08-22 16:22:47\ntags: fe\n---\n\n### View\n\n最基本的构建UI视图的容器，`View` 支持flexbox、style、一些触摸事件和访问性控制，`View`直接映射到`native`视图，不管在什么平台，不管它是UIView，<div>，android.view，等等...\n\n`View`设计成嵌套其它视图，可以有0到任何类型的children\n\n> View的设计初衷是和StyleSheet搭配使用，这样可以使代码更清晰并且获得更高的性能。尽管内联样式也同样可以使用\n\n### 合成触摸事件\n\n### Props\n\n#### style\n\n`backfaceVisibility` ReactPropTypes.oneOf(['visible', 'hidden'])\n`backgroundColor` color\n`borderBottomColor` color\n`borderBottomLeftRadius` ReactPropTypes.number\n`borderBottomRightRadius` ReactPropTypes.number\n`borderBottomWidth` ReactPropTypes.number\n`borderColor` color\n`borderLeftColor` color\n`borderLeftWidth` ReactPropTypes.number\n`borderRadius` ReactPropTypes.number\n`borderRightColor` color\n`borderRightWidth` ReactPropTypes.number\n`borderStyle` ReactPropTypes.oneOf(['solid', 'dotted', 'dashed'])\n`borderTopColor` color\n`borderTopLeftRadius` ReactPropTypes.number\n`borderTopRightRadius` ReactPropTypes.number\n`borderTopWidth` ReactPropTypes.number\n`borderWidth` ReactPropTypes.number\n`opacity` ReactPropTypes.number\n`overflow` ReactPropTypes.oneOf(['visible', 'hidden'])\n","slug":"fe/react-native-view","published":1,"updated":"2018-01-30T03:42:02.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ul001mfq9mhumy1o8v","content":"<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>最基本的构建UI视图的容器，<code>View</code> 支持flexbox、style、一些触摸事件和访问性控制，<code>View</code>直接映射到<code>native</code>视图，不管在什么平台，不管它是UIView，<div>，android.view，等等…</div></p>\n<p><code>View</code>设计成嵌套其它视图，可以有0到任何类型的children</p>\n<blockquote>\n<p>View的设计初衷是和StyleSheet搭配使用，这样可以使代码更清晰并且获得更高的性能。尽管内联样式也同样可以使用</p>\n</blockquote>\n<h3 id=\"合成触摸事件\"><a href=\"#合成触摸事件\" class=\"headerlink\" title=\"合成触摸事件\"></a>合成触摸事件</h3><h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p><code>backfaceVisibility</code> ReactPropTypes.oneOf([‘visible’, ‘hidden’])<br><code>backgroundColor</code> color<br><code>borderBottomColor</code> color<br><code>borderBottomLeftRadius</code> ReactPropTypes.number<br><code>borderBottomRightRadius</code> ReactPropTypes.number<br><code>borderBottomWidth</code> ReactPropTypes.number<br><code>borderColor</code> color<br><code>borderLeftColor</code> color<br><code>borderLeftWidth</code> ReactPropTypes.number<br><code>borderRadius</code> ReactPropTypes.number<br><code>borderRightColor</code> color<br><code>borderRightWidth</code> ReactPropTypes.number<br><code>borderStyle</code> ReactPropTypes.oneOf([‘solid’, ‘dotted’, ‘dashed’])<br><code>borderTopColor</code> color<br><code>borderTopLeftRadius</code> ReactPropTypes.number<br><code>borderTopRightRadius</code> ReactPropTypes.number<br><code>borderTopWidth</code> ReactPropTypes.number<br><code>borderWidth</code> ReactPropTypes.number<br><code>opacity</code> ReactPropTypes.number<br><code>overflow</code> ReactPropTypes.oneOf([‘visible’, ‘hidden’])</p>\n","excerpt":"","more":"<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>最基本的构建UI视图的容器，<code>View</code> 支持flexbox、style、一些触摸事件和访问性控制，<code>View</code>直接映射到<code>native</code>视图，不管在什么平台，不管它是UIView，<div>，android.view，等等…</p>\n<p><code>View</code>设计成嵌套其它视图，可以有0到任何类型的children</p>\n<blockquote>\n<p>View的设计初衷是和StyleSheet搭配使用，这样可以使代码更清晰并且获得更高的性能。尽管内联样式也同样可以使用</p>\n</blockquote>\n<h3 id=\"合成触摸事件\"><a href=\"#合成触摸事件\" class=\"headerlink\" title=\"合成触摸事件\"></a>合成触摸事件</h3><h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p><code>backfaceVisibility</code> ReactPropTypes.oneOf([‘visible’, ‘hidden’])<br><code>backgroundColor</code> color<br><code>borderBottomColor</code> color<br><code>borderBottomLeftRadius</code> ReactPropTypes.number<br><code>borderBottomRightRadius</code> ReactPropTypes.number<br><code>borderBottomWidth</code> ReactPropTypes.number<br><code>borderColor</code> color<br><code>borderLeftColor</code> color<br><code>borderLeftWidth</code> ReactPropTypes.number<br><code>borderRadius</code> ReactPropTypes.number<br><code>borderRightColor</code> color<br><code>borderRightWidth</code> ReactPropTypes.number<br><code>borderStyle</code> ReactPropTypes.oneOf([‘solid’, ‘dotted’, ‘dashed’])<br><code>borderTopColor</code> color<br><code>borderTopLeftRadius</code> ReactPropTypes.number<br><code>borderTopRightRadius</code> ReactPropTypes.number<br><code>borderTopWidth</code> ReactPropTypes.number<br><code>borderWidth</code> ReactPropTypes.number<br><code>opacity</code> ReactPropTypes.number<br><code>overflow</code> ReactPropTypes.oneOf([‘visible’, ‘hidden’])</p>\n"},{"title":"正则表达式","date":"2016-05-23T13:36:57.000Z","_content":"\n# 概述\n\n> 熟练地掌握正则表达式，能够使你的开发效率得到极大的提升。\n\n下面来梳理了一下常用的正则表达式\n\n1. 校验密码强度\n\n   密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间\n\n   ```java\n   ^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n   ```\n\n2. 校验中文\n\n   字符串仅能是中文。\n\n   ```java\n   ^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n   ```\n\n3. 由数字、26个英文字母或下划线组成的字符串\n\n   ```java\n   ^\\\\w+$\n   ```\n\n4. 校验E-Mail地址\n\n   同密码一样，下面是E-mail地址合规性的正则检查语句。\n\n   ```java\n   [\\\\w!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[\\\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?\n   ```\n\n5. 校验身份证号码\n\n   下面是身份证号码的正则校验。15或18位。\n\n   15位\n\n   ```java\n   ^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$\n   ```\n\n   18位\n\n   ```java\n   ^[1-9]\\\\d{5}[1-9]\\\\d{3}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}([0-9]|X)$\n   ```\n\n6. 校验日期\n\n   \"yyyy-mm-dd\"格式的日期校验，已考虑平闰年。\n\n   ```java\n   ^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$\n   ```\n\n7. 校验金额\n\n   金额校验，精确到2位小数\n\n   ```java\n   ^[0-9]+(.[0-9]{2})?$\n   ```\n\n8. 校验手机号\n\n   下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）\n\n   ```java\n   ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\\\d{8}$\n   ```\n\n9. 提取URL链接\n\n   下面的这个表达式可以筛选出一段文本中的URL\n\n   ```java\n   ^(f|ht){1}(tp|tps):\\\\/\\\\/([\\\\w-]+\\\\.)+[\\\\w-]+(\\\\/[\\\\w- ./?%&=]*)?\n   ```\n","source":"_posts/fe/regular-expression.md","raw":"---\ntitle: 正则表达式\ndate: 2016-05-23 21:36:57\ntags: fe\n---\n\n# 概述\n\n> 熟练地掌握正则表达式，能够使你的开发效率得到极大的提升。\n\n下面来梳理了一下常用的正则表达式\n\n1. 校验密码强度\n\n   密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间\n\n   ```java\n   ^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n   ```\n\n2. 校验中文\n\n   字符串仅能是中文。\n\n   ```java\n   ^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n   ```\n\n3. 由数字、26个英文字母或下划线组成的字符串\n\n   ```java\n   ^\\\\w+$\n   ```\n\n4. 校验E-Mail地址\n\n   同密码一样，下面是E-mail地址合规性的正则检查语句。\n\n   ```java\n   [\\\\w!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[\\\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?\n   ```\n\n5. 校验身份证号码\n\n   下面是身份证号码的正则校验。15或18位。\n\n   15位\n\n   ```java\n   ^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$\n   ```\n\n   18位\n\n   ```java\n   ^[1-9]\\\\d{5}[1-9]\\\\d{3}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}([0-9]|X)$\n   ```\n\n6. 校验日期\n\n   \"yyyy-mm-dd\"格式的日期校验，已考虑平闰年。\n\n   ```java\n   ^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$\n   ```\n\n7. 校验金额\n\n   金额校验，精确到2位小数\n\n   ```java\n   ^[0-9]+(.[0-9]{2})?$\n   ```\n\n8. 校验手机号\n\n   下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）\n\n   ```java\n   ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\\\d{8}$\n   ```\n\n9. 提取URL链接\n\n   下面的这个表达式可以筛选出一段文本中的URL\n\n   ```java\n   ^(f|ht){1}(tp|tps):\\\\/\\\\/([\\\\w-]+\\\\.)+[\\\\w-]+(\\\\/[\\\\w- ./?%&=]*)?\n   ```\n","slug":"fe/regular-expression","published":1,"updated":"2018-01-30T03:41:58.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uo001ofq9muiteuxrz","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>熟练地掌握正则表达式，能够使你的开发效率得到极大的提升。</p>\n</blockquote>\n<p>下面来梳理了一下常用的正则表达式</p>\n<ol>\n<li><p>校验密码强度</p>\n<p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验中文</p>\n<p>字符串仅能是中文。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>由数字、26个英文字母或下划线组成的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^\\\\w+$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验E-Mail地址</p>\n<p>同密码一样，下面是E-mail地址合规性的正则检查语句。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[\\\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\\\.[\\\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验身份证号码</p>\n<p>下面是身份证号码的正则校验。15或18位。</p>\n<p>15位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">7</span>&#125;((<span class=\"number\">0</span>\\\\d)|(<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>]))(([<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>]\\\\d)|<span class=\"number\">3</span>[<span class=\"number\">0</span>-<span class=\"number\">1</span>])\\\\d&#123;<span class=\"number\">3</span>&#125;$</div></pre></td></tr></table></figure>\n<p>18位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">5</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">3</span>&#125;((<span class=\"number\">0</span>\\\\d)|(<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>]))(([<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>]\\\\d)|<span class=\"number\">3</span>[<span class=\"number\">0</span>-<span class=\"number\">1</span>])\\\\d&#123;<span class=\"number\">3</span>&#125;([<span class=\"number\">0</span>-<span class=\"number\">9</span>]|X)$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验日期</p>\n<p>“yyyy-mm-dd”格式的日期校验，已考虑平闰年。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?:(?!<span class=\"number\">0000</span>)[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">4</span>&#125;-(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>])-(?:<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span>-<span class=\"number\">8</span>])|(?:<span class=\"number\">0</span>[<span class=\"number\">13</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>])-(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>)|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])-<span class=\"number\">31</span>)|(?:[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>])|(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>])<span class=\"number\">00</span>)-<span class=\"number\">02</span>-<span class=\"number\">29</span>)$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验金额</p>\n<p>金额校验，精确到2位小数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(.[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;)?$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验手机号</p>\n<p>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"number\">13</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">14</span>[<span class=\"number\">5</span>|<span class=\"number\">7</span>]|<span class=\"number\">15</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>]|<span class=\"number\">18</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>])\\\\d&#123;<span class=\"number\">8</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>提取URL链接</p>\n<p>下面的这个表达式可以筛选出一段文本中的URL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(f|ht)&#123;<span class=\"number\">1</span>&#125;(tp|tps):\\\\/\\\\/([\\\\w-]+\\\\.)+[\\\\w-]+(\\\\/[\\\\w- ./?%&amp;=]*)?</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>熟练地掌握正则表达式，能够使你的开发效率得到极大的提升。</p>\n</blockquote>\n<p>下面来梳理了一下常用的正则表达式</p>\n<ol>\n<li><p>校验密码强度</p>\n<p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验中文</p>\n<p>字符串仅能是中文。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>由数字、26个英文字母或下划线组成的字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^\\\\w+$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验E-Mail地址</p>\n<p>同密码一样，下面是E-mail地址合规性的正则检查语句。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[\\\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\\\.[\\\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验身份证号码</p>\n<p>下面是身份证号码的正则校验。15或18位。</p>\n<p>15位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">7</span>&#125;((<span class=\"number\">0</span>\\\\d)|(<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>]))(([<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>]\\\\d)|<span class=\"number\">3</span>[<span class=\"number\">0</span>-<span class=\"number\">1</span>])\\\\d&#123;<span class=\"number\">3</span>&#125;$</div></pre></td></tr></table></figure>\n<p>18位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">5</span>&#125;[<span class=\"number\">1</span>-<span class=\"number\">9</span>]\\\\d&#123;<span class=\"number\">3</span>&#125;((<span class=\"number\">0</span>\\\\d)|(<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>]))(([<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>]\\\\d)|<span class=\"number\">3</span>[<span class=\"number\">0</span>-<span class=\"number\">1</span>])\\\\d&#123;<span class=\"number\">3</span>&#125;([<span class=\"number\">0</span>-<span class=\"number\">9</span>]|X)$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验日期</p>\n<p>“yyyy-mm-dd”格式的日期校验，已考虑平闰年。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(?:(?!<span class=\"number\">0000</span>)[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">4</span>&#125;-(?:(?:<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>])-(?:<span class=\"number\">0</span>[<span class=\"number\">1</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">2</span>[<span class=\"number\">0</span>-<span class=\"number\">8</span>])|(?:<span class=\"number\">0</span>[<span class=\"number\">13</span>-<span class=\"number\">9</span>]|<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">2</span>])-(?:<span class=\"number\">29</span>|<span class=\"number\">30</span>)|(?:<span class=\"number\">0</span>[<span class=\"number\">13578</span>]|<span class=\"number\">1</span>[<span class=\"number\">02</span>])-<span class=\"number\">31</span>)|(?:[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>])|(?:<span class=\"number\">0</span>[<span class=\"number\">48</span>]|[<span class=\"number\">2468</span>][<span class=\"number\">048</span>]|[<span class=\"number\">13579</span>][<span class=\"number\">26</span>])<span class=\"number\">00</span>)-<span class=\"number\">02</span>-<span class=\"number\">29</span>)$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验金额</p>\n<p>金额校验，精确到2位小数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+(.[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">2</span>&#125;)?$</div></pre></td></tr></table></figure>\n</li>\n<li><p>校验手机号</p>\n<p>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"number\">13</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]|<span class=\"number\">14</span>[<span class=\"number\">5</span>|<span class=\"number\">7</span>]|<span class=\"number\">15</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>]|<span class=\"number\">18</span>[<span class=\"number\">0</span>|<span class=\"number\">1</span>|<span class=\"number\">2</span>|<span class=\"number\">3</span>|<span class=\"number\">5</span>|<span class=\"number\">6</span>|<span class=\"number\">7</span>|<span class=\"number\">8</span>|<span class=\"number\">9</span>])\\\\d&#123;<span class=\"number\">8</span>&#125;$</div></pre></td></tr></table></figure>\n</li>\n<li><p>提取URL链接</p>\n<p>下面的这个表达式可以筛选出一段文本中的URL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(f|ht)&#123;<span class=\"number\">1</span>&#125;(tp|tps):\\\\/\\\\/([\\\\w-]+\\\\.)+[\\\\w-]+(\\\\/[\\\\w- ./?%&amp;=]*)?</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Lambda 表达式","date":"2016-05-19T06:18:52.000Z","_content":"\n# 概述\n\nJava 8 的最大变化是引入了Lambda表达式 —— 一种紧凑的、传递行为的方式，接下来就了解一下什么是Lambda表达式。\n\n> 为什么要叫这个名字呢？这多年前，在计算机出现之前，有位名叫`Alonzo Church`的逻辑学家，他想要证明什么样的数学函数是可以有效计算的(奇怪的是，当时已经存在了许多已知的函数，但是没有人知道怎么去计算它们的值)。他使用希腊字母的`lambda(𝛌)`来标记参数 。为什么使用`𝛌`?难道Church没有其它拉丁字母可用了吗？事实上经典的《数学原理》中使用\"^\"符号表示自由变量，这启发Church使用大写的`lambda \"Λ\"`来表示参数。但是最终，他选择换回到小写版本。于是从那时起，还有参数变量的表达式都被称为lambda表达式。\n\n<!-- More -->\n\n### 第一个Lambda表达式\n\n> Lambda表达式适用于只包含一个方法的接口的情况，表如：Runnable接口，只包含一个run方法。\n\n正常情况:\n\n```java\nnew Thread(new Runnable() {\n    @Override\n    public void run() {\n      System.out.println(\"Hello\");\n    }\n}).start();\n```\n\n使用Lambda:\n\n```java\nnew Thread(() -> System.out.println(\"Hello\")).start();\nnew Thread(() -> {System.out.println(\"Hello\");}).start();\n```\n\n> 你已经见到了 **Java** 中的  **lambda** 表达式的格式：参数、箭头 ->，以及一个表达式\n\n### Lambda表达式的不同形式\n\n```java\n1.Runnable noArguments = () -> System.out.println(\"Hello World\");\n2.ActionListener oneArguments = event -> System.out.println(\"Button Clicked\");\n3.Runnable multiStatement = () -> {\n  \t  System.out.println(\"Hello\");\n  \t  System.out.println(\"World\");\n  };\n4.BinaryOperator<Long> add = (x, y) -> x + y;\n5.BinaryOperator<Long> addExplicit = (Long x, Long y) -> x + y;\n6.变种 System.out::println\n```\n\n1. Lambda表达式不包含参数，使用空括号表示没有参数\n\n2. Lambda表达式包含且只包含一个参数，可省略参数的括号，如上面示例中的第2种情况\n\n3. Lambda表达式不仅可以是一个表达式，而且也可以是一段代码块，使用大括号({})将代码块括起来，如上面示例中的第3种情况。\n\n   注：只有一行代码的Lambda表达式也可使用大括号，但需要在表达式后面加上一个分号。\n\n4. Lambda表达式也可以包含多个参数的方法，如示例中的第4种情况。这时就有必要思考怎么样去阅读该Lambda表达式。这行代码并不是将两个数字相加，而是创建一个函数 ，用来计算两个数字相加的结果。变量add的类型是BinaryOperator<Long>，它不是两个数字的和，而是将两个数字相加的那行代码。\n\n5. 所有Lambda表达式的参数类型都是由编译器推断得出的。但有时也可以显示声明参数类型，此时就需要使用小括号将参数括起来，多个参数也是如此。如上面示例中的第5种情况\n\n6. 详情请阅读下面的 **方法引用** 章节\n\n\n> 你可以像对待方法参数一样向lambda表达式的参数添加注解或者final修饰符，如下：\n>\n> ```java\n> (final String name) -> ...\n> (@NonNull String name) -> ...\n> ```\n>\n> 注意：在lambda表达式中，只在某些分支中返回值(其它分支没有返回值)是不合法的。例如:\n>\n> ```java\n> (int x) -> { if (x > 0) return 1; }\n> ```\n\n### 引用值，而不是变量\n\n> Lambda表示式中引用的局部变量，必须是final或既成事实上的final变量\n\n什么是既成事实上的final变量呢？看看下面这种情况：\n\n```java\nString test = \"hello\";\nnew Thread(() -> System.out.println(test)).start();\n```\n\n对于变量test，虽然可以不用final修饰(编译不会报错)，但是只要你对test再赋值其它值，就会编译报错，这种情况就是既成事实的final变量\n\n### 函数接口\n\n> 函数接口是只有一个抽象方法的接口，用作lambda表达式的类型\n>\n> 你可能奇怪为什么函数接口必须只有一个抽象方法。难道接口中的方法不都是抽象的吗？事实上，接口经常会重新声明Object类中的方法，例如`toString`或者`clone`，而这些方法声明并不是抽象的。\n\n使用Java编程，总会遇到很多函数接口，但 Java 开发工具包（JDK）提供的一组核心函数接口会频繁出现。如下：\n\n| 接口                | 参数     | 返回类型    | 示例            |\n| ----------------- | ------ | ------- | ------------- |\n| Predicata<T>      | T      | boolean | 这张唱片已经发行了吗    |\n| Consumer<T>       | T      | void    | 输出一个值         |\n| Function<T>       | T      | R       | 获取Artist对象的名字 |\n| Supplier<T>       | None   | T       | 工厂方法          |\n| UnaryOperator<T>  | T      | T       | 逻辑非(!)        |\n| BinaryOperator<T> | (T, T) | T       | 求两个数的乘积(*)    |\n\n> 你可以在任意函数式接口上标注`@FunctionalInterface`注解，这样做有两个好处。首先，编译器会检查标注该注解的实体，检查它是否是只包含一个抽象方法的接口。别外，在 javadoc 页面也会包含一条声明，说明这个接口是一个函数式接口。\n>\n> 该注解并不要求强制使用。从概念上来讲，所有只包含一个抽象方法的接口都是函数式接口，但是使用`@FuncationalInterface`注解会让你的代码看上去更清楚。\n\n最后，当一个 **lambda** 表达式被转换为一个函数接口的实例时，请注意处理检查期异常。如果  **lambda** 表达式中可能会抛出一个检查期异常，那么该异常需要在目标接口的抽象方法中进行声明。例如，以下表达式会产生一个错误：\n\n```java\nRunnable sleeper = () -> { System.out.println(\"Zzz\"); Thread.sleep(1000); };\n// 错误：Thread.sleep可以抛出一个检查期的 InterruptedException.\n```\n\n由于 **Runnable.run** 不能抛出任何异常，所有这个赋值不是合法的，有两种方法可以修正该问题。一种是在 **lambda** 表达式中捕获异常，别一种是将  **lambda** 表达式赋给一个其抽象方法可以抛出异常的接口。例如，Callable 接口的 **call** 方法可以抛出任何异常，因此，你可以将该 **lambda** 表达式赋给 Callable<Void> (如果你添加一条 \"return null\" 语句)。\n\n### 方法引用 \n\n 一共有四种类型的方法引用\n\n| 类型        | 示例                                |\n| --------- | --------------------------------- |\n| 类静态方法引用   | ContainingClass::staticMethodName |\n| 某个对象的方法引用 |                                   |\n|           |                                   |\n\n\n\n> 参考文献：《Java8函数式编程》","source":"_posts/java/java8-lambda.md","raw":"---\ntitle: Lambda 表达式\ndate: 2016-05-19 14:18:52\ntags: [java,lambda]\n---\n\n# 概述\n\nJava 8 的最大变化是引入了Lambda表达式 —— 一种紧凑的、传递行为的方式，接下来就了解一下什么是Lambda表达式。\n\n> 为什么要叫这个名字呢？这多年前，在计算机出现之前，有位名叫`Alonzo Church`的逻辑学家，他想要证明什么样的数学函数是可以有效计算的(奇怪的是，当时已经存在了许多已知的函数，但是没有人知道怎么去计算它们的值)。他使用希腊字母的`lambda(𝛌)`来标记参数 。为什么使用`𝛌`?难道Church没有其它拉丁字母可用了吗？事实上经典的《数学原理》中使用\"^\"符号表示自由变量，这启发Church使用大写的`lambda \"Λ\"`来表示参数。但是最终，他选择换回到小写版本。于是从那时起，还有参数变量的表达式都被称为lambda表达式。\n\n<!-- More -->\n\n### 第一个Lambda表达式\n\n> Lambda表达式适用于只包含一个方法的接口的情况，表如：Runnable接口，只包含一个run方法。\n\n正常情况:\n\n```java\nnew Thread(new Runnable() {\n    @Override\n    public void run() {\n      System.out.println(\"Hello\");\n    }\n}).start();\n```\n\n使用Lambda:\n\n```java\nnew Thread(() -> System.out.println(\"Hello\")).start();\nnew Thread(() -> {System.out.println(\"Hello\");}).start();\n```\n\n> 你已经见到了 **Java** 中的  **lambda** 表达式的格式：参数、箭头 ->，以及一个表达式\n\n### Lambda表达式的不同形式\n\n```java\n1.Runnable noArguments = () -> System.out.println(\"Hello World\");\n2.ActionListener oneArguments = event -> System.out.println(\"Button Clicked\");\n3.Runnable multiStatement = () -> {\n  \t  System.out.println(\"Hello\");\n  \t  System.out.println(\"World\");\n  };\n4.BinaryOperator<Long> add = (x, y) -> x + y;\n5.BinaryOperator<Long> addExplicit = (Long x, Long y) -> x + y;\n6.变种 System.out::println\n```\n\n1. Lambda表达式不包含参数，使用空括号表示没有参数\n\n2. Lambda表达式包含且只包含一个参数，可省略参数的括号，如上面示例中的第2种情况\n\n3. Lambda表达式不仅可以是一个表达式，而且也可以是一段代码块，使用大括号({})将代码块括起来，如上面示例中的第3种情况。\n\n   注：只有一行代码的Lambda表达式也可使用大括号，但需要在表达式后面加上一个分号。\n\n4. Lambda表达式也可以包含多个参数的方法，如示例中的第4种情况。这时就有必要思考怎么样去阅读该Lambda表达式。这行代码并不是将两个数字相加，而是创建一个函数 ，用来计算两个数字相加的结果。变量add的类型是BinaryOperator<Long>，它不是两个数字的和，而是将两个数字相加的那行代码。\n\n5. 所有Lambda表达式的参数类型都是由编译器推断得出的。但有时也可以显示声明参数类型，此时就需要使用小括号将参数括起来，多个参数也是如此。如上面示例中的第5种情况\n\n6. 详情请阅读下面的 **方法引用** 章节\n\n\n> 你可以像对待方法参数一样向lambda表达式的参数添加注解或者final修饰符，如下：\n>\n> ```java\n> (final String name) -> ...\n> (@NonNull String name) -> ...\n> ```\n>\n> 注意：在lambda表达式中，只在某些分支中返回值(其它分支没有返回值)是不合法的。例如:\n>\n> ```java\n> (int x) -> { if (x > 0) return 1; }\n> ```\n\n### 引用值，而不是变量\n\n> Lambda表示式中引用的局部变量，必须是final或既成事实上的final变量\n\n什么是既成事实上的final变量呢？看看下面这种情况：\n\n```java\nString test = \"hello\";\nnew Thread(() -> System.out.println(test)).start();\n```\n\n对于变量test，虽然可以不用final修饰(编译不会报错)，但是只要你对test再赋值其它值，就会编译报错，这种情况就是既成事实的final变量\n\n### 函数接口\n\n> 函数接口是只有一个抽象方法的接口，用作lambda表达式的类型\n>\n> 你可能奇怪为什么函数接口必须只有一个抽象方法。难道接口中的方法不都是抽象的吗？事实上，接口经常会重新声明Object类中的方法，例如`toString`或者`clone`，而这些方法声明并不是抽象的。\n\n使用Java编程，总会遇到很多函数接口，但 Java 开发工具包（JDK）提供的一组核心函数接口会频繁出现。如下：\n\n| 接口                | 参数     | 返回类型    | 示例            |\n| ----------------- | ------ | ------- | ------------- |\n| Predicata<T>      | T      | boolean | 这张唱片已经发行了吗    |\n| Consumer<T>       | T      | void    | 输出一个值         |\n| Function<T>       | T      | R       | 获取Artist对象的名字 |\n| Supplier<T>       | None   | T       | 工厂方法          |\n| UnaryOperator<T>  | T      | T       | 逻辑非(!)        |\n| BinaryOperator<T> | (T, T) | T       | 求两个数的乘积(*)    |\n\n> 你可以在任意函数式接口上标注`@FunctionalInterface`注解，这样做有两个好处。首先，编译器会检查标注该注解的实体，检查它是否是只包含一个抽象方法的接口。别外，在 javadoc 页面也会包含一条声明，说明这个接口是一个函数式接口。\n>\n> 该注解并不要求强制使用。从概念上来讲，所有只包含一个抽象方法的接口都是函数式接口，但是使用`@FuncationalInterface`注解会让你的代码看上去更清楚。\n\n最后，当一个 **lambda** 表达式被转换为一个函数接口的实例时，请注意处理检查期异常。如果  **lambda** 表达式中可能会抛出一个检查期异常，那么该异常需要在目标接口的抽象方法中进行声明。例如，以下表达式会产生一个错误：\n\n```java\nRunnable sleeper = () -> { System.out.println(\"Zzz\"); Thread.sleep(1000); };\n// 错误：Thread.sleep可以抛出一个检查期的 InterruptedException.\n```\n\n由于 **Runnable.run** 不能抛出任何异常，所有这个赋值不是合法的，有两种方法可以修正该问题。一种是在 **lambda** 表达式中捕获异常，别一种是将  **lambda** 表达式赋给一个其抽象方法可以抛出异常的接口。例如，Callable 接口的 **call** 方法可以抛出任何异常，因此，你可以将该 **lambda** 表达式赋给 Callable<Void> (如果你添加一条 \"return null\" 语句)。\n\n### 方法引用 \n\n 一共有四种类型的方法引用\n\n| 类型        | 示例                                |\n| --------- | --------------------------------- |\n| 类静态方法引用   | ContainingClass::staticMethodName |\n| 某个对象的方法引用 |                                   |\n|           |                                   |\n\n\n\n> 参考文献：《Java8函数式编程》","slug":"java/java8-lambda","published":1,"updated":"2017-02-22T06:33:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uq001rfq9mik68mv6p","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Java 8 的最大变化是引入了Lambda表达式 —— 一种紧凑的、传递行为的方式，接下来就了解一下什么是Lambda表达式。</p>\n<blockquote>\n<p>为什么要叫这个名字呢？这多年前，在计算机出现之前，有位名叫<code>Alonzo Church</code>的逻辑学家，他想要证明什么样的数学函数是可以有效计算的(奇怪的是，当时已经存在了许多已知的函数，但是没有人知道怎么去计算它们的值)。他使用希腊字母的<code>lambda(𝛌)</code>来标记参数 。为什么使用<code>𝛌</code>?难道Church没有其它拉丁字母可用了吗？事实上经典的《数学原理》中使用”^”符号表示自由变量，这启发Church使用大写的<code>lambda &quot;Λ&quot;</code>来表示参数。但是最终，他选择换回到小写版本。于是从那时起，还有参数变量的表达式都被称为lambda表达式。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"第一个Lambda表达式\"><a href=\"#第一个Lambda表达式\" class=\"headerlink\" title=\"第一个Lambda表达式\"></a>第一个Lambda表达式</h3><blockquote>\n<p>Lambda表达式适用于只包含一个方法的接口的情况，表如：Runnable接口，只包含一个run方法。</p>\n</blockquote>\n<p>正常情况:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).start();</div></pre></td></tr></table></figure>\n<p>使用Lambda:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>)).start();</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; &#123;System.out.println(<span class=\"string\">\"Hello\"</span>);&#125;).start();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>你已经见到了 <strong>Java</strong> 中的  <strong>lambda</strong> 表达式的格式：参数、箭头 -&gt;，以及一个表达式</p>\n</blockquote>\n<h3 id=\"Lambda表达式的不同形式\"><a href=\"#Lambda表达式的不同形式\" class=\"headerlink\" title=\"Lambda表达式的不同形式\"></a>Lambda表达式的不同形式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>.Runnable noArguments = () -&gt; System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"><span class=\"number\">2</span>.ActionListener oneArguments = event -&gt; System.out.println(<span class=\"string\">\"Button Clicked\"</span>);</div><div class=\"line\"><span class=\"number\">3</span>.Runnable multiStatement = () -&gt; &#123;</div><div class=\"line\">  \t  System.out.println(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">  \t  System.out.println(<span class=\"string\">\"World\"</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"number\">4</span>.BinaryOperator&lt;Long&gt; add = (x, y) -&gt; x + y;</div><div class=\"line\"><span class=\"number\">5</span>.BinaryOperator&lt;Long&gt; addExplicit = (Long x, Long y) -&gt; x + y;</div><div class=\"line\"><span class=\"number\">6</span>.变种 System.out::println</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Lambda表达式不包含参数，使用空括号表示没有参数</p>\n</li>\n<li><p>Lambda表达式包含且只包含一个参数，可省略参数的括号，如上面示例中的第2种情况</p>\n</li>\n<li><p>Lambda表达式不仅可以是一个表达式，而且也可以是一段代码块，使用大括号({})将代码块括起来，如上面示例中的第3种情况。</p>\n<p>注：只有一行代码的Lambda表达式也可使用大括号，但需要在表达式后面加上一个分号。</p>\n</li>\n<li><p>Lambda表达式也可以包含多个参数的方法，如示例中的第4种情况。这时就有必要思考怎么样去阅读该Lambda表达式。这行代码并不是将两个数字相加，而是创建一个函数 ，用来计算两个数字相加的结果。变量add的类型是BinaryOperator<long>，它不是两个数字的和，而是将两个数字相加的那行代码。</long></p>\n</li>\n<li><p>所有Lambda表达式的参数类型都是由编译器推断得出的。但有时也可以显示声明参数类型，此时就需要使用小括号将参数括起来，多个参数也是如此。如上面示例中的第5种情况</p>\n</li>\n<li><p>详情请阅读下面的 <strong>方法引用</strong> 章节</p>\n</li>\n</ol>\n<blockquote>\n<p>你可以像对待方法参数一样向lambda表达式的参数添加注解或者final修饰符，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; (<span class=\"keyword\">final</span> String name) -&gt; ...</div><div class=\"line\">&gt; (<span class=\"meta\">@NonNull</span> String name) -&gt; ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>注意：在lambda表达式中，只在某些分支中返回值(其它分支没有返回值)是不合法的。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; (<span class=\"keyword\">int</span> x) -&gt; &#123; <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"引用值，而不是变量\"><a href=\"#引用值，而不是变量\" class=\"headerlink\" title=\"引用值，而不是变量\"></a>引用值，而不是变量</h3><blockquote>\n<p>Lambda表示式中引用的局部变量，必须是final或既成事实上的final变量</p>\n</blockquote>\n<p>什么是既成事实上的final变量呢？看看下面这种情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String test = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(test)).start();</div></pre></td></tr></table></figure>\n<p>对于变量test，虽然可以不用final修饰(编译不会报错)，但是只要你对test再赋值其它值，就会编译报错，这种情况就是既成事实的final变量</p>\n<h3 id=\"函数接口\"><a href=\"#函数接口\" class=\"headerlink\" title=\"函数接口\"></a>函数接口</h3><blockquote>\n<p>函数接口是只有一个抽象方法的接口，用作lambda表达式的类型</p>\n<p>你可能奇怪为什么函数接口必须只有一个抽象方法。难道接口中的方法不都是抽象的吗？事实上，接口经常会重新声明Object类中的方法，例如<code>toString</code>或者<code>clone</code>，而这些方法声明并不是抽象的。</p>\n</blockquote>\n<p>使用Java编程，总会遇到很多函数接口，但 Java 开发工具包（JDK）提供的一组核心函数接口会频繁出现。如下：</p>\n<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>参数</th>\n<th>返回类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Predicata<t></t></td>\n<td>T</td>\n<td>boolean</td>\n<td>这张唱片已经发行了吗</td>\n</tr>\n<tr>\n<td>Consumer<t></t></td>\n<td>T</td>\n<td>void</td>\n<td>输出一个值</td>\n</tr>\n<tr>\n<td>Function<t></t></td>\n<td>T</td>\n<td>R</td>\n<td>获取Artist对象的名字</td>\n</tr>\n<tr>\n<td>Supplier<t></t></td>\n<td>None</td>\n<td>T</td>\n<td>工厂方法</td>\n</tr>\n<tr>\n<td>UnaryOperator<t></t></td>\n<td>T</td>\n<td>T</td>\n<td>逻辑非(!)</td>\n</tr>\n<tr>\n<td>BinaryOperator<t></t></td>\n<td>(T, T)</td>\n<td>T</td>\n<td>求两个数的乘积(*)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>你可以在任意函数式接口上标注<code>@FunctionalInterface</code>注解，这样做有两个好处。首先，编译器会检查标注该注解的实体，检查它是否是只包含一个抽象方法的接口。别外，在 javadoc 页面也会包含一条声明，说明这个接口是一个函数式接口。</p>\n<p>该注解并不要求强制使用。从概念上来讲，所有只包含一个抽象方法的接口都是函数式接口，但是使用<code>@FuncationalInterface</code>注解会让你的代码看上去更清楚。</p>\n</blockquote>\n<p>最后，当一个 <strong>lambda</strong> 表达式被转换为一个函数接口的实例时，请注意处理检查期异常。如果  <strong>lambda</strong> 表达式中可能会抛出一个检查期异常，那么该异常需要在目标接口的抽象方法中进行声明。例如，以下表达式会产生一个错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable sleeper = () -&gt; &#123; System.out.println(<span class=\"string\">\"Zzz\"</span>); Thread.sleep(<span class=\"number\">1000</span>); &#125;;</div><div class=\"line\"><span class=\"comment\">// 错误：Thread.sleep可以抛出一个检查期的 InterruptedException.</span></div></pre></td></tr></table></figure>\n<p>由于 <strong>Runnable.run</strong> 不能抛出任何异常，所有这个赋值不是合法的，有两种方法可以修正该问题。一种是在 <strong>lambda</strong> 表达式中捕获异常，别一种是将  <strong>lambda</strong> 表达式赋给一个其抽象方法可以抛出异常的接口。例如，Callable 接口的 <strong>call</strong> 方法可以抛出任何异常，因此，你可以将该 <strong>lambda</strong> 表达式赋给 Callable<void> (如果你添加一条 “return null” 语句)。</void></p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p> 一共有四种类型的方法引用</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类静态方法引用</td>\n<td>ContainingClass::staticMethodName</td>\n</tr>\n<tr>\n<td>某个对象的方法引用</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>参考文献：《Java8函数式编程》</p>\n</blockquote>\n","excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Java 8 的最大变化是引入了Lambda表达式 —— 一种紧凑的、传递行为的方式，接下来就了解一下什么是Lambda表达式。</p>\n<blockquote>\n<p>为什么要叫这个名字呢？这多年前，在计算机出现之前，有位名叫<code>Alonzo Church</code>的逻辑学家，他想要证明什么样的数学函数是可以有效计算的(奇怪的是，当时已经存在了许多已知的函数，但是没有人知道怎么去计算它们的值)。他使用希腊字母的<code>lambda(𝛌)</code>来标记参数 。为什么使用<code>𝛌</code>?难道Church没有其它拉丁字母可用了吗？事实上经典的《数学原理》中使用”^”符号表示自由变量，这启发Church使用大写的<code>lambda &quot;Λ&quot;</code>来表示参数。但是最终，他选择换回到小写版本。于是从那时起，还有参数变量的表达式都被称为lambda表达式。</p>\n</blockquote>","more":"<h3 id=\"第一个Lambda表达式\"><a href=\"#第一个Lambda表达式\" class=\"headerlink\" title=\"第一个Lambda表达式\"></a>第一个Lambda表达式</h3><blockquote>\n<p>Lambda表达式适用于只包含一个方法的接口的情况，表如：Runnable接口，只包含一个run方法。</p>\n</blockquote>\n<p>正常情况:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;).start();</div></pre></td></tr></table></figure>\n<p>使用Lambda:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">\"Hello\"</span>)).start();</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; &#123;System.out.println(<span class=\"string\">\"Hello\"</span>);&#125;).start();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>你已经见到了 <strong>Java</strong> 中的  <strong>lambda</strong> 表达式的格式：参数、箭头 -&gt;，以及一个表达式</p>\n</blockquote>\n<h3 id=\"Lambda表达式的不同形式\"><a href=\"#Lambda表达式的不同形式\" class=\"headerlink\" title=\"Lambda表达式的不同形式\"></a>Lambda表达式的不同形式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>.Runnable noArguments = () -&gt; System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"><span class=\"number\">2</span>.ActionListener oneArguments = event -&gt; System.out.println(<span class=\"string\">\"Button Clicked\"</span>);</div><div class=\"line\"><span class=\"number\">3</span>.Runnable multiStatement = () -&gt; &#123;</div><div class=\"line\">  \t  System.out.println(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">  \t  System.out.println(<span class=\"string\">\"World\"</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"number\">4</span>.BinaryOperator&lt;Long&gt; add = (x, y) -&gt; x + y;</div><div class=\"line\"><span class=\"number\">5</span>.BinaryOperator&lt;Long&gt; addExplicit = (Long x, Long y) -&gt; x + y;</div><div class=\"line\"><span class=\"number\">6</span>.变种 System.out::println</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Lambda表达式不包含参数，使用空括号表示没有参数</p>\n</li>\n<li><p>Lambda表达式包含且只包含一个参数，可省略参数的括号，如上面示例中的第2种情况</p>\n</li>\n<li><p>Lambda表达式不仅可以是一个表达式，而且也可以是一段代码块，使用大括号({})将代码块括起来，如上面示例中的第3种情况。</p>\n<p>注：只有一行代码的Lambda表达式也可使用大括号，但需要在表达式后面加上一个分号。</p>\n</li>\n<li><p>Lambda表达式也可以包含多个参数的方法，如示例中的第4种情况。这时就有必要思考怎么样去阅读该Lambda表达式。这行代码并不是将两个数字相加，而是创建一个函数 ，用来计算两个数字相加的结果。变量add的类型是BinaryOperator<Long>，它不是两个数字的和，而是将两个数字相加的那行代码。</p>\n</li>\n<li><p>所有Lambda表达式的参数类型都是由编译器推断得出的。但有时也可以显示声明参数类型，此时就需要使用小括号将参数括起来，多个参数也是如此。如上面示例中的第5种情况</p>\n</li>\n<li><p>详情请阅读下面的 <strong>方法引用</strong> 章节</p>\n</li>\n</ol>\n<blockquote>\n<p>你可以像对待方法参数一样向lambda表达式的参数添加注解或者final修饰符，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; (<span class=\"keyword\">final</span> String name) -&gt; ...</div><div class=\"line\">&gt; (<span class=\"meta\">@NonNull</span> String name) -&gt; ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>注意：在lambda表达式中，只在某些分支中返回值(其它分支没有返回值)是不合法的。例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; (<span class=\"keyword\">int</span> x) -&gt; &#123; <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"引用值，而不是变量\"><a href=\"#引用值，而不是变量\" class=\"headerlink\" title=\"引用值，而不是变量\"></a>引用值，而不是变量</h3><blockquote>\n<p>Lambda表示式中引用的局部变量，必须是final或既成事实上的final变量</p>\n</blockquote>\n<p>什么是既成事实上的final变量呢？看看下面这种情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String test = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(test)).start();</div></pre></td></tr></table></figure>\n<p>对于变量test，虽然可以不用final修饰(编译不会报错)，但是只要你对test再赋值其它值，就会编译报错，这种情况就是既成事实的final变量</p>\n<h3 id=\"函数接口\"><a href=\"#函数接口\" class=\"headerlink\" title=\"函数接口\"></a>函数接口</h3><blockquote>\n<p>函数接口是只有一个抽象方法的接口，用作lambda表达式的类型</p>\n<p>你可能奇怪为什么函数接口必须只有一个抽象方法。难道接口中的方法不都是抽象的吗？事实上，接口经常会重新声明Object类中的方法，例如<code>toString</code>或者<code>clone</code>，而这些方法声明并不是抽象的。</p>\n</blockquote>\n<p>使用Java编程，总会遇到很多函数接口，但 Java 开发工具包（JDK）提供的一组核心函数接口会频繁出现。如下：</p>\n<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>参数</th>\n<th>返回类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Predicata<T></td>\n<td>T</td>\n<td>boolean</td>\n<td>这张唱片已经发行了吗</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>T</td>\n<td>void</td>\n<td>输出一个值</td>\n</tr>\n<tr>\n<td>Function<T></td>\n<td>T</td>\n<td>R</td>\n<td>获取Artist对象的名字</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>None</td>\n<td>T</td>\n<td>工厂方法</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td>T</td>\n<td>T</td>\n<td>逻辑非(!)</td>\n</tr>\n<tr>\n<td>BinaryOperator<T></td>\n<td>(T, T)</td>\n<td>T</td>\n<td>求两个数的乘积(*)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>你可以在任意函数式接口上标注<code>@FunctionalInterface</code>注解，这样做有两个好处。首先，编译器会检查标注该注解的实体，检查它是否是只包含一个抽象方法的接口。别外，在 javadoc 页面也会包含一条声明，说明这个接口是一个函数式接口。</p>\n<p>该注解并不要求强制使用。从概念上来讲，所有只包含一个抽象方法的接口都是函数式接口，但是使用<code>@FuncationalInterface</code>注解会让你的代码看上去更清楚。</p>\n</blockquote>\n<p>最后，当一个 <strong>lambda</strong> 表达式被转换为一个函数接口的实例时，请注意处理检查期异常。如果  <strong>lambda</strong> 表达式中可能会抛出一个检查期异常，那么该异常需要在目标接口的抽象方法中进行声明。例如，以下表达式会产生一个错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runnable sleeper = () -&gt; &#123; System.out.println(<span class=\"string\">\"Zzz\"</span>); Thread.sleep(<span class=\"number\">1000</span>); &#125;;</div><div class=\"line\"><span class=\"comment\">// 错误：Thread.sleep可以抛出一个检查期的 InterruptedException.</span></div></pre></td></tr></table></figure>\n<p>由于 <strong>Runnable.run</strong> 不能抛出任何异常，所有这个赋值不是合法的，有两种方法可以修正该问题。一种是在 <strong>lambda</strong> 表达式中捕获异常，别一种是将  <strong>lambda</strong> 表达式赋给一个其抽象方法可以抛出异常的接口。例如，Callable 接口的 <strong>call</strong> 方法可以抛出任何异常，因此，你可以将该 <strong>lambda</strong> 表达式赋给 Callable<Void> (如果你添加一条 “return null” 语句)。</p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p> 一共有四种类型的方法引用</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类静态方法引用</td>\n<td>ContainingClass::staticMethodName</td>\n</tr>\n<tr>\n<td>某个对象的方法引用</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>参考文献：《Java8函数式编程》</p>\n</blockquote>"},{"title":"Stream","date":"2016-05-19T06:52:26.000Z","_content":"\n# 概述\n\n本篇会介绍Steam类中的一组方法，每个方法都对应集合上的一种操作\n\n## 迭代\n\n定义一个集合\n\n```\nList<String> numbers = Arrays.asList(\"1\", \"2\", \"3\");\n```\n\n外部迭代\n\n```java\n// 使用for循环\nfor (String number : numbers) {\n    System.out.println(number);\n}\n// 迭代器\nIterator<String> iterator = numbers.iterator();\nwhile (iterator.hasNext()){\n    String number = iterator.next();\n    System.out.println(number);\n}\n```\n\n内部迭代（Stream）\n\n```java\nnumbers.stream().forEach(action -> System.out.println(action));\n```\n\n<!-- More -->\n\n## 实现机制\n\n> Stream操作分为==惰性求值方法==和==及早求值方法==\n\n看下面一个例子\n\n```java\nnumbers.stream().filter(predicate -> predicate.equals(\"2\")); //返回值Stream<String>\nnumbers.stream().filter(predicate -> predicate.equals(\"2\")).count(); //返回值int\n```\n\n对于第1种，这行代码并未做什么实际性的工作，filter只刻画出了Stream，但没有产生新的集合。像filter这样只描述Stream，最终不产生新集合的方法叫作==惰性求值方法==；对于第2种的count这样最终会从Stream产生值的方法叫作==及早求值方法==\n\n```java\n// 由于使用了惰性求值，没有输出数字\nStream<String> stream = numbers.stream().filter(predicate -> {\n    System.out.println(predicate);\n    return predicate.equals(\"2\");\n});\n// 调用Count，输出了数字\nstream.count(); // 输出了1、2、3\n```\n\n> 判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。如果返回值是Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。整个过程和==建造者模式==有共通之处。建造者模式使用一系列操作设置属性和配置，最后调用一个==build==方法，这时，对象才被真正的创建。\n\n## 常用的流操作\n\n### collect(toList())\n\n```java\nList<String> collected = Stream.of(\"1\", \"2\", \"3\").collect(Collectors.toList());\n```\n\n### map\n\nmap操作符用于将一个流中的值转换成一个新的流\n\n```java\n// 先调用Stream的of方法生成一个Stream流，再调用map方法把Stream流中的(a,b,c)转成大写\nList<String> collected = Stream.of(\"a\", \"b\", \"c\")\n  .map(string -> string.toUpperCase()).collect(Collectors.toList());\n\n// 等价于\nList<String> collected = new ArrayList<String>();\nfor (String string : Arrays.asList(\"a\", \"b\", \"c\")) {\n    collected.add(string.toUpperCase());\n}\n```\n\n### filter\n\n遍历数据并检查其中的元素时，可尝试使用Stream中的filter操作符\n\n```java\n// 下面代码的意思是从Stream流中取大于3的元素\nList<Integer> collected = Stream.of(1, 2, 3, 4, 5, 6)\n  .filter(predicate -> (predicate > 3)).collect(Collectors.toList());\n```\n\n### flatmap\n\nflatmap方法可用Stream替换值，然后将多个Stream连接成一个Stream\n\n```java\n// 把2个list合并成一个\nList<Integer> together = Stream.of(Arrays.asList(1, 2), Arrays.asList(3, 4))\n  .flatMap(mapper -> mapper.stream()).collect(Collectors.toList());\nSystem.out.println(together); // 输出[1,2,3,4]\n\n// 先计算2个list的个数，再把2个list的个数合并成一个list\nList<Integer> together = Stream.of(Arrays.asList(1, 2), Arrays.asList(3, 4, 5))\n  .flatMap(mapper -> Stream.of(mapper.size())).collect(Collectors.toList());\nSystem.out.println(together); // 输出[2,3]\n```\n\n### max和min\n\nStream上常用的操作之一是求最大值和最小值。Stream API中的max和min操作足以解决这一问题。\n\n定义一个Track类和集合：\n\n```java\npublic class Track {\n  \n\tpublic String name;\n\tpublic int count;\n\n\tpublic Track(String name, int count) {\n\t\tthis.name = name;\n\t\tthis.count = count;\n\t}\n\n\tpublic int getLength() {\n\t\treturn name.length();\n\t}\n}\n```\n\n```java\nList<Track> tracks = Arrays.asList(\n\t\t\t\tnew Track(\"Bakai\", 524), \n\t\t\t\tnew Track(\"Violets for Your Furs\", 378),\n\t\t\t\tnew Track(\"Time\",451));\n```\n\n求Track\n\n```java\n// 求name最小的Track\nTrack shortestTrack = tracks.stream()\n.min(Comparator.comparing(track -> track.getLength())).get();\n// 求name最大的Track\nTrack shortestTrack = tracks.stream()\n  .max(Comparator.comparing(track -> track.getLength())).get();\n```\n\n> 调用max和min，会返回一个Optional对象。Optional它代表一个可能存在也可能不存在的值。如果Stream为空，那么该值不存在，如果不为空，则该值存在。调用get方法可以取出Optional对象中的值\n\n### reduce\n\nreduce操作可以实现从一组值中生成一个值\n\n```java\n// 使用reduce求和\nint count = Stream.of(1, 2, 3, 4, 5).reduce(0, (acc, element) -> acc + element);\nSystem.out.println(count); // 返回15 1+2+3+4+5\n```\n\n> Lambda表达式的返回值是最新的acc，是上一轮acc的值和当前元素相加的结果。reduce的类型是之前Lambda文章介绍过的BinaryOperator。[点此查看Lambda](http://yzbzz.github.io/2016/05/19/java8-lambda/)\n\n### 整合操作\n\n下面的例子演示了找出一年级的所有同学\n\n```java\npublic class Classes {\n\n\tpublic String name;\n\tpublic List<Student> students = new ArrayList<Classes.Student>();\n\n\tpublic static class Student {\n\t\tpublic String name;\n\n\t\tpublic Student(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"name: \" + name;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tClasses classesOne = new Classes();\n\t\tclassesOne.name = \"一年级\";\n\t\tclassesOne.students.addAll(\n\t\t\t\tArrays.asList(new Student(\"张三\"), new Student(\"李四\")));\n\n\t\tClasses classesTwo = new Classes();\n\t\tclassesTwo.name = \"二年级\";\n\t\tclassesTwo.students.addAll(\n\t\t\t\tArrays.asList(new Student(\"王五\"), new Student(\"赵六\")));\n\n\t\tList<Classes> classes = new ArrayList<Classes>();\n\t\tclasses.add(classesOne);\n\t\tclasses.add(classesTwo);\n\t\t\n\t\tList<Student> students = classes.stream().\n\t\t\t\tfilter(predicate -> predicate.name.equalsIgnoreCase(\"一年级\")).\n\t\t\t\tflatMap(mapper -> mapper.students.stream()).\n\t\t\t\tcollect(Collectors.toList());\n\t\tfor (Student student : students) {\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t}\n}\n```\n\n计算学生名字长度\n\n```java\nIntSummaryStatistics intSummaryStatistics =classesTwo.students.stream()\n\t\t\t\t.mapToInt(mapper -> mapper.name.length())\n\t\t\t\t.summaryStatistics();\nSystem.out.println(intSummaryStatistics.getAverage()); // 2.0\nSystem.out.println(intSummaryStatistics.getCount()); // 2\nSystem.out.println(intSummaryStatistics.getMax()); // 2\nSystem.out.println(intSummaryStatistics.getMin()); // 2\nSystem.out.println(intSummaryStatistics.getSum()); // 4\n```\n\n","source":"_posts/java/java8-stream.md","raw":"---\ntitle: Stream\ndate: 2016-05-19 14:52:26\ntags: [java,stream]\n---\n\n# 概述\n\n本篇会介绍Steam类中的一组方法，每个方法都对应集合上的一种操作\n\n## 迭代\n\n定义一个集合\n\n```\nList<String> numbers = Arrays.asList(\"1\", \"2\", \"3\");\n```\n\n外部迭代\n\n```java\n// 使用for循环\nfor (String number : numbers) {\n    System.out.println(number);\n}\n// 迭代器\nIterator<String> iterator = numbers.iterator();\nwhile (iterator.hasNext()){\n    String number = iterator.next();\n    System.out.println(number);\n}\n```\n\n内部迭代（Stream）\n\n```java\nnumbers.stream().forEach(action -> System.out.println(action));\n```\n\n<!-- More -->\n\n## 实现机制\n\n> Stream操作分为==惰性求值方法==和==及早求值方法==\n\n看下面一个例子\n\n```java\nnumbers.stream().filter(predicate -> predicate.equals(\"2\")); //返回值Stream<String>\nnumbers.stream().filter(predicate -> predicate.equals(\"2\")).count(); //返回值int\n```\n\n对于第1种，这行代码并未做什么实际性的工作，filter只刻画出了Stream，但没有产生新的集合。像filter这样只描述Stream，最终不产生新集合的方法叫作==惰性求值方法==；对于第2种的count这样最终会从Stream产生值的方法叫作==及早求值方法==\n\n```java\n// 由于使用了惰性求值，没有输出数字\nStream<String> stream = numbers.stream().filter(predicate -> {\n    System.out.println(predicate);\n    return predicate.equals(\"2\");\n});\n// 调用Count，输出了数字\nstream.count(); // 输出了1、2、3\n```\n\n> 判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。如果返回值是Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。整个过程和==建造者模式==有共通之处。建造者模式使用一系列操作设置属性和配置，最后调用一个==build==方法，这时，对象才被真正的创建。\n\n## 常用的流操作\n\n### collect(toList())\n\n```java\nList<String> collected = Stream.of(\"1\", \"2\", \"3\").collect(Collectors.toList());\n```\n\n### map\n\nmap操作符用于将一个流中的值转换成一个新的流\n\n```java\n// 先调用Stream的of方法生成一个Stream流，再调用map方法把Stream流中的(a,b,c)转成大写\nList<String> collected = Stream.of(\"a\", \"b\", \"c\")\n  .map(string -> string.toUpperCase()).collect(Collectors.toList());\n\n// 等价于\nList<String> collected = new ArrayList<String>();\nfor (String string : Arrays.asList(\"a\", \"b\", \"c\")) {\n    collected.add(string.toUpperCase());\n}\n```\n\n### filter\n\n遍历数据并检查其中的元素时，可尝试使用Stream中的filter操作符\n\n```java\n// 下面代码的意思是从Stream流中取大于3的元素\nList<Integer> collected = Stream.of(1, 2, 3, 4, 5, 6)\n  .filter(predicate -> (predicate > 3)).collect(Collectors.toList());\n```\n\n### flatmap\n\nflatmap方法可用Stream替换值，然后将多个Stream连接成一个Stream\n\n```java\n// 把2个list合并成一个\nList<Integer> together = Stream.of(Arrays.asList(1, 2), Arrays.asList(3, 4))\n  .flatMap(mapper -> mapper.stream()).collect(Collectors.toList());\nSystem.out.println(together); // 输出[1,2,3,4]\n\n// 先计算2个list的个数，再把2个list的个数合并成一个list\nList<Integer> together = Stream.of(Arrays.asList(1, 2), Arrays.asList(3, 4, 5))\n  .flatMap(mapper -> Stream.of(mapper.size())).collect(Collectors.toList());\nSystem.out.println(together); // 输出[2,3]\n```\n\n### max和min\n\nStream上常用的操作之一是求最大值和最小值。Stream API中的max和min操作足以解决这一问题。\n\n定义一个Track类和集合：\n\n```java\npublic class Track {\n  \n\tpublic String name;\n\tpublic int count;\n\n\tpublic Track(String name, int count) {\n\t\tthis.name = name;\n\t\tthis.count = count;\n\t}\n\n\tpublic int getLength() {\n\t\treturn name.length();\n\t}\n}\n```\n\n```java\nList<Track> tracks = Arrays.asList(\n\t\t\t\tnew Track(\"Bakai\", 524), \n\t\t\t\tnew Track(\"Violets for Your Furs\", 378),\n\t\t\t\tnew Track(\"Time\",451));\n```\n\n求Track\n\n```java\n// 求name最小的Track\nTrack shortestTrack = tracks.stream()\n.min(Comparator.comparing(track -> track.getLength())).get();\n// 求name最大的Track\nTrack shortestTrack = tracks.stream()\n  .max(Comparator.comparing(track -> track.getLength())).get();\n```\n\n> 调用max和min，会返回一个Optional对象。Optional它代表一个可能存在也可能不存在的值。如果Stream为空，那么该值不存在，如果不为空，则该值存在。调用get方法可以取出Optional对象中的值\n\n### reduce\n\nreduce操作可以实现从一组值中生成一个值\n\n```java\n// 使用reduce求和\nint count = Stream.of(1, 2, 3, 4, 5).reduce(0, (acc, element) -> acc + element);\nSystem.out.println(count); // 返回15 1+2+3+4+5\n```\n\n> Lambda表达式的返回值是最新的acc，是上一轮acc的值和当前元素相加的结果。reduce的类型是之前Lambda文章介绍过的BinaryOperator。[点此查看Lambda](http://yzbzz.github.io/2016/05/19/java8-lambda/)\n\n### 整合操作\n\n下面的例子演示了找出一年级的所有同学\n\n```java\npublic class Classes {\n\n\tpublic String name;\n\tpublic List<Student> students = new ArrayList<Classes.Student>();\n\n\tpublic static class Student {\n\t\tpublic String name;\n\n\t\tpublic Student(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"name: \" + name;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tClasses classesOne = new Classes();\n\t\tclassesOne.name = \"一年级\";\n\t\tclassesOne.students.addAll(\n\t\t\t\tArrays.asList(new Student(\"张三\"), new Student(\"李四\")));\n\n\t\tClasses classesTwo = new Classes();\n\t\tclassesTwo.name = \"二年级\";\n\t\tclassesTwo.students.addAll(\n\t\t\t\tArrays.asList(new Student(\"王五\"), new Student(\"赵六\")));\n\n\t\tList<Classes> classes = new ArrayList<Classes>();\n\t\tclasses.add(classesOne);\n\t\tclasses.add(classesTwo);\n\t\t\n\t\tList<Student> students = classes.stream().\n\t\t\t\tfilter(predicate -> predicate.name.equalsIgnoreCase(\"一年级\")).\n\t\t\t\tflatMap(mapper -> mapper.students.stream()).\n\t\t\t\tcollect(Collectors.toList());\n\t\tfor (Student student : students) {\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t}\n}\n```\n\n计算学生名字长度\n\n```java\nIntSummaryStatistics intSummaryStatistics =classesTwo.students.stream()\n\t\t\t\t.mapToInt(mapper -> mapper.name.length())\n\t\t\t\t.summaryStatistics();\nSystem.out.println(intSummaryStatistics.getAverage()); // 2.0\nSystem.out.println(intSummaryStatistics.getCount()); // 2\nSystem.out.println(intSummaryStatistics.getMax()); // 2\nSystem.out.println(intSummaryStatistics.getMin()); // 2\nSystem.out.println(intSummaryStatistics.getSum()); // 4\n```\n\n","slug":"java/java8-stream","published":1,"updated":"2016-12-23T08:47:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uu001tfq9mzh9q4yvk","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本篇会介绍Steam类中的一组方法，每个方法都对应集合上的一种操作</p>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><p>定义一个集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; numbers = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);</div></pre></td></tr></table></figure>\n<p>外部迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用for循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (String number : numbers) &#123;</div><div class=\"line\">    System.out.println(number);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 迭代器</span></div><div class=\"line\">Iterator&lt;String&gt; iterator = numbers.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext())&#123;</div><div class=\"line\">    String number = iterator.next();</div><div class=\"line\">    System.out.println(number);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>内部迭代（Stream）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers.stream().forEach(action -&gt; System.out.println(action));</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"实现机制\"><a href=\"#实现机制\" class=\"headerlink\" title=\"实现机制\"></a>实现机制</h2><blockquote>\n<p>Stream操作分为==惰性求值方法==和==及早求值方法==</p>\n</blockquote>\n<p>看下面一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers.stream().filter(predicate -&gt; predicate.equals(<span class=\"string\">\"2\"</span>)); <span class=\"comment\">//返回值Stream&lt;String&gt;</span></div><div class=\"line\">numbers.stream().filter(predicate -&gt; predicate.equals(<span class=\"string\">\"2\"</span>)).count(); <span class=\"comment\">//返回值int</span></div></pre></td></tr></table></figure>\n<p>对于第1种，这行代码并未做什么实际性的工作，filter只刻画出了Stream，但没有产生新的集合。像filter这样只描述Stream，最终不产生新集合的方法叫作==惰性求值方法==；对于第2种的count这样最终会从Stream产生值的方法叫作==及早求值方法==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 由于使用了惰性求值，没有输出数字</span></div><div class=\"line\">Stream&lt;String&gt; stream = numbers.stream().filter(predicate -&gt; &#123;</div><div class=\"line\">    System.out.println(predicate);</div><div class=\"line\">    <span class=\"keyword\">return</span> predicate.equals(<span class=\"string\">\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 调用Count，输出了数字</span></div><div class=\"line\">stream.count(); <span class=\"comment\">// 输出了1、2、3</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。如果返回值是Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。整个过程和==建造者模式==有共通之处。建造者模式使用一系列操作设置属性和配置，最后调用一个==build==方法，这时，对象才被真正的创建。</p>\n</blockquote>\n<h2 id=\"常用的流操作\"><a href=\"#常用的流操作\" class=\"headerlink\" title=\"常用的流操作\"></a>常用的流操作</h2><h3 id=\"collect-toList\"><a href=\"#collect-toList\" class=\"headerlink\" title=\"collect(toList())\"></a>collect(toList())</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>).collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map操作符用于将一个流中的值转换成一个新的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先调用Stream的of方法生成一个Stream流，再调用map方法把Stream流中的(a,b,c)转成大写</span></div><div class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\">  .map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">List&lt;String&gt; collected = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span> (String string : Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)) &#123;</div><div class=\"line\">    collected.add(string.toUpperCase());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>遍历数据并检查其中的元素时，可尝试使用Stream中的filter操作符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下面代码的意思是从Stream流中取大于3的元素</span></div><div class=\"line\">List&lt;Integer&gt; collected = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">  .filter(predicate -&gt; (predicate &gt; <span class=\"number\">3</span>)).collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h3 id=\"flatmap\"><a href=\"#flatmap\" class=\"headerlink\" title=\"flatmap\"></a>flatmap</h3><p>flatmap方法可用Stream替换值，然后将多个Stream连接成一个Stream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 把2个list合并成一个</span></div><div class=\"line\">List&lt;Integer&gt; together = Stream.of(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>))</div><div class=\"line\">  .flatMap(mapper -&gt; mapper.stream()).collect(Collectors.toList());</div><div class=\"line\">System.out.println(together); <span class=\"comment\">// 输出[1,2,3,4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先计算2个list的个数，再把2个list的个数合并成一个list</span></div><div class=\"line\">List&lt;Integer&gt; together = Stream.of(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">  .flatMap(mapper -&gt; Stream.of(mapper.size())).collect(Collectors.toList());</div><div class=\"line\">System.out.println(together); <span class=\"comment\">// 输出[2,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"max和min\"><a href=\"#max和min\" class=\"headerlink\" title=\"max和min\"></a>max和min</h3><p>Stream上常用的操作之一是求最大值和最小值。Stream API中的max和min操作足以解决这一问题。</p>\n<p>定义一个Track类和集合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Track</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Track</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.count = count;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name.length();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Track&gt; tracks = Arrays.asList(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Bakai\"</span>, <span class=\"number\">524</span>), </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Violets for Your Furs\"</span>, <span class=\"number\">378</span>),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Time\"</span>,<span class=\"number\">451</span>));</div></pre></td></tr></table></figure>\n<p>求Track</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 求name最小的Track</span></div><div class=\"line\">Track shortestTrack = tracks.stream()</div><div class=\"line\">.min(Comparator.comparing(track -&gt; track.getLength())).get();</div><div class=\"line\"><span class=\"comment\">// 求name最大的Track</span></div><div class=\"line\">Track shortestTrack = tracks.stream()</div><div class=\"line\">  .max(Comparator.comparing(track -&gt; track.getLength())).get();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>调用max和min，会返回一个Optional对象。Optional它代表一个可能存在也可能不存在的值。如果Stream为空，那么该值不存在，如果不为空，则该值存在。调用get方法可以取出Optional对象中的值</p>\n</blockquote>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>reduce操作可以实现从一组值中生成一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用reduce求和</span></div><div class=\"line\"><span class=\"keyword\">int</span> count = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).reduce(<span class=\"number\">0</span>, (acc, element) -&gt; acc + element);</div><div class=\"line\">System.out.println(count); <span class=\"comment\">// 返回15 1+2+3+4+5</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Lambda表达式的返回值是最新的acc，是上一轮acc的值和当前元素相加的结果。reduce的类型是之前Lambda文章介绍过的BinaryOperator。<a href=\"http://yzbzz.github.io/2016/05/19/java8-lambda/\">点此查看Lambda</a></p>\n</blockquote>\n<h3 id=\"整合操作\"><a href=\"#整合操作\" class=\"headerlink\" title=\"整合操作\"></a>整合操作</h3><p>下面的例子演示了找出一年级的所有同学</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classes</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Student&gt; students = <span class=\"keyword\">new</span> ArrayList&lt;Classes.Student&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"name: \"</span> + name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tClasses classesOne = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">\t\tclassesOne.name = <span class=\"string\">\"一年级\"</span>;</div><div class=\"line\">\t\tclassesOne.students.addAll(</div><div class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李四\"</span>)));</div><div class=\"line\"></div><div class=\"line\">\t\tClasses classesTwo = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">\t\tclassesTwo.name = <span class=\"string\">\"二年级\"</span>;</div><div class=\"line\">\t\tclassesTwo.students.addAll(</div><div class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"王五\"</span>), <span class=\"keyword\">new</span> Student(<span class=\"string\">\"赵六\"</span>)));</div><div class=\"line\"></div><div class=\"line\">\t\tList&lt;Classes&gt; classes = <span class=\"keyword\">new</span> ArrayList&lt;Classes&gt;();</div><div class=\"line\">\t\tclasses.add(classesOne);</div><div class=\"line\">\t\tclasses.add(classesTwo);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;Student&gt; students = classes.stream().</div><div class=\"line\">\t\t\t\tfilter(predicate -&gt; predicate.name.equalsIgnoreCase(<span class=\"string\">\"一年级\"</span>)).</div><div class=\"line\">\t\t\t\tflatMap(mapper -&gt; mapper.students.stream()).</div><div class=\"line\">\t\t\t\tcollect(Collectors.toList());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Student student : students) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(student.toString());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>计算学生名字长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">IntSummaryStatistics intSummaryStatistics =classesTwo.students.stream()</div><div class=\"line\">\t\t\t\t.mapToInt(mapper -&gt; mapper.name.length())</div><div class=\"line\">\t\t\t\t.summaryStatistics();</div><div class=\"line\">System.out.println(intSummaryStatistics.getAverage()); <span class=\"comment\">// 2.0</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getCount()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getMax()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getMin()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getSum()); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>本篇会介绍Steam类中的一组方法，每个方法都对应集合上的一种操作</p>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><p>定义一个集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; numbers = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);</div></pre></td></tr></table></figure>\n<p>外部迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用for循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (String number : numbers) &#123;</div><div class=\"line\">    System.out.println(number);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 迭代器</span></div><div class=\"line\">Iterator&lt;String&gt; iterator = numbers.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext())&#123;</div><div class=\"line\">    String number = iterator.next();</div><div class=\"line\">    System.out.println(number);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>内部迭代（Stream）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers.stream().forEach(action -&gt; System.out.println(action));</div></pre></td></tr></table></figure>","more":"<h2 id=\"实现机制\"><a href=\"#实现机制\" class=\"headerlink\" title=\"实现机制\"></a>实现机制</h2><blockquote>\n<p>Stream操作分为==惰性求值方法==和==及早求值方法==</p>\n</blockquote>\n<p>看下面一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">numbers.stream().filter(predicate -&gt; predicate.equals(<span class=\"string\">\"2\"</span>)); <span class=\"comment\">//返回值Stream&lt;String&gt;</span></div><div class=\"line\">numbers.stream().filter(predicate -&gt; predicate.equals(<span class=\"string\">\"2\"</span>)).count(); <span class=\"comment\">//返回值int</span></div></pre></td></tr></table></figure>\n<p>对于第1种，这行代码并未做什么实际性的工作，filter只刻画出了Stream，但没有产生新的集合。像filter这样只描述Stream，最终不产生新集合的方法叫作==惰性求值方法==；对于第2种的count这样最终会从Stream产生值的方法叫作==及早求值方法==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 由于使用了惰性求值，没有输出数字</span></div><div class=\"line\">Stream&lt;String&gt; stream = numbers.stream().filter(predicate -&gt; &#123;</div><div class=\"line\">    System.out.println(predicate);</div><div class=\"line\">    <span class=\"keyword\">return</span> predicate.equals(<span class=\"string\">\"2\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 调用Count，输出了数字</span></div><div class=\"line\">stream.count(); <span class=\"comment\">// 输出了1、2、3</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。如果返回值是Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。整个过程和==建造者模式==有共通之处。建造者模式使用一系列操作设置属性和配置，最后调用一个==build==方法，这时，对象才被真正的创建。</p>\n</blockquote>\n<h2 id=\"常用的流操作\"><a href=\"#常用的流操作\" class=\"headerlink\" title=\"常用的流操作\"></a>常用的流操作</h2><h3 id=\"collect-toList\"><a href=\"#collect-toList\" class=\"headerlink\" title=\"collect(toList())\"></a>collect(toList())</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>).collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map操作符用于将一个流中的值转换成一个新的流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先调用Stream的of方法生成一个Stream流，再调用map方法把Stream流中的(a,b,c)转成大写</span></div><div class=\"line\">List&lt;String&gt; collected = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\">  .map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">List&lt;String&gt; collected = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span> (String string : Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)) &#123;</div><div class=\"line\">    collected.add(string.toUpperCase());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>遍历数据并检查其中的元素时，可尝试使用Stream中的filter操作符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下面代码的意思是从Stream流中取大于3的元素</span></div><div class=\"line\">List&lt;Integer&gt; collected = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">  .filter(predicate -&gt; (predicate &gt; <span class=\"number\">3</span>)).collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h3 id=\"flatmap\"><a href=\"#flatmap\" class=\"headerlink\" title=\"flatmap\"></a>flatmap</h3><p>flatmap方法可用Stream替换值，然后将多个Stream连接成一个Stream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 把2个list合并成一个</span></div><div class=\"line\">List&lt;Integer&gt; together = Stream.of(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>))</div><div class=\"line\">  .flatMap(mapper -&gt; mapper.stream()).collect(Collectors.toList());</div><div class=\"line\">System.out.println(together); <span class=\"comment\">// 输出[1,2,3,4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先计算2个list的个数，再把2个list的个数合并成一个list</span></div><div class=\"line\">List&lt;Integer&gt; together = Stream.of(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>), Arrays.asList(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">  .flatMap(mapper -&gt; Stream.of(mapper.size())).collect(Collectors.toList());</div><div class=\"line\">System.out.println(together); <span class=\"comment\">// 输出[2,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"max和min\"><a href=\"#max和min\" class=\"headerlink\" title=\"max和min\"></a>max和min</h3><p>Stream上常用的操作之一是求最大值和最小值。Stream API中的max和min操作足以解决这一问题。</p>\n<p>定义一个Track类和集合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Track</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Track</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> count)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.count = count;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name.length();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Track&gt; tracks = Arrays.asList(</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Bakai\"</span>, <span class=\"number\">524</span>), </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Violets for Your Furs\"</span>, <span class=\"number\">378</span>),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Track(<span class=\"string\">\"Time\"</span>,<span class=\"number\">451</span>));</div></pre></td></tr></table></figure>\n<p>求Track</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 求name最小的Track</span></div><div class=\"line\">Track shortestTrack = tracks.stream()</div><div class=\"line\">.min(Comparator.comparing(track -&gt; track.getLength())).get();</div><div class=\"line\"><span class=\"comment\">// 求name最大的Track</span></div><div class=\"line\">Track shortestTrack = tracks.stream()</div><div class=\"line\">  .max(Comparator.comparing(track -&gt; track.getLength())).get();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>调用max和min，会返回一个Optional对象。Optional它代表一个可能存在也可能不存在的值。如果Stream为空，那么该值不存在，如果不为空，则该值存在。调用get方法可以取出Optional对象中的值</p>\n</blockquote>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>reduce操作可以实现从一组值中生成一个值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用reduce求和</span></div><div class=\"line\"><span class=\"keyword\">int</span> count = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).reduce(<span class=\"number\">0</span>, (acc, element) -&gt; acc + element);</div><div class=\"line\">System.out.println(count); <span class=\"comment\">// 返回15 1+2+3+4+5</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Lambda表达式的返回值是最新的acc，是上一轮acc的值和当前元素相加的结果。reduce的类型是之前Lambda文章介绍过的BinaryOperator。<a href=\"http://yzbzz.github.io/2016/05/19/java8-lambda/\">点此查看Lambda</a></p>\n</blockquote>\n<h3 id=\"整合操作\"><a href=\"#整合操作\" class=\"headerlink\" title=\"整合操作\"></a>整合操作</h3><p>下面的例子演示了找出一年级的所有同学</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classes</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Student&gt; students = <span class=\"keyword\">new</span> ArrayList&lt;Classes.Student&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"name: \"</span> + name;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tClasses classesOne = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">\t\tclassesOne.name = <span class=\"string\">\"一年级\"</span>;</div><div class=\"line\">\t\tclassesOne.students.addAll(</div><div class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> Student(<span class=\"string\">\"李四\"</span>)));</div><div class=\"line\"></div><div class=\"line\">\t\tClasses classesTwo = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">\t\tclassesTwo.name = <span class=\"string\">\"二年级\"</span>;</div><div class=\"line\">\t\tclassesTwo.students.addAll(</div><div class=\"line\">\t\t\t\tArrays.asList(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"王五\"</span>), <span class=\"keyword\">new</span> Student(<span class=\"string\">\"赵六\"</span>)));</div><div class=\"line\"></div><div class=\"line\">\t\tList&lt;Classes&gt; classes = <span class=\"keyword\">new</span> ArrayList&lt;Classes&gt;();</div><div class=\"line\">\t\tclasses.add(classesOne);</div><div class=\"line\">\t\tclasses.add(classesTwo);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tList&lt;Student&gt; students = classes.stream().</div><div class=\"line\">\t\t\t\tfilter(predicate -&gt; predicate.name.equalsIgnoreCase(<span class=\"string\">\"一年级\"</span>)).</div><div class=\"line\">\t\t\t\tflatMap(mapper -&gt; mapper.students.stream()).</div><div class=\"line\">\t\t\t\tcollect(Collectors.toList());</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Student student : students) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(student.toString());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>计算学生名字长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">IntSummaryStatistics intSummaryStatistics =classesTwo.students.stream()</div><div class=\"line\">\t\t\t\t.mapToInt(mapper -&gt; mapper.name.length())</div><div class=\"line\">\t\t\t\t.summaryStatistics();</div><div class=\"line\">System.out.println(intSummaryStatistics.getAverage()); <span class=\"comment\">// 2.0</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getCount()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getMax()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getMin()); <span class=\"comment\">// 2</span></div><div class=\"line\">System.out.println(intSummaryStatistics.getSum()); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>"},{"title":"life","date":"2017-05-03T09:23:57.000Z","_content":"\nblog\n\n[叠衣](http://www.jianshu.com/p/95853fa8943b)\n\n","source":"_posts/life/life.md","raw":"---\ntitle: life\ndate: 2017-05-03 17:23:57\ntags: life\n---\n\nblog\n\n[叠衣](http://www.jianshu.com/p/95853fa8943b)\n\n","slug":"life/life","published":1,"updated":"2017-12-05T09:47:10.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uv001vfq9mjd287tfp","content":"<p>blog</p>\n<p><a href=\"http://www.jianshu.com/p/95853fa8943b\" target=\"_blank\" rel=\"external\">叠衣</a></p>\n","excerpt":"","more":"<p>blog</p>\n<p><a href=\"http://www.jianshu.com/p/95853fa8943b\">叠衣</a></p>\n"},{"title":"refactor","date":"2017-02-09T08:53:10.000Z","_content":"\n## 重构\n\n- 如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后现添加特性\n- 重构前，先检查自己是否有一套可靠的测试机制，这些测试必须有自我检验能力\n- 重构技术就是以微小的步伐修改程序，如果你犯下错误，很容易使可发现它。\n- 任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。\n- 当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。\n\n\n<!--more-->\n\n## 重构原则\n\n#### 何为重构\n\n> **重构(名词)**：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本\n>\n> **重构(动词)**：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。\n\n#### 为何重构\n\n- 重构改进软件设计\n- 重构使软件更容易理解\n- 重构帮助找到BUG\n- 重构提高编程速度\n\n#### 何时重构\n**三次法则（事不过三，三则重构）**\n- 添加功能时重构\n- 修补错误时重构\n- 复审代码时重构\n\n## 代码的坏味道\n\n- **Duplicated Code(重复代码)**\n\n- **Long Method(过长函数)**\n\n- **Large Class(过大的类)**\n\n- **Long Parameter List(过长参数列)**\n\n- **Divergent Change(发散式变化)**\n\n  （如果某个类经常因为不同的原因在不同的方向上发生变化，Divergent Change就出现了）\n\n- **Shotgun Surgery(霰弹式修改)**\n\n  （Shotgun Surgery类亿Divergent Change，但恰恰相反。如果每遇到某种变化，你都必须在许多不同的类内做许多小修改，你所面临的坏味道就是Shotgun Surgery）\n\n- **Feature Envy(依恋情结)**\n\n  （函数对某个类的兴趣高过对自己所处类的兴趣）\n\n- **Data Clumps(数据泥团)**\n\n  （两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。）\n\n- **Primitive Obsession(基本类型偏执)**\n\n  （对象技术的新手通常不愿意在小任务上运用小对象—像是结合数值和币种的money类、由一个超始值和一个结束值组成的range类、电话号码或邮政编码）\n\n- **Switch Statements(switch惊悚现身)**\n\n  （你常会发现同样的switch语句散布于不同地点。如果要为它添加一个新的case子句，就必须找到所有switch语句并修改它们。面向对象中的多态概念可为此带来优雅的解决办法。）\n\n- **Parallel Inheritance Hierarchies(平行继承体系)**\n\n  （Parallel Inheritance Hierarchies其实是Shotgun Surgery的特殊情况。在这种情况下，每当你为某个类增加一个子类，必须也为另一相类增加一个子类。如果你发现某个继承体系的类名称前缀和别一个继承体系的类名称前缀完全相同，便是闻到了这种坏味道。）\n\n- **Lazy Class(冗赘类)**\n\n  （你所创建的每一个类，都得有人去理解它、维护它，这些工作都是要花钱的。如果一个类的所得不值其身价，它就应该消失。）\n\n- **Speculative Generality(夸夸其谈未来性)**\n\n  （企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了。）\n\n- **Temporary Field(令人迷惑的暂时字段)**\n\n  （某个实例变量仅为某种特定情况而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有变量。）\n\n- **Message Chains(过度耦合的消息链)**\n\n  （向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求别一个对象……这就是消息链。采取这种方式，意味客户代码将与查找过程中的导航结构紧密耦合。一旦对象间的关系发生变化，客户端就不得不做了相应修改。）\n\n- **Middle Man(中间人)**\n\n  （对象的基本特征之一就是封装—对外部世界隐藏其内部细节。封装往往伴随委托。但是人们可能过度运用委托。你也许会看到某个类接口有一关的函数都委托给其他类，这样就是过度运用。）\n\n- **Inappropriate Intimacy(狎昵关系)**\n\n  （有时你会看到两个类过于亲密，花费太多时间去探究彼此的private成分。对于这样过分狎昵的类必须拆散。）\n\n- **Alternative Classes with Different Interfaces(异曲同工的类)**\n\n  （两个函数做同一件事，却有着不同的签名）\n\n- **Incomplete Library Class(不完美的库类)**\n\n- **Data Class(纯稚的数据类)**\n\n  （它们拥有一些字段，以及用于访问、读写这些字段的函数，除此之外一无长物。这样的类只是一种不会说话的数据容器，它们几乎一定被其它类过分细琐地操控着。对于那些不该被其他类修改的字段。请提示get/set）\n\n- **Refused Bequest(被拒绝的遗赠)**\n\n  (子类应该继承超类的函数和数据。但有时子类不需要继承一些无关的数据。这样一来，超类就只持有所有子类共享的东西。—所有超类都应该是抽象的)\n\n- **Comments(过多的注释)**\n\n  ​\n## 构筑测试体系 \n\n- 确保所有测试都完全自动化，让它们检查自己的测试结果。\n- 一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。\n- 频繁地运行测试。每次编译请把测试也考虑进去—每天至少执行每个测试一次。\n- 每当你收到bug报告，请先写一个单元测试来暴露这个bug。\n- 编写未臻完善的测试并实际运行，好过对完美测试的无尽等待。\n- 考虑可能出错的边界条件，把测试火力集中在那儿。\n- 当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常。\n- 不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。\n\n## 重构列表\n\n重构的基本技巧———小步前进，频繁测试","source":"_posts/refactor/refactor.md","raw":"---\ntitle: refactor\ndate: 2017-02-09 16:53:10\ntags: read\n---\n\n## 重构\n\n- 如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后现添加特性\n- 重构前，先检查自己是否有一套可靠的测试机制，这些测试必须有自我检验能力\n- 重构技术就是以微小的步伐修改程序，如果你犯下错误，很容易使可发现它。\n- 任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。\n- 当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。\n\n\n<!--more-->\n\n## 重构原则\n\n#### 何为重构\n\n> **重构(名词)**：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本\n>\n> **重构(动词)**：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。\n\n#### 为何重构\n\n- 重构改进软件设计\n- 重构使软件更容易理解\n- 重构帮助找到BUG\n- 重构提高编程速度\n\n#### 何时重构\n**三次法则（事不过三，三则重构）**\n- 添加功能时重构\n- 修补错误时重构\n- 复审代码时重构\n\n## 代码的坏味道\n\n- **Duplicated Code(重复代码)**\n\n- **Long Method(过长函数)**\n\n- **Large Class(过大的类)**\n\n- **Long Parameter List(过长参数列)**\n\n- **Divergent Change(发散式变化)**\n\n  （如果某个类经常因为不同的原因在不同的方向上发生变化，Divergent Change就出现了）\n\n- **Shotgun Surgery(霰弹式修改)**\n\n  （Shotgun Surgery类亿Divergent Change，但恰恰相反。如果每遇到某种变化，你都必须在许多不同的类内做许多小修改，你所面临的坏味道就是Shotgun Surgery）\n\n- **Feature Envy(依恋情结)**\n\n  （函数对某个类的兴趣高过对自己所处类的兴趣）\n\n- **Data Clumps(数据泥团)**\n\n  （两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。）\n\n- **Primitive Obsession(基本类型偏执)**\n\n  （对象技术的新手通常不愿意在小任务上运用小对象—像是结合数值和币种的money类、由一个超始值和一个结束值组成的range类、电话号码或邮政编码）\n\n- **Switch Statements(switch惊悚现身)**\n\n  （你常会发现同样的switch语句散布于不同地点。如果要为它添加一个新的case子句，就必须找到所有switch语句并修改它们。面向对象中的多态概念可为此带来优雅的解决办法。）\n\n- **Parallel Inheritance Hierarchies(平行继承体系)**\n\n  （Parallel Inheritance Hierarchies其实是Shotgun Surgery的特殊情况。在这种情况下，每当你为某个类增加一个子类，必须也为另一相类增加一个子类。如果你发现某个继承体系的类名称前缀和别一个继承体系的类名称前缀完全相同，便是闻到了这种坏味道。）\n\n- **Lazy Class(冗赘类)**\n\n  （你所创建的每一个类，都得有人去理解它、维护它，这些工作都是要花钱的。如果一个类的所得不值其身价，它就应该消失。）\n\n- **Speculative Generality(夸夸其谈未来性)**\n\n  （企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了。）\n\n- **Temporary Field(令人迷惑的暂时字段)**\n\n  （某个实例变量仅为某种特定情况而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有变量。）\n\n- **Message Chains(过度耦合的消息链)**\n\n  （向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求别一个对象……这就是消息链。采取这种方式，意味客户代码将与查找过程中的导航结构紧密耦合。一旦对象间的关系发生变化，客户端就不得不做了相应修改。）\n\n- **Middle Man(中间人)**\n\n  （对象的基本特征之一就是封装—对外部世界隐藏其内部细节。封装往往伴随委托。但是人们可能过度运用委托。你也许会看到某个类接口有一关的函数都委托给其他类，这样就是过度运用。）\n\n- **Inappropriate Intimacy(狎昵关系)**\n\n  （有时你会看到两个类过于亲密，花费太多时间去探究彼此的private成分。对于这样过分狎昵的类必须拆散。）\n\n- **Alternative Classes with Different Interfaces(异曲同工的类)**\n\n  （两个函数做同一件事，却有着不同的签名）\n\n- **Incomplete Library Class(不完美的库类)**\n\n- **Data Class(纯稚的数据类)**\n\n  （它们拥有一些字段，以及用于访问、读写这些字段的函数，除此之外一无长物。这样的类只是一种不会说话的数据容器，它们几乎一定被其它类过分细琐地操控着。对于那些不该被其他类修改的字段。请提示get/set）\n\n- **Refused Bequest(被拒绝的遗赠)**\n\n  (子类应该继承超类的函数和数据。但有时子类不需要继承一些无关的数据。这样一来，超类就只持有所有子类共享的东西。—所有超类都应该是抽象的)\n\n- **Comments(过多的注释)**\n\n  ​\n## 构筑测试体系 \n\n- 确保所有测试都完全自动化，让它们检查自己的测试结果。\n- 一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。\n- 频繁地运行测试。每次编译请把测试也考虑进去—每天至少执行每个测试一次。\n- 每当你收到bug报告，请先写一个单元测试来暴露这个bug。\n- 编写未臻完善的测试并实际运行，好过对完美测试的无尽等待。\n- 考虑可能出错的边界条件，把测试火力集中在那儿。\n- 当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常。\n- 不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。\n\n## 重构列表\n\n重构的基本技巧———小步前进，频繁测试","slug":"refactor/refactor","published":1,"updated":"2017-02-27T03:17:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uw001xfq9mkyhnwfno","content":"<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><ul>\n<li>如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后现添加特性</li>\n<li>重构前，先检查自己是否有一套可靠的测试机制，这些测试必须有自我检验能力</li>\n<li>重构技术就是以微小的步伐修改程序，如果你犯下错误，很容易使可发现它。</li>\n<li>任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。</li>\n<li>当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"重构原则\"><a href=\"#重构原则\" class=\"headerlink\" title=\"重构原则\"></a>重构原则</h2><h4 id=\"何为重构\"><a href=\"#何为重构\" class=\"headerlink\" title=\"何为重构\"></a>何为重构</h4><blockquote>\n<p><strong>重构(名词)</strong>：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本</p>\n<p><strong>重构(动词)</strong>：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。</p>\n</blockquote>\n<h4 id=\"为何重构\"><a href=\"#为何重构\" class=\"headerlink\" title=\"为何重构\"></a>为何重构</h4><ul>\n<li>重构改进软件设计</li>\n<li>重构使软件更容易理解</li>\n<li>重构帮助找到BUG</li>\n<li>重构提高编程速度</li>\n</ul>\n<h4 id=\"何时重构\"><a href=\"#何时重构\" class=\"headerlink\" title=\"何时重构\"></a>何时重构</h4><p><strong>三次法则（事不过三，三则重构）</strong></p>\n<ul>\n<li>添加功能时重构</li>\n<li>修补错误时重构</li>\n<li>复审代码时重构</li>\n</ul>\n<h2 id=\"代码的坏味道\"><a href=\"#代码的坏味道\" class=\"headerlink\" title=\"代码的坏味道\"></a>代码的坏味道</h2><ul>\n<li><p><strong>Duplicated Code(重复代码)</strong></p>\n</li>\n<li><p><strong>Long Method(过长函数)</strong></p>\n</li>\n<li><p><strong>Large Class(过大的类)</strong></p>\n</li>\n<li><p><strong>Long Parameter List(过长参数列)</strong></p>\n</li>\n<li><p><strong>Divergent Change(发散式变化)</strong></p>\n<p>（如果某个类经常因为不同的原因在不同的方向上发生变化，Divergent Change就出现了）</p>\n</li>\n<li><p><strong>Shotgun Surgery(霰弹式修改)</strong></p>\n<p>（Shotgun Surgery类亿Divergent Change，但恰恰相反。如果每遇到某种变化，你都必须在许多不同的类内做许多小修改，你所面临的坏味道就是Shotgun Surgery）</p>\n</li>\n<li><p><strong>Feature Envy(依恋情结)</strong></p>\n<p>（函数对某个类的兴趣高过对自己所处类的兴趣）</p>\n</li>\n<li><p><strong>Data Clumps(数据泥团)</strong></p>\n<p>（两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。）</p>\n</li>\n<li><p><strong>Primitive Obsession(基本类型偏执)</strong></p>\n<p>（对象技术的新手通常不愿意在小任务上运用小对象—像是结合数值和币种的money类、由一个超始值和一个结束值组成的range类、电话号码或邮政编码）</p>\n</li>\n<li><p><strong>Switch Statements(switch惊悚现身)</strong></p>\n<p>（你常会发现同样的switch语句散布于不同地点。如果要为它添加一个新的case子句，就必须找到所有switch语句并修改它们。面向对象中的多态概念可为此带来优雅的解决办法。）</p>\n</li>\n<li><p><strong>Parallel Inheritance Hierarchies(平行继承体系)</strong></p>\n<p>（Parallel Inheritance Hierarchies其实是Shotgun Surgery的特殊情况。在这种情况下，每当你为某个类增加一个子类，必须也为另一相类增加一个子类。如果你发现某个继承体系的类名称前缀和别一个继承体系的类名称前缀完全相同，便是闻到了这种坏味道。）</p>\n</li>\n<li><p><strong>Lazy Class(冗赘类)</strong></p>\n<p>（你所创建的每一个类，都得有人去理解它、维护它，这些工作都是要花钱的。如果一个类的所得不值其身价，它就应该消失。）</p>\n</li>\n<li><p><strong>Speculative Generality(夸夸其谈未来性)</strong></p>\n<p>（企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了。）</p>\n</li>\n<li><p><strong>Temporary Field(令人迷惑的暂时字段)</strong></p>\n<p>（某个实例变量仅为某种特定情况而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有变量。）</p>\n</li>\n<li><p><strong>Message Chains(过度耦合的消息链)</strong></p>\n<p>（向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求别一个对象……这就是消息链。采取这种方式，意味客户代码将与查找过程中的导航结构紧密耦合。一旦对象间的关系发生变化，客户端就不得不做了相应修改。）</p>\n</li>\n<li><p><strong>Middle Man(中间人)</strong></p>\n<p>（对象的基本特征之一就是封装—对外部世界隐藏其内部细节。封装往往伴随委托。但是人们可能过度运用委托。你也许会看到某个类接口有一关的函数都委托给其他类，这样就是过度运用。）</p>\n</li>\n<li><p><strong>Inappropriate Intimacy(狎昵关系)</strong></p>\n<p>（有时你会看到两个类过于亲密，花费太多时间去探究彼此的private成分。对于这样过分狎昵的类必须拆散。）</p>\n</li>\n<li><p><strong>Alternative Classes with Different Interfaces(异曲同工的类)</strong></p>\n<p>（两个函数做同一件事，却有着不同的签名）</p>\n</li>\n<li><p><strong>Incomplete Library Class(不完美的库类)</strong></p>\n</li>\n<li><p><strong>Data Class(纯稚的数据类)</strong></p>\n<p>（它们拥有一些字段，以及用于访问、读写这些字段的函数，除此之外一无长物。这样的类只是一种不会说话的数据容器，它们几乎一定被其它类过分细琐地操控着。对于那些不该被其他类修改的字段。请提示get/set）</p>\n</li>\n<li><p><strong>Refused Bequest(被拒绝的遗赠)</strong></p>\n<p>(子类应该继承超类的函数和数据。但有时子类不需要继承一些无关的数据。这样一来，超类就只持有所有子类共享的东西。—所有超类都应该是抽象的)</p>\n</li>\n<li><p><strong>Comments(过多的注释)</strong></p>\n<p>​</p>\n<h2 id=\"构筑测试体系\"><a href=\"#构筑测试体系\" class=\"headerlink\" title=\"构筑测试体系\"></a>构筑测试体系</h2></li>\n<li><p>确保所有测试都完全自动化，让它们检查自己的测试结果。</p>\n</li>\n<li>一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。</li>\n<li>频繁地运行测试。每次编译请把测试也考虑进去—每天至少执行每个测试一次。</li>\n<li>每当你收到bug报告，请先写一个单元测试来暴露这个bug。</li>\n<li>编写未臻完善的测试并实际运行，好过对完美测试的无尽等待。</li>\n<li>考虑可能出错的边界条件，把测试火力集中在那儿。</li>\n<li>当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常。</li>\n<li>不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。</li>\n</ul>\n<h2 id=\"重构列表\"><a href=\"#重构列表\" class=\"headerlink\" title=\"重构列表\"></a>重构列表</h2><p>重构的基本技巧———小步前进，频繁测试</p>\n","excerpt":"<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><ul>\n<li>如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后现添加特性</li>\n<li>重构前，先检查自己是否有一套可靠的测试机制，这些测试必须有自我检验能力</li>\n<li>重构技术就是以微小的步伐修改程序，如果你犯下错误，很容易使可发现它。</li>\n<li>任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。</li>\n<li>当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。</li>\n</ul>","more":"<h2 id=\"重构原则\"><a href=\"#重构原则\" class=\"headerlink\" title=\"重构原则\"></a>重构原则</h2><h4 id=\"何为重构\"><a href=\"#何为重构\" class=\"headerlink\" title=\"何为重构\"></a>何为重构</h4><blockquote>\n<p><strong>重构(名词)</strong>：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本</p>\n<p><strong>重构(动词)</strong>：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。</p>\n</blockquote>\n<h4 id=\"为何重构\"><a href=\"#为何重构\" class=\"headerlink\" title=\"为何重构\"></a>为何重构</h4><ul>\n<li>重构改进软件设计</li>\n<li>重构使软件更容易理解</li>\n<li>重构帮助找到BUG</li>\n<li>重构提高编程速度</li>\n</ul>\n<h4 id=\"何时重构\"><a href=\"#何时重构\" class=\"headerlink\" title=\"何时重构\"></a>何时重构</h4><p><strong>三次法则（事不过三，三则重构）</strong></p>\n<ul>\n<li>添加功能时重构</li>\n<li>修补错误时重构</li>\n<li>复审代码时重构</li>\n</ul>\n<h2 id=\"代码的坏味道\"><a href=\"#代码的坏味道\" class=\"headerlink\" title=\"代码的坏味道\"></a>代码的坏味道</h2><ul>\n<li><p><strong>Duplicated Code(重复代码)</strong></p>\n</li>\n<li><p><strong>Long Method(过长函数)</strong></p>\n</li>\n<li><p><strong>Large Class(过大的类)</strong></p>\n</li>\n<li><p><strong>Long Parameter List(过长参数列)</strong></p>\n</li>\n<li><p><strong>Divergent Change(发散式变化)</strong></p>\n<p>（如果某个类经常因为不同的原因在不同的方向上发生变化，Divergent Change就出现了）</p>\n</li>\n<li><p><strong>Shotgun Surgery(霰弹式修改)</strong></p>\n<p>（Shotgun Surgery类亿Divergent Change，但恰恰相反。如果每遇到某种变化，你都必须在许多不同的类内做许多小修改，你所面临的坏味道就是Shotgun Surgery）</p>\n</li>\n<li><p><strong>Feature Envy(依恋情结)</strong></p>\n<p>（函数对某个类的兴趣高过对自己所处类的兴趣）</p>\n</li>\n<li><p><strong>Data Clumps(数据泥团)</strong></p>\n<p>（两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。）</p>\n</li>\n<li><p><strong>Primitive Obsession(基本类型偏执)</strong></p>\n<p>（对象技术的新手通常不愿意在小任务上运用小对象—像是结合数值和币种的money类、由一个超始值和一个结束值组成的range类、电话号码或邮政编码）</p>\n</li>\n<li><p><strong>Switch Statements(switch惊悚现身)</strong></p>\n<p>（你常会发现同样的switch语句散布于不同地点。如果要为它添加一个新的case子句，就必须找到所有switch语句并修改它们。面向对象中的多态概念可为此带来优雅的解决办法。）</p>\n</li>\n<li><p><strong>Parallel Inheritance Hierarchies(平行继承体系)</strong></p>\n<p>（Parallel Inheritance Hierarchies其实是Shotgun Surgery的特殊情况。在这种情况下，每当你为某个类增加一个子类，必须也为另一相类增加一个子类。如果你发现某个继承体系的类名称前缀和别一个继承体系的类名称前缀完全相同，便是闻到了这种坏味道。）</p>\n</li>\n<li><p><strong>Lazy Class(冗赘类)</strong></p>\n<p>（你所创建的每一个类，都得有人去理解它、维护它，这些工作都是要花钱的。如果一个类的所得不值其身价，它就应该消失。）</p>\n</li>\n<li><p><strong>Speculative Generality(夸夸其谈未来性)</strong></p>\n<p>（企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了。）</p>\n</li>\n<li><p><strong>Temporary Field(令人迷惑的暂时字段)</strong></p>\n<p>（某个实例变量仅为某种特定情况而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有变量。）</p>\n</li>\n<li><p><strong>Message Chains(过度耦合的消息链)</strong></p>\n<p>（向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求别一个对象……这就是消息链。采取这种方式，意味客户代码将与查找过程中的导航结构紧密耦合。一旦对象间的关系发生变化，客户端就不得不做了相应修改。）</p>\n</li>\n<li><p><strong>Middle Man(中间人)</strong></p>\n<p>（对象的基本特征之一就是封装—对外部世界隐藏其内部细节。封装往往伴随委托。但是人们可能过度运用委托。你也许会看到某个类接口有一关的函数都委托给其他类，这样就是过度运用。）</p>\n</li>\n<li><p><strong>Inappropriate Intimacy(狎昵关系)</strong></p>\n<p>（有时你会看到两个类过于亲密，花费太多时间去探究彼此的private成分。对于这样过分狎昵的类必须拆散。）</p>\n</li>\n<li><p><strong>Alternative Classes with Different Interfaces(异曲同工的类)</strong></p>\n<p>（两个函数做同一件事，却有着不同的签名）</p>\n</li>\n<li><p><strong>Incomplete Library Class(不完美的库类)</strong></p>\n</li>\n<li><p><strong>Data Class(纯稚的数据类)</strong></p>\n<p>（它们拥有一些字段，以及用于访问、读写这些字段的函数，除此之外一无长物。这样的类只是一种不会说话的数据容器，它们几乎一定被其它类过分细琐地操控着。对于那些不该被其他类修改的字段。请提示get/set）</p>\n</li>\n<li><p><strong>Refused Bequest(被拒绝的遗赠)</strong></p>\n<p>(子类应该继承超类的函数和数据。但有时子类不需要继承一些无关的数据。这样一来，超类就只持有所有子类共享的东西。—所有超类都应该是抽象的)</p>\n</li>\n<li><p><strong>Comments(过多的注释)</strong></p>\n<p>​</p>\n<h2 id=\"构筑测试体系\"><a href=\"#构筑测试体系\" class=\"headerlink\" title=\"构筑测试体系\"></a>构筑测试体系</h2></li>\n<li><p>确保所有测试都完全自动化，让它们检查自己的测试结果。</p>\n</li>\n<li>一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。</li>\n<li>频繁地运行测试。每次编译请把测试也考虑进去—每天至少执行每个测试一次。</li>\n<li>每当你收到bug报告，请先写一个单元测试来暴露这个bug。</li>\n<li>编写未臻完善的测试并实际运行，好过对完美测试的无尽等待。</li>\n<li>考虑可能出错的边界条件，把测试火力集中在那儿。</li>\n<li>当事情被认为应该会出错时，别忘了检查是否抛出了预期的异常。</li>\n<li>不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。</li>\n</ul>\n<h2 id=\"重构列表\"><a href=\"#重构列表\" class=\"headerlink\" title=\"重构列表\"></a>重构列表</h2><p>重构的基本技巧———小步前进，频繁测试</p>"},{"title":"refactor-demo","date":"2017-03-21T03:56:09.000Z","_content":"\n### 重新组织函数\n\n##### Extract Method (提炼函数)\n(将这段代码放进一个独立函数中，并让函数名称解释该函数的用途)\n```java\nvoid printOwing(double amount) {\n  printBanner();\n  \n  // print details\n  System.out.println(\"name: \" + _name);\n  System.out.println(\"amout: \" + amount);\n}\n==>\nvoid printOwing(double amount) {\n  printBanner();\n  printDetails(amount);\n}\n\nvoid  printDetails(double amount) {\n  System.out.println(\"name: \" + _name);\n  System.out.println(\"amout: \" + amount);\n}\n\n\n```\n\n<!--more-->\n\n##### Inline Method (内联函数)\n\n（在函数调用点插入函数体，然后移除该函数）\n\n```java\nint getRating() {\n  return (moreThanFiveLateDeliveries()) ? 2 : 1;\n}\nboolean moreThanFiveLateDeliveries() {\n  return _numberOfLateDeliveries > 5;\n}\n==>\nint getRating() {\n  return (_numberOfLateDeliveries > 5) ? 2 : 1;\n} \n  \n```\n\n##### Inline Temp (内联临时变量)\n\n（将所有对该变量的引用动作，替换为对它赋值的那个表达式自身。）\n\n```java\ndouble basePrice = anOrder.basePrice();\nreturn (basePrice > 1000);\n==>\nreturn (anOrder.basePrice() > 1000);\n```\n\n##### Replace Temp with Query（以查询取代临时变量）\n\n(将这个表达式提炼到一个独立函数中，将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可被其他函数使用。)\n\n```java\ndouble basePrice = _quantity * _itemPrice;\nif (basePrice > 1000) {\n  return basePrice * 0.95;\n} else {\n  return basePrice * 0.98;\n}\n==>\nif (basePrice() > 1000) {\n  return basePrice() * 0.95;\n} else {\n  return basePrice * 0.98;\n}\ndouble basePrice() {\n  return _quantity * _itemPrice;\n}\n```\n\n##### Introduce Explaining Variable（引用解释性变量）\n\n(将该复杂表达或其中一部分的结果放进一个临时变量，以此变量名称来解释表达式的用途。)\n\n```java\nif ((platform.toUpperCase().indexOf(\"MAC\") > -1) &&\n    (browser.toUpperCase().indexOf(\"IE\") > -1) &&\n    wasInitialized() && resize > 0 {\n      \n   // do something\n}\n==>\nfinal boolean isMacOs = platform.toUpperCase().indexOf(\"MAC\") > -1;\nfinal boolean isIEBrowser = browser.toUpperCase().indexOf(\"IE\") > -1;\nfinal boolean wasResized = resize > 0;\n\nif (isMacOs && isIEBrowser && wasInitialized() && wasResized) {\n  // do something\n}\n```\n\n##### Split Temporary Variable（分解临时变量）\n\n（针对每次赋值，创造一个独立、对应的临时变量）\n\n```java\ndouble temp = 2 * (_height + _width);\nSystem.out.println(temp);\ntemp = _height * _width;\nSystem.out.println(temp);\n==>\nfinal double perimeter = 2 * (_height + _width);\nSystem.out.println(perimeter);\nfinal double area = _height * _width;\nSystem.out.println(area);\n```\n\n##### Remove Assignments to Parameters\n\n(以一个临时变量取代该参数的位置)\n\n```java\nint discount(int inputVal, int quantity, int yearToDate) {\n  if (inputVal > 50) {\n    inputVal -= 2;\n  }\n}\n==>\nint discount(int inputVal, int quantity, int yearToDate) {\n  int result = inputVal;\n  if (inputVal > 50) {\n    result -= 2;\n  }\n} \n```\n\n##### Replace Method with Method Object(以函数对象取代函数)\n\n(将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数)\n\n```java\nclass Order {\n  double price() {\n    double primaryBasePrice\n    double secondaryBasePrice\n    ....\n    return primaryBasePrice + secondaryBasePrice + ...\n  }\n}\n==>\nclass Order {\n  double price() {\n    return new PriceCalculator(this).compute();\n  }\n}\nclass PriceCalculator {\n  double primaryBasePrice\n  double secondaryBasePrice\n  ...\n  double compute() {\n    return primaryBasePrice + secondaryBasePrice + ...\n  }\n}\n```\n\n##### Substitute Algorithm（替换算法）\n\n（将函数本体替换为另一个算法）\n\n```java\nString foundPerson(String[] people) {\n  for (int i = 0; i < people.length;i++) {\n    if (people[i].equals(\"Don\")) {\n      return \"Don\";\n    }\n    ...\n  }\n  return \"\";\n}\n==>\nString foundPerson(String[] people) {\n  List candidates = Arrays.asList(new String[] {\"Don\",\"John\",\"Kent\"});\n  for (int i = 0; i < people.length;i++) {\n    if (candidates.contains(people[i])) {\n      return people[i];\n    }\n  }\n  return \"\";\n}  \n```\n\n\n\n### 在对象之间搬移特性\n\n##### Move Method （搬移函数）\n\n\"搬移函数\"是重构理论的支柱。如是一个类有太多行为，或如果一个类与另一个类有太多合作而形成高度耦合，我就会搬移函数。通过这种手段，可以使系统中的类更简单，这些类最终也将更干净利落地实现系统交付的任务。\n\n##### Move File (搬移字段)\n\n在类之间移动状态和行为，是重构过程中必不可少的措施。随着系统的发展，你会发现自己需要新的类，并需要将现有的工作责任拖到新的类中。在这个星期看似合理而正确的设计决策，到了下个星期可能不再正确。这没问题。如果你从来没遇到这种情况，那才有问题。\n\n##### Extract Class（提炼类）\n\n（建立一个新类，将相关的字段和函数从旧类搬移到新类）\n\n```java\nclass Person {\n  String name, officeAreaCode, officeNumber;\n  void getTelephoneNumber(){}\n}\n==>\nclass Person {\n  String name;\n  void getTelephoneNumber(){}\n}\nclass TelephoneNumber {\n  String areaCode, number;\n  void getTelephoneNumber(){}\n}\n```\n\n##### Inline Class（将类内联化）\n\n将这个类的所有特性搬移到别一个类中，然后移除原类。\n\n##### Hide Delegate（隐藏\"委托关系\"）\n\n在服务类上建立客户所需的所有函数，用以隐藏委托关系。\n\n##### Remove Middle Man（移除中间人）\n\n让客户直接调用受托类\n\n##### Introduce Foreign Method（引入外加函数）\n\n（在客户类中建立一个函数，并以第一参数形式传入一个服务类实例）\n\n```java\nDate newStart = new Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate() + 1);\n==>\nDate newStart = nextDay(previousEnd);\nprivate static Date nextDay(Date arg) {\n  return new Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate());\n}\n\n```\n\n##### Introduce Local Extension（引入本地扩展）\n\n建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。\n\n\n\n### 重新组织数据\n\n##### Self Encapsulate Field（自封装字段）\n\n（为这个字段建立取值/设值函数，并且只以这些函数来访问字段）\n\n```java\nprivate int _low, _hight;\nboolean includes (int arg) {\n  return arg >= _low && arg <= _high;\n}\n==>\nprivate int _low, _hight;\nboolean includes (int arg) {\n  return arg >= getLow() && arg <= getHigh();\n}\nint getLow() {return _low;}\nint getHight() {return _hight;}\n```\n\n##### Replace Data Value with Object（以对象取代数据值）\n\n你有一个数据，需要与其他数据和行为一起使用才有意义。\n\n##### Change Value to Reference（将值对象改为引用对象）\n\n你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。**将这个值对象变世引用对象**\n\n##### Change Reference to Value （将引用对象改为值对象）\n\n你有一个引用对象，很小且不可变，而且不易管理。**将它变成一个值对象**。\n\n##### Replace Array with Object（以对象取代数组）\n\n你有一个数组，其中的元素各自代表不同的东西。\n\n(以对象替换数组，对于数组中的每个元素，以一个字段来表示)\n\n```java\nString[] row = new String[3];\nrow[0] = \"Liverpool\";\nrow[1] = \"15\";\n==>\nPerformance row = new Performance();\nrow.setName(\"Liverpool\");\nrow.setWins(\"15\");\n```\n\n##### Duplicate Observed Data（复制\"被监视数据\"）\n\n你有一些领域数据置身于GUI控件中，而领域函数需要访问这些数据。（将该数据复制到一个领域对象中。建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据）\n\n##### Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）\n\n两个类都需要使用对方特性，但其间只有一条单向连接。（添加一个返回指针，并使修改函数能够同时更新两条连接）\n\n**Change Bidirectional Association to Unidirectional （将双向关联改为单向关联）**\n\n两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。（去除不必要的关联）\n\n**Replace Magic Number with Symbolic Constant（以字面常量取代魔法数）**\n\n（创建一个常量，根据其意义为它命名，并将上述的字面数值替换为这个常量。）\n\n```java\ndouble potentialEnergy(double mass, double height) {\n  return mass * 9.81 * height;\n}\n==>\ndouble potentialEnergy(double mass, double height) {\n  return mass * GRAVITATIONAL_CONSTANT * height;\n}\nstatic final double GRAVITATIONAL_CONSTANT = 9.81;\n```\n\n**Encapsulate Field（封装字段 ）**\n\n你的类中存在一个public字段。将它声明为private，并提供相应的访问函数。\n\n```java\npublic String _name;\n==>\nprivate String _name;\npublic String getName() {return _name;}\npublic void setName(String arg) {_name = arg;}\n```\n\n##### Encapsulate Collection（封装集合）\n\n有个函数返回一个集合。（让这个函数返回该集合的一个只读副本，并在这个类中提供添加、移除集合元素的函数。）\n\n##### Replace Recore with Data Class（以数据类取代记录）\n\n你需要面对传统编程环境中的记录结构。为该记录创建一个\"哑\"数据对象。\n\n##### Replace Type Code with Class（以类取代类型码）\n\n类之中有一个数值类型码，但它并不影响类的行为。（以一个新的类替换该数值类型码。）\n\n```java\nclass Person {\n  int O, A, B, AB;\n  int bloodGroup;\n}\n==>\nclass Person {}\nclass BloodGroup {\n  BloodGroup O, A, B, AB\n}\n```\n\n##### Replace Type Code with Subclasses（以子类取代类型码）\n\n你有一个不可变的类型码，它会影响类的行为：\n\n```java\nclass Employee {\n  int ENGINEER;\n  int SALESMAN;\n}\n==>\nclass Employee {}\nclass Engineer {}\nclass Salesman {}\n```\n\n##### Replace Type Code with State/Strategy（以State/Strategy取代类型码）\n\n你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。（以状态对象取代类型码）\n\n##### Replace Subclass with Fields（以字段取代子类）\n\n你的各个子类的唯一差别只在\"返回常量数据\"的函数身上。修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类\n\n\n\n### 简化条件表达式\n\n##### Decompose Conditional（分解条件表达式）\n\n（从if、then、else三个段落中分别提炼出独立函数）\n\n```java\nif (date.before (SUMMER_START) || date.after(SUMMER_END)) {\n  charge = quantity * _winterRate + _winterServiceCharge;\n} else {\n  charge = quantity * _summberRate;\n}\n==>\nif (notSummer(date)) {\n  charge = winterCharge(quantity);\n} else {\n  charge = summerCharge(quantity);\n}\n```\n\n##### Consolidate Conditional Expression（合并条件表达式）\n\n你有一系列条件测试，都得到相同结果。（将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数）\n\n```java\ndouble disabilityAmount () {\n  if (_seniority < 2) { return 0;}\n  if (_monthsDisabled > 12) { return 0;}\n  if (_isPartTime) { return 0;}\n}\n==>\ndouble disabilityAmount() {\n  if (isNotEligibleForDisability()) {return 0;}\n}\n```\n\n##### Consolidate Duplicate Conditional Fragments（合并重复的条件片段）\n\n将下面这段重复代码搬移到条件表达式之外。\n\n```java\nif (isSpecialDeal()) {\n  total = price * 0.95;\n  send();\n} else {\n  total = price * 0.98;\n  send();\n}\n==>\nif (isSpecialDeal()) {\n  total = price * 0.95;\n} else {\n  total = price * 0.98;\n}\nsend();\n```\n##### Remove Control Flag（移除控制标记）\n\n以break语句或return语句取代控制标记\n\n##### Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）\n\n函数中的条件逻辑使人难以看清正常的执行路径。（使用卫语句表现所有特殊情况）\n\n```java\ndouble getPayAmount() {\n  double result;\n  if (_isDead) {\n    result = deadAmount();\n  } else {\n    if (_isSeparated) {\n      result = separatedAmount();\n    } else {\n      if (_isRetired) {\n        result = retiredAmount();\n      } else {\n        result = normalPayAmount();\n      } \n    }\n  }\n}\n==>\ndouble getPayAmount() {\n  if (_isDead) {\n    return deadAmount();\n  }\n  if (_isSeparated) {\n    return separatedAmount();\n  }\n  if (_isRetired) {\n    return retiredAmount();\n  } \n  return normalPayAmount();\n}\n```\n\n##### Replace Conditional with Polymorphism（以多态取代条件表达式）\n\n你手上有个条件表达式，它根据对象类型的不同而选择不同的行为。（将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。）\n\n```java\ndouble getSpeed() {\n  switch(_type) {\n    case EUROPEAN:\n      return getBaseSpeed;\n    case AFRICAN:\n      return getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;\n    case NORWEGINA_BLUE:\n      return (_isNailed) ? 0 : getBaseSpeed(_voltage);\n  }\n  throw new RuntimeException(\"Should be unreachable\");\n}\n==>\nabstract class Bird { abstract getSpeed()}\nclass European extends Bird { getSpeed()}\nclass African extends Bird { getSpeed()}\nclass NorwegianBlue extends Bird { getSpeed()}\n```\n\n##### Introduce Null Object（引用Null对象）\n\n你需要再三检查某个对象是否为null。（将null值替换为null对象）\n\n```java\nif (customer == null) {\n  plan = BillingPlan.basic();\n} else {\n  plan = customer.getPlan();\n}\n==>\nclass Customer { getPlan()}\nclass NullCustomer extends Customer {getPlan()}\n```\n\n##### Introduce Assertion（引入断言）\n\n某一段代码需要对程序状态做出某种假设。以断言明确表现这种假设。\n\n```java\ndouble getExpenseLimit() {\n  return (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();\n}\n==>\ndouble getExpenseLimit() {\n  Assert.isTrue (_expenseLimit != NULL_EXPENSE || _primaryProject != null);\n  return (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();\n}\n```\n\n\n\n### 简化函数调用\n\n##### Rename Method（函数改名）\n\n函数的名称未能指示函数的用途。修改函数名称。\n\n```java\nclass Customer {getinvcdtlmt()}\n==>\nclass Customer {getInvoiceableCreditLimit()}\n```\n\n##### Add Parameter（添加函数）\n\n某个函数需要从调用端得到更多信息。（为些函数添加一个对象参数，让该对象带进函数所需的信息）\n\n##### Remove Parameter（移除参数）\n\n函数本体不再需要某个参数。将该参数去除。\n\n##### Separate Query from Modifier（将查询函数和修改函数分离）\n\n某个函数既返回对象状态值，又修改对象状态。（建立两个不同的函数，其中一个负责查询，别一个负责修改。）\n\n```java\nclass Customer {getTotalOutstandingAndSetReadyForSummaries()}\n==>\nclass Customer {\n  getTotalOutstanding()\n  setReadyForSummaries()\n}\n```\n\n##### Parameterize Method（令函数携带参数）\n\n若干函数做了类似的工作，但在函数本体中却包含了不同的值。（建立单一函数，以参数表达那些不同的值。）\n\n```java\nclass Employee { \n  fivePercentRaise();\n  tenPercentRaise();\n}\n==>\nclass Employee {\n  raise(percentage);\n}\n```\n\n##### Replace Parameter with Explicit Methods（以明确函数取代参数）\n\n你有一个函数，其中完全取决于参数值而采取不同行为。（针对该参数的每一个可能值，建立一个独立函数。）\n\n```java\nvoid setValue(String name, int value) {\n  if (name.equals(\"height\")) {\n    _height = value;\n    return;\n  }\n  if (name.equals(\"width\")) {\n    _width = value;\n    return;\n  }\n  Assert.shouldNeverReachHere();\n}\n==>\nvoid setHeight(int arg) {\n  _height = arg;\n}\nvoid setWidth(int arg) {\n  _width = arg;\n}\n```\n\n##### Preserve Whole Object（保持对象完整）\n\n你从某个对象中取出若干值，将它们作为某一次函数调用的参数。改为传递整个对象。\n\n```java\nint low = daysTempRange().getLow();\nint hight = daysTempRange().getHeight;\nwithinPlan = plan.withinRange(low, hight);\n==>\nwithinPlan = plan.withinRange(daysTempRange());\n```\n\n##### Replace Parameter with Methods（以函数取代参数）\n\n对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。（让参数接受者去除该项参数，并直接调用前一个函数）\n\n```java\nint basePrice = _quantity * _itemPrice;\ndiscountLevel = getDiscountLevel();\ndouble finalPrice = discountedPrice(basePrice, discountLevel);\n==>\nint basePrice = _quantity * _itemPrice;\ndouble finalPrice = discountedPrice(basePrice);\n```\n\n##### Introduce Parameter Object（引入参数对象）\n\n某些参数总是很自然地同时出现。以一个对象取代这些参数。\n\n```java\nclass Customer {\n  amountInvoicedIn(start:Date, end: Date);\n  amountReceived(start:Date, end: Date);\n  amountOverdueln(start:Date, end: Date);\n}\n==>\nclass Customer {\n  amountInvoicedIn(DateRange);\n  amountReceived(DateRange);\n  amountOverdueln(DateRange);\n}\n```\n\n##### Remove Setting Method（移除设值函数）\n\n类中的某个字段应该在对象创建时候被设值，然后就不再改变。（去掉该字段的所有设值函数）\n\n```java\nclass Employee {\n  Immutable;\n  setImmutableValue()}\n==>\nclass Employee {}\n```\n\n##### Hide Method（隐藏函数）\n\n有一个函数，从来没有被其他任何类用到。（将这个函数修改为private）\n\n##### Replace Constructor with Factory Method（以工厂函数取代构造函数）\n\n你希望在创建对象时不仅仅是做简单的构建动作。（将构造函数替换为工厂函数。）\n\n```java\nEmployee(int type) {\n  _type = type\n}\n==>\nstatic Employee create(int type) {\n  return new Employee(type);\n}\n```\n\n##### Encapsulate Downcast（封装向下转型）\n\n某个函数返回的对象，需要由函数调用者执行向下转型(downcast)。（将向下转型动作移到函数中）\n\n```java\nObject lastReading() {\n  return readings.lastElement();\n}\n==>\nReading lastReading() {\n  return (Reading) readings.lastElement();\n}\n```\n\n##### Replace Error Code with Exception（以异常取代错误码）\n\n某个函数返回一个特定的代码，用以表示某种错误情况。（改用异常）\n\n```java\nint withdraw(int amount) {\n  if (amount > _balance) {\n    return -1;\n  } else {\n    _balance -= amount;\n    return 0;\n  }\n}\n==>\nvoid withdraw(int amount) throws BalanceException {\n  if (amount > _balance) {\n    throw new BalanceException();\n  }\n  _balance -= amount;\n}\n```\n\n##### Replace Exception with Test（以测试取代异常）\n\n面对一个调用者可以预先检查的条件，你抛出了一个异常。(修改调用者，使它在调用函数之前先做检查)\n\n```java\ndouble getValueForPeriod(int periodNumber) {\n  try {\n    return _values[periodNumber];\n  } catch(ArrayIndexOutOfBoundsException e) {\n    return 0;\n  }\n}\n==>\ndouble getValueForPeriod(int periodNumber) {\n  if (periodNumber >= _values.length) {\n    return 0;\n  }\n  return _values[periodNumber];\n}\n```\n\n\n\n### 处理概括关系\n\n##### Pull Up Field（字段上移）\n\n两个子类拥有相同的字段。（将该字段移至超类）\n\n##### Pull Up Method（函数上移）\n\n有些函数，在各个子类中产生完全相同的结果。（将该函数移至超类）\n\n##### Pull Up Constructor Body（构造函数本体上移）\n\n你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。（在超类中新建一个构造函数，并在子类的构造函数中调用它）\n\n```java\nclass Manager extends Employee {\n  public Manager(String name,String id,int grade) {\n    _name = name;\n    _id = id;\n    _grade = grade;\n  }\n}\n==>\npublic Manager(String name, String id, int grade) {\n  super(name, id);\n  _grade = grade;\n}\n```\n\n##### Push Down Method（函数下移）\n\n超类中的某个函数只与部分（而非全部）子类有关。（将这个函数移到相关子类去）\n\n##### Push Down Field（字段下移）\n\n超类中的某个字段只被部分（而非全部）子类用到。（将这个字段移到需要它的那些子类去）\n\n##### Extract Subclass（提炼子类）\n\n类中的某些特性只被某些（而非全部）实例用到。（新建一个子类，将上面所说的那一部分特性移到子类中）\n\n##### Extract SuperClass（提炼超类）\n\n两个类有相似特性。（为这两个类建立一个超类，将相同特性移至超类）\n\n##### Extract Interface（提炼接口）\n\n若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。（将相同的子集提炼到一个独立接口中）\n\n##### Collapse Hierarchy（折叠继承体系）\n\n超类和子类之间无太大区别。（将它们合为一体）\n\n##### Form Template Method（塑造模板函数）\n\n你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。（将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类）\n\n##### Replace Inheritance with Delegation（以委托取代继承）\n\n某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。（在子类中新建一个字段用以保存超类；调整子类函数，令它改而委托超类；然后去掉两者之间的继承关系）\n\n##### Replace Delegation with Inheritance（以继承取代委托）\n\n你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。（让委托类继承受托类）\n\n\n\n### 大型重构\n\n##### Tease Apart Inheritance（梳理并分解继承体系）\n\n某个继承体系同时承担两项责任。（建立两个继承体系，并通过委托关系让其中一个可以调用另一个）\n\n##### Convert Procedural Design to Objects（将过程化设计转化为对象设计）\n\n你手上有一些传统过程化风格的代码。（将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。）\n\n##### Separate Domain from Presentation（将领域和表述、显示分离）\n\n某些GUI类之中包含了领域逻辑。（将领域逻辑分离出来，为它们建立独立的领域类）\n\n```java\nclass OrderWindow {}\n==>\nclass OrderWindow{}\nclass Order{}\n```\n\n##### Extract Hierarchy（提炼继承体系）\n\n你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的。（建立继承体系，以一个子类表示一特殊情况）\n\n","source":"_posts/refactor/refactor-demo.md","raw":"---\ntitle: refactor-demo\ndate: 2017-03-21 11:56:09\ntags: read\n---\n\n### 重新组织函数\n\n##### Extract Method (提炼函数)\n(将这段代码放进一个独立函数中，并让函数名称解释该函数的用途)\n```java\nvoid printOwing(double amount) {\n  printBanner();\n  \n  // print details\n  System.out.println(\"name: \" + _name);\n  System.out.println(\"amout: \" + amount);\n}\n==>\nvoid printOwing(double amount) {\n  printBanner();\n  printDetails(amount);\n}\n\nvoid  printDetails(double amount) {\n  System.out.println(\"name: \" + _name);\n  System.out.println(\"amout: \" + amount);\n}\n\n\n```\n\n<!--more-->\n\n##### Inline Method (内联函数)\n\n（在函数调用点插入函数体，然后移除该函数）\n\n```java\nint getRating() {\n  return (moreThanFiveLateDeliveries()) ? 2 : 1;\n}\nboolean moreThanFiveLateDeliveries() {\n  return _numberOfLateDeliveries > 5;\n}\n==>\nint getRating() {\n  return (_numberOfLateDeliveries > 5) ? 2 : 1;\n} \n  \n```\n\n##### Inline Temp (内联临时变量)\n\n（将所有对该变量的引用动作，替换为对它赋值的那个表达式自身。）\n\n```java\ndouble basePrice = anOrder.basePrice();\nreturn (basePrice > 1000);\n==>\nreturn (anOrder.basePrice() > 1000);\n```\n\n##### Replace Temp with Query（以查询取代临时变量）\n\n(将这个表达式提炼到一个独立函数中，将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可被其他函数使用。)\n\n```java\ndouble basePrice = _quantity * _itemPrice;\nif (basePrice > 1000) {\n  return basePrice * 0.95;\n} else {\n  return basePrice * 0.98;\n}\n==>\nif (basePrice() > 1000) {\n  return basePrice() * 0.95;\n} else {\n  return basePrice * 0.98;\n}\ndouble basePrice() {\n  return _quantity * _itemPrice;\n}\n```\n\n##### Introduce Explaining Variable（引用解释性变量）\n\n(将该复杂表达或其中一部分的结果放进一个临时变量，以此变量名称来解释表达式的用途。)\n\n```java\nif ((platform.toUpperCase().indexOf(\"MAC\") > -1) &&\n    (browser.toUpperCase().indexOf(\"IE\") > -1) &&\n    wasInitialized() && resize > 0 {\n      \n   // do something\n}\n==>\nfinal boolean isMacOs = platform.toUpperCase().indexOf(\"MAC\") > -1;\nfinal boolean isIEBrowser = browser.toUpperCase().indexOf(\"IE\") > -1;\nfinal boolean wasResized = resize > 0;\n\nif (isMacOs && isIEBrowser && wasInitialized() && wasResized) {\n  // do something\n}\n```\n\n##### Split Temporary Variable（分解临时变量）\n\n（针对每次赋值，创造一个独立、对应的临时变量）\n\n```java\ndouble temp = 2 * (_height + _width);\nSystem.out.println(temp);\ntemp = _height * _width;\nSystem.out.println(temp);\n==>\nfinal double perimeter = 2 * (_height + _width);\nSystem.out.println(perimeter);\nfinal double area = _height * _width;\nSystem.out.println(area);\n```\n\n##### Remove Assignments to Parameters\n\n(以一个临时变量取代该参数的位置)\n\n```java\nint discount(int inputVal, int quantity, int yearToDate) {\n  if (inputVal > 50) {\n    inputVal -= 2;\n  }\n}\n==>\nint discount(int inputVal, int quantity, int yearToDate) {\n  int result = inputVal;\n  if (inputVal > 50) {\n    result -= 2;\n  }\n} \n```\n\n##### Replace Method with Method Object(以函数对象取代函数)\n\n(将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数)\n\n```java\nclass Order {\n  double price() {\n    double primaryBasePrice\n    double secondaryBasePrice\n    ....\n    return primaryBasePrice + secondaryBasePrice + ...\n  }\n}\n==>\nclass Order {\n  double price() {\n    return new PriceCalculator(this).compute();\n  }\n}\nclass PriceCalculator {\n  double primaryBasePrice\n  double secondaryBasePrice\n  ...\n  double compute() {\n    return primaryBasePrice + secondaryBasePrice + ...\n  }\n}\n```\n\n##### Substitute Algorithm（替换算法）\n\n（将函数本体替换为另一个算法）\n\n```java\nString foundPerson(String[] people) {\n  for (int i = 0; i < people.length;i++) {\n    if (people[i].equals(\"Don\")) {\n      return \"Don\";\n    }\n    ...\n  }\n  return \"\";\n}\n==>\nString foundPerson(String[] people) {\n  List candidates = Arrays.asList(new String[] {\"Don\",\"John\",\"Kent\"});\n  for (int i = 0; i < people.length;i++) {\n    if (candidates.contains(people[i])) {\n      return people[i];\n    }\n  }\n  return \"\";\n}  \n```\n\n\n\n### 在对象之间搬移特性\n\n##### Move Method （搬移函数）\n\n\"搬移函数\"是重构理论的支柱。如是一个类有太多行为，或如果一个类与另一个类有太多合作而形成高度耦合，我就会搬移函数。通过这种手段，可以使系统中的类更简单，这些类最终也将更干净利落地实现系统交付的任务。\n\n##### Move File (搬移字段)\n\n在类之间移动状态和行为，是重构过程中必不可少的措施。随着系统的发展，你会发现自己需要新的类，并需要将现有的工作责任拖到新的类中。在这个星期看似合理而正确的设计决策，到了下个星期可能不再正确。这没问题。如果你从来没遇到这种情况，那才有问题。\n\n##### Extract Class（提炼类）\n\n（建立一个新类，将相关的字段和函数从旧类搬移到新类）\n\n```java\nclass Person {\n  String name, officeAreaCode, officeNumber;\n  void getTelephoneNumber(){}\n}\n==>\nclass Person {\n  String name;\n  void getTelephoneNumber(){}\n}\nclass TelephoneNumber {\n  String areaCode, number;\n  void getTelephoneNumber(){}\n}\n```\n\n##### Inline Class（将类内联化）\n\n将这个类的所有特性搬移到别一个类中，然后移除原类。\n\n##### Hide Delegate（隐藏\"委托关系\"）\n\n在服务类上建立客户所需的所有函数，用以隐藏委托关系。\n\n##### Remove Middle Man（移除中间人）\n\n让客户直接调用受托类\n\n##### Introduce Foreign Method（引入外加函数）\n\n（在客户类中建立一个函数，并以第一参数形式传入一个服务类实例）\n\n```java\nDate newStart = new Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate() + 1);\n==>\nDate newStart = nextDay(previousEnd);\nprivate static Date nextDay(Date arg) {\n  return new Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate());\n}\n\n```\n\n##### Introduce Local Extension（引入本地扩展）\n\n建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。\n\n\n\n### 重新组织数据\n\n##### Self Encapsulate Field（自封装字段）\n\n（为这个字段建立取值/设值函数，并且只以这些函数来访问字段）\n\n```java\nprivate int _low, _hight;\nboolean includes (int arg) {\n  return arg >= _low && arg <= _high;\n}\n==>\nprivate int _low, _hight;\nboolean includes (int arg) {\n  return arg >= getLow() && arg <= getHigh();\n}\nint getLow() {return _low;}\nint getHight() {return _hight;}\n```\n\n##### Replace Data Value with Object（以对象取代数据值）\n\n你有一个数据，需要与其他数据和行为一起使用才有意义。\n\n##### Change Value to Reference（将值对象改为引用对象）\n\n你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。**将这个值对象变世引用对象**\n\n##### Change Reference to Value （将引用对象改为值对象）\n\n你有一个引用对象，很小且不可变，而且不易管理。**将它变成一个值对象**。\n\n##### Replace Array with Object（以对象取代数组）\n\n你有一个数组，其中的元素各自代表不同的东西。\n\n(以对象替换数组，对于数组中的每个元素，以一个字段来表示)\n\n```java\nString[] row = new String[3];\nrow[0] = \"Liverpool\";\nrow[1] = \"15\";\n==>\nPerformance row = new Performance();\nrow.setName(\"Liverpool\");\nrow.setWins(\"15\");\n```\n\n##### Duplicate Observed Data（复制\"被监视数据\"）\n\n你有一些领域数据置身于GUI控件中，而领域函数需要访问这些数据。（将该数据复制到一个领域对象中。建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据）\n\n##### Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）\n\n两个类都需要使用对方特性，但其间只有一条单向连接。（添加一个返回指针，并使修改函数能够同时更新两条连接）\n\n**Change Bidirectional Association to Unidirectional （将双向关联改为单向关联）**\n\n两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。（去除不必要的关联）\n\n**Replace Magic Number with Symbolic Constant（以字面常量取代魔法数）**\n\n（创建一个常量，根据其意义为它命名，并将上述的字面数值替换为这个常量。）\n\n```java\ndouble potentialEnergy(double mass, double height) {\n  return mass * 9.81 * height;\n}\n==>\ndouble potentialEnergy(double mass, double height) {\n  return mass * GRAVITATIONAL_CONSTANT * height;\n}\nstatic final double GRAVITATIONAL_CONSTANT = 9.81;\n```\n\n**Encapsulate Field（封装字段 ）**\n\n你的类中存在一个public字段。将它声明为private，并提供相应的访问函数。\n\n```java\npublic String _name;\n==>\nprivate String _name;\npublic String getName() {return _name;}\npublic void setName(String arg) {_name = arg;}\n```\n\n##### Encapsulate Collection（封装集合）\n\n有个函数返回一个集合。（让这个函数返回该集合的一个只读副本，并在这个类中提供添加、移除集合元素的函数。）\n\n##### Replace Recore with Data Class（以数据类取代记录）\n\n你需要面对传统编程环境中的记录结构。为该记录创建一个\"哑\"数据对象。\n\n##### Replace Type Code with Class（以类取代类型码）\n\n类之中有一个数值类型码，但它并不影响类的行为。（以一个新的类替换该数值类型码。）\n\n```java\nclass Person {\n  int O, A, B, AB;\n  int bloodGroup;\n}\n==>\nclass Person {}\nclass BloodGroup {\n  BloodGroup O, A, B, AB\n}\n```\n\n##### Replace Type Code with Subclasses（以子类取代类型码）\n\n你有一个不可变的类型码，它会影响类的行为：\n\n```java\nclass Employee {\n  int ENGINEER;\n  int SALESMAN;\n}\n==>\nclass Employee {}\nclass Engineer {}\nclass Salesman {}\n```\n\n##### Replace Type Code with State/Strategy（以State/Strategy取代类型码）\n\n你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。（以状态对象取代类型码）\n\n##### Replace Subclass with Fields（以字段取代子类）\n\n你的各个子类的唯一差别只在\"返回常量数据\"的函数身上。修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类\n\n\n\n### 简化条件表达式\n\n##### Decompose Conditional（分解条件表达式）\n\n（从if、then、else三个段落中分别提炼出独立函数）\n\n```java\nif (date.before (SUMMER_START) || date.after(SUMMER_END)) {\n  charge = quantity * _winterRate + _winterServiceCharge;\n} else {\n  charge = quantity * _summberRate;\n}\n==>\nif (notSummer(date)) {\n  charge = winterCharge(quantity);\n} else {\n  charge = summerCharge(quantity);\n}\n```\n\n##### Consolidate Conditional Expression（合并条件表达式）\n\n你有一系列条件测试，都得到相同结果。（将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数）\n\n```java\ndouble disabilityAmount () {\n  if (_seniority < 2) { return 0;}\n  if (_monthsDisabled > 12) { return 0;}\n  if (_isPartTime) { return 0;}\n}\n==>\ndouble disabilityAmount() {\n  if (isNotEligibleForDisability()) {return 0;}\n}\n```\n\n##### Consolidate Duplicate Conditional Fragments（合并重复的条件片段）\n\n将下面这段重复代码搬移到条件表达式之外。\n\n```java\nif (isSpecialDeal()) {\n  total = price * 0.95;\n  send();\n} else {\n  total = price * 0.98;\n  send();\n}\n==>\nif (isSpecialDeal()) {\n  total = price * 0.95;\n} else {\n  total = price * 0.98;\n}\nsend();\n```\n##### Remove Control Flag（移除控制标记）\n\n以break语句或return语句取代控制标记\n\n##### Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）\n\n函数中的条件逻辑使人难以看清正常的执行路径。（使用卫语句表现所有特殊情况）\n\n```java\ndouble getPayAmount() {\n  double result;\n  if (_isDead) {\n    result = deadAmount();\n  } else {\n    if (_isSeparated) {\n      result = separatedAmount();\n    } else {\n      if (_isRetired) {\n        result = retiredAmount();\n      } else {\n        result = normalPayAmount();\n      } \n    }\n  }\n}\n==>\ndouble getPayAmount() {\n  if (_isDead) {\n    return deadAmount();\n  }\n  if (_isSeparated) {\n    return separatedAmount();\n  }\n  if (_isRetired) {\n    return retiredAmount();\n  } \n  return normalPayAmount();\n}\n```\n\n##### Replace Conditional with Polymorphism（以多态取代条件表达式）\n\n你手上有个条件表达式，它根据对象类型的不同而选择不同的行为。（将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。）\n\n```java\ndouble getSpeed() {\n  switch(_type) {\n    case EUROPEAN:\n      return getBaseSpeed;\n    case AFRICAN:\n      return getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;\n    case NORWEGINA_BLUE:\n      return (_isNailed) ? 0 : getBaseSpeed(_voltage);\n  }\n  throw new RuntimeException(\"Should be unreachable\");\n}\n==>\nabstract class Bird { abstract getSpeed()}\nclass European extends Bird { getSpeed()}\nclass African extends Bird { getSpeed()}\nclass NorwegianBlue extends Bird { getSpeed()}\n```\n\n##### Introduce Null Object（引用Null对象）\n\n你需要再三检查某个对象是否为null。（将null值替换为null对象）\n\n```java\nif (customer == null) {\n  plan = BillingPlan.basic();\n} else {\n  plan = customer.getPlan();\n}\n==>\nclass Customer { getPlan()}\nclass NullCustomer extends Customer {getPlan()}\n```\n\n##### Introduce Assertion（引入断言）\n\n某一段代码需要对程序状态做出某种假设。以断言明确表现这种假设。\n\n```java\ndouble getExpenseLimit() {\n  return (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();\n}\n==>\ndouble getExpenseLimit() {\n  Assert.isTrue (_expenseLimit != NULL_EXPENSE || _primaryProject != null);\n  return (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();\n}\n```\n\n\n\n### 简化函数调用\n\n##### Rename Method（函数改名）\n\n函数的名称未能指示函数的用途。修改函数名称。\n\n```java\nclass Customer {getinvcdtlmt()}\n==>\nclass Customer {getInvoiceableCreditLimit()}\n```\n\n##### Add Parameter（添加函数）\n\n某个函数需要从调用端得到更多信息。（为些函数添加一个对象参数，让该对象带进函数所需的信息）\n\n##### Remove Parameter（移除参数）\n\n函数本体不再需要某个参数。将该参数去除。\n\n##### Separate Query from Modifier（将查询函数和修改函数分离）\n\n某个函数既返回对象状态值，又修改对象状态。（建立两个不同的函数，其中一个负责查询，别一个负责修改。）\n\n```java\nclass Customer {getTotalOutstandingAndSetReadyForSummaries()}\n==>\nclass Customer {\n  getTotalOutstanding()\n  setReadyForSummaries()\n}\n```\n\n##### Parameterize Method（令函数携带参数）\n\n若干函数做了类似的工作，但在函数本体中却包含了不同的值。（建立单一函数，以参数表达那些不同的值。）\n\n```java\nclass Employee { \n  fivePercentRaise();\n  tenPercentRaise();\n}\n==>\nclass Employee {\n  raise(percentage);\n}\n```\n\n##### Replace Parameter with Explicit Methods（以明确函数取代参数）\n\n你有一个函数，其中完全取决于参数值而采取不同行为。（针对该参数的每一个可能值，建立一个独立函数。）\n\n```java\nvoid setValue(String name, int value) {\n  if (name.equals(\"height\")) {\n    _height = value;\n    return;\n  }\n  if (name.equals(\"width\")) {\n    _width = value;\n    return;\n  }\n  Assert.shouldNeverReachHere();\n}\n==>\nvoid setHeight(int arg) {\n  _height = arg;\n}\nvoid setWidth(int arg) {\n  _width = arg;\n}\n```\n\n##### Preserve Whole Object（保持对象完整）\n\n你从某个对象中取出若干值，将它们作为某一次函数调用的参数。改为传递整个对象。\n\n```java\nint low = daysTempRange().getLow();\nint hight = daysTempRange().getHeight;\nwithinPlan = plan.withinRange(low, hight);\n==>\nwithinPlan = plan.withinRange(daysTempRange());\n```\n\n##### Replace Parameter with Methods（以函数取代参数）\n\n对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。（让参数接受者去除该项参数，并直接调用前一个函数）\n\n```java\nint basePrice = _quantity * _itemPrice;\ndiscountLevel = getDiscountLevel();\ndouble finalPrice = discountedPrice(basePrice, discountLevel);\n==>\nint basePrice = _quantity * _itemPrice;\ndouble finalPrice = discountedPrice(basePrice);\n```\n\n##### Introduce Parameter Object（引入参数对象）\n\n某些参数总是很自然地同时出现。以一个对象取代这些参数。\n\n```java\nclass Customer {\n  amountInvoicedIn(start:Date, end: Date);\n  amountReceived(start:Date, end: Date);\n  amountOverdueln(start:Date, end: Date);\n}\n==>\nclass Customer {\n  amountInvoicedIn(DateRange);\n  amountReceived(DateRange);\n  amountOverdueln(DateRange);\n}\n```\n\n##### Remove Setting Method（移除设值函数）\n\n类中的某个字段应该在对象创建时候被设值，然后就不再改变。（去掉该字段的所有设值函数）\n\n```java\nclass Employee {\n  Immutable;\n  setImmutableValue()}\n==>\nclass Employee {}\n```\n\n##### Hide Method（隐藏函数）\n\n有一个函数，从来没有被其他任何类用到。（将这个函数修改为private）\n\n##### Replace Constructor with Factory Method（以工厂函数取代构造函数）\n\n你希望在创建对象时不仅仅是做简单的构建动作。（将构造函数替换为工厂函数。）\n\n```java\nEmployee(int type) {\n  _type = type\n}\n==>\nstatic Employee create(int type) {\n  return new Employee(type);\n}\n```\n\n##### Encapsulate Downcast（封装向下转型）\n\n某个函数返回的对象，需要由函数调用者执行向下转型(downcast)。（将向下转型动作移到函数中）\n\n```java\nObject lastReading() {\n  return readings.lastElement();\n}\n==>\nReading lastReading() {\n  return (Reading) readings.lastElement();\n}\n```\n\n##### Replace Error Code with Exception（以异常取代错误码）\n\n某个函数返回一个特定的代码，用以表示某种错误情况。（改用异常）\n\n```java\nint withdraw(int amount) {\n  if (amount > _balance) {\n    return -1;\n  } else {\n    _balance -= amount;\n    return 0;\n  }\n}\n==>\nvoid withdraw(int amount) throws BalanceException {\n  if (amount > _balance) {\n    throw new BalanceException();\n  }\n  _balance -= amount;\n}\n```\n\n##### Replace Exception with Test（以测试取代异常）\n\n面对一个调用者可以预先检查的条件，你抛出了一个异常。(修改调用者，使它在调用函数之前先做检查)\n\n```java\ndouble getValueForPeriod(int periodNumber) {\n  try {\n    return _values[periodNumber];\n  } catch(ArrayIndexOutOfBoundsException e) {\n    return 0;\n  }\n}\n==>\ndouble getValueForPeriod(int periodNumber) {\n  if (periodNumber >= _values.length) {\n    return 0;\n  }\n  return _values[periodNumber];\n}\n```\n\n\n\n### 处理概括关系\n\n##### Pull Up Field（字段上移）\n\n两个子类拥有相同的字段。（将该字段移至超类）\n\n##### Pull Up Method（函数上移）\n\n有些函数，在各个子类中产生完全相同的结果。（将该函数移至超类）\n\n##### Pull Up Constructor Body（构造函数本体上移）\n\n你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。（在超类中新建一个构造函数，并在子类的构造函数中调用它）\n\n```java\nclass Manager extends Employee {\n  public Manager(String name,String id,int grade) {\n    _name = name;\n    _id = id;\n    _grade = grade;\n  }\n}\n==>\npublic Manager(String name, String id, int grade) {\n  super(name, id);\n  _grade = grade;\n}\n```\n\n##### Push Down Method（函数下移）\n\n超类中的某个函数只与部分（而非全部）子类有关。（将这个函数移到相关子类去）\n\n##### Push Down Field（字段下移）\n\n超类中的某个字段只被部分（而非全部）子类用到。（将这个字段移到需要它的那些子类去）\n\n##### Extract Subclass（提炼子类）\n\n类中的某些特性只被某些（而非全部）实例用到。（新建一个子类，将上面所说的那一部分特性移到子类中）\n\n##### Extract SuperClass（提炼超类）\n\n两个类有相似特性。（为这两个类建立一个超类，将相同特性移至超类）\n\n##### Extract Interface（提炼接口）\n\n若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。（将相同的子集提炼到一个独立接口中）\n\n##### Collapse Hierarchy（折叠继承体系）\n\n超类和子类之间无太大区别。（将它们合为一体）\n\n##### Form Template Method（塑造模板函数）\n\n你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。（将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类）\n\n##### Replace Inheritance with Delegation（以委托取代继承）\n\n某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。（在子类中新建一个字段用以保存超类；调整子类函数，令它改而委托超类；然后去掉两者之间的继承关系）\n\n##### Replace Delegation with Inheritance（以继承取代委托）\n\n你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。（让委托类继承受托类）\n\n\n\n### 大型重构\n\n##### Tease Apart Inheritance（梳理并分解继承体系）\n\n某个继承体系同时承担两项责任。（建立两个继承体系，并通过委托关系让其中一个可以调用另一个）\n\n##### Convert Procedural Design to Objects（将过程化设计转化为对象设计）\n\n你手上有一些传统过程化风格的代码。（将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。）\n\n##### Separate Domain from Presentation（将领域和表述、显示分离）\n\n某些GUI类之中包含了领域逻辑。（将领域逻辑分离出来，为它们建立独立的领域类）\n\n```java\nclass OrderWindow {}\n==>\nclass OrderWindow{}\nclass Order{}\n```\n\n##### Extract Hierarchy（提炼继承体系）\n\n你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的。（建立继承体系，以一个子类表示一特殊情况）\n\n","slug":"refactor/refactor-demo","published":1,"updated":"2017-03-27T09:08:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ux001zfq9mmpd3brxa","content":"<h3 id=\"重新组织函数\"><a href=\"#重新组织函数\" class=\"headerlink\" title=\"重新组织函数\"></a>重新组织函数</h3><h5 id=\"Extract-Method-提炼函数\"><a href=\"#Extract-Method-提炼函数\" class=\"headerlink\" title=\"Extract Method (提炼函数)\"></a>Extract Method (提炼函数)</h5><p>(将这段代码放进一个独立函数中，并让函数名称解释该函数的用途)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  printBanner();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// print details</span></div><div class=\"line\">  System.out.println(<span class=\"string\">\"name: \"</span> + _name);</div><div class=\"line\">  System.out.println(<span class=\"string\">\"amout: \"</span> + amount);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  printBanner();</div><div class=\"line\">  printDetails(amount);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">printDetails</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"name: \"</span> + _name);</div><div class=\"line\">  System.out.println(<span class=\"string\">\"amout: \"</span> + amount);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h5 id=\"Inline-Method-内联函数\"><a href=\"#Inline-Method-内联函数\" class=\"headerlink\" title=\"Inline Method (内联函数)\"></a>Inline Method (内联函数)</h5><p>（在函数调用点插入函数体，然后移除该函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (moreThanFiveLateDeliveries()) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">moreThanFiveLateDeliveries</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> _numberOfLateDeliveries &gt; <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (_numberOfLateDeliveries &gt; <span class=\"number\">5</span>) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Inline-Temp-内联临时变量\"><a href=\"#Inline-Temp-内联临时变量\" class=\"headerlink\" title=\"Inline Temp (内联临时变量)\"></a>Inline Temp (内联临时变量)</h5><p>（将所有对该变量的引用动作，替换为对它赋值的那个表达式自身。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> basePrice = anOrder.basePrice();</div><div class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Temp-with-Query（以查询取代临时变量）\"><a href=\"#Replace-Temp-with-Query（以查询取代临时变量）\" class=\"headerlink\" title=\"Replace Temp with Query（以查询取代临时变量）\"></a>Replace Temp with Query（以查询取代临时变量）</h5><p>(将这个表达式提炼到一个独立函数中，将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可被其他函数使用。)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\"><span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">basePrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> _quantity * _itemPrice;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Explaining-Variable（引用解释性变量）\"><a href=\"#Introduce-Explaining-Variable（引用解释性变量）\" class=\"headerlink\" title=\"Introduce Explaining Variable（引用解释性变量）\"></a>Introduce Explaining Variable（引用解释性变量）</h5><p>(将该复杂表达或其中一部分的结果放进一个临时变量，以此变量名称来解释表达式的用途。)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</div><div class=\"line\">    (browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</div><div class=\"line\">    wasInitialized() &amp;&amp; resize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">      </div><div class=\"line\">   <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isMacOs = platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isIEBrowser = browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> wasResized = resize &gt; <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Split-Temporary-Variable（分解临时变量）\"><a href=\"#Split-Temporary-Variable（分解临时变量）\" class=\"headerlink\" title=\"Split Temporary Variable（分解临时变量）\"></a>Split Temporary Variable（分解临时变量）</h5><p>（针对每次赋值，创造一个独立、对应的临时变量）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> temp = <span class=\"number\">2</span> * (_height + _width);</div><div class=\"line\">System.out.println(temp);</div><div class=\"line\">temp = _height * _width;</div><div class=\"line\">System.out.println(temp);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> perimeter = <span class=\"number\">2</span> * (_height + _width);</div><div class=\"line\">System.out.println(perimeter);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> area = _height * _width;</div><div class=\"line\">System.out.println(area);</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Assignments-to-Parameters\"><a href=\"#Remove-Assignments-to-Parameters\" class=\"headerlink\" title=\"Remove Assignments to Parameters\"></a>Remove Assignments to Parameters</h5><p>(以一个临时变量取代该参数的位置)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span><span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quantity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">    inputVal -= <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span><span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quantity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = inputVal;</div><div class=\"line\">  <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">    result -= <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Method-with-Method-Object-以函数对象取代函数\"><a href=\"#Replace-Method-with-Method-Object-以函数对象取代函数\" class=\"headerlink\" title=\"Replace Method with Method Object(以函数对象取代函数)\"></a>Replace Method with Method Object(以函数对象取代函数)</h5><p>(将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">price</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> primaryBasePrice</div><div class=\"line\">    <span class=\"keyword\">double</span> secondaryBasePrice</div><div class=\"line\">    ....</div><div class=\"line\">    <span class=\"keyword\">return</span> primaryBasePrice + secondaryBasePrice + ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">price</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PriceCalculator(<span class=\"keyword\">this</span>).compute();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceCalculator</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">double</span> primaryBasePrice</div><div class=\"line\">  <span class=\"keyword\">double</span> secondaryBasePrice</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> primaryBasePrice + secondaryBasePrice + ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Substitute-Algorithm（替换算法）\"><a href=\"#Substitute-Algorithm（替换算法）\" class=\"headerlink\" title=\"Substitute Algorithm（替换算法）\"></a>Substitute Algorithm（替换算法）</h5><p>（将函数本体替换为另一个算法）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">String <span class=\"title\">foundPerson</span><span class=\"params\">(String[] people)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; people.length;i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (people[i].equals(<span class=\"string\">\"Don\"</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"Don\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\">String <span class=\"title\">foundPerson</span><span class=\"params\">(String[] people)</span> </span>&#123;</div><div class=\"line\">  List candidates = Arrays.asList(<span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"Don\"</span>,<span class=\"string\">\"John\"</span>,<span class=\"string\">\"Kent\"</span>&#125;);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; people.length;i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (candidates.contains(people[i])) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> people[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"在对象之间搬移特性\"><a href=\"#在对象之间搬移特性\" class=\"headerlink\" title=\"在对象之间搬移特性\"></a>在对象之间搬移特性</h3><h5 id=\"Move-Method-（搬移函数）\"><a href=\"#Move-Method-（搬移函数）\" class=\"headerlink\" title=\"Move Method （搬移函数）\"></a>Move Method （搬移函数）</h5><p>“搬移函数”是重构理论的支柱。如是一个类有太多行为，或如果一个类与另一个类有太多合作而形成高度耦合，我就会搬移函数。通过这种手段，可以使系统中的类更简单，这些类最终也将更干净利落地实现系统交付的任务。</p>\n<h5 id=\"Move-File-搬移字段\"><a href=\"#Move-File-搬移字段\" class=\"headerlink\" title=\"Move File (搬移字段)\"></a>Move File (搬移字段)</h5><p>在类之间移动状态和行为，是重构过程中必不可少的措施。随着系统的发展，你会发现自己需要新的类，并需要将现有的工作责任拖到新的类中。在这个星期看似合理而正确的设计决策，到了下个星期可能不再正确。这没问题。如果你从来没遇到这种情况，那才有问题。</p>\n<h5 id=\"Extract-Class（提炼类）\"><a href=\"#Extract-Class（提炼类）\" class=\"headerlink\" title=\"Extract Class（提炼类）\"></a>Extract Class（提炼类）</h5><p>（建立一个新类，将相关的字段和函数从旧类搬移到新类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  String name, officeAreaCode, officeNumber;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelephoneNumber</span> </span>&#123;</div><div class=\"line\">  String areaCode, number;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Inline-Class（将类内联化）\"><a href=\"#Inline-Class（将类内联化）\" class=\"headerlink\" title=\"Inline Class（将类内联化）\"></a>Inline Class（将类内联化）</h5><p>将这个类的所有特性搬移到别一个类中，然后移除原类。</p>\n<h5 id=\"Hide-Delegate（隐藏”委托关系”）\"><a href=\"#Hide-Delegate（隐藏”委托关系”）\" class=\"headerlink\" title=\"Hide Delegate（隐藏”委托关系”）\"></a>Hide Delegate（隐藏”委托关系”）</h5><p>在服务类上建立客户所需的所有函数，用以隐藏委托关系。</p>\n<h5 id=\"Remove-Middle-Man（移除中间人）\"><a href=\"#Remove-Middle-Man（移除中间人）\" class=\"headerlink\" title=\"Remove Middle Man（移除中间人）\"></a>Remove Middle Man（移除中间人）</h5><p>让客户直接调用受托类</p>\n<h5 id=\"Introduce-Foreign-Method（引入外加函数）\"><a href=\"#Introduce-Foreign-Method（引入外加函数）\" class=\"headerlink\" title=\"Introduce Foreign Method（引入外加函数）\"></a>Introduce Foreign Method（引入外加函数）</h5><p>（在客户类中建立一个函数，并以第一参数形式传入一个服务类实例）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Date newStart = <span class=\"keyword\">new</span> Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate() + <span class=\"number\">1</span>);</div><div class=\"line\">==&gt;</div><div class=\"line\">Date newStart = nextDay(previousEnd);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Date <span class=\"title\">nextDay</span><span class=\"params\">(Date arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Local-Extension（引入本地扩展）\"><a href=\"#Introduce-Local-Extension（引入本地扩展）\" class=\"headerlink\" title=\"Introduce Local Extension（引入本地扩展）\"></a>Introduce Local Extension（引入本地扩展）</h5><p>建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。</p>\n<h3 id=\"重新组织数据\"><a href=\"#重新组织数据\" class=\"headerlink\" title=\"重新组织数据\"></a>重新组织数据</h3><h5 id=\"Self-Encapsulate-Field（自封装字段）\"><a href=\"#Self-Encapsulate-Field（自封装字段）\" class=\"headerlink\" title=\"Self Encapsulate Field（自封装字段）\"></a>Self Encapsulate Field（自封装字段）</h5><p>（为这个字段建立取值/设值函数，并且只以这些函数来访问字段）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _low, _hight;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">includes</span> <span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arg &gt;= _low &amp;&amp; arg &lt;= _high;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _low, _hight;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">includes</span> <span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arg &gt;= getLow() &amp;&amp; arg &lt;= getHigh();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLow</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _low;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHight</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _hight;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Data-Value-with-Object（以对象取代数据值）\"><a href=\"#Replace-Data-Value-with-Object（以对象取代数据值）\" class=\"headerlink\" title=\"Replace Data Value with Object（以对象取代数据值）\"></a>Replace Data Value with Object（以对象取代数据值）</h5><p>你有一个数据，需要与其他数据和行为一起使用才有意义。</p>\n<h5 id=\"Change-Value-to-Reference（将值对象改为引用对象）\"><a href=\"#Change-Value-to-Reference（将值对象改为引用对象）\" class=\"headerlink\" title=\"Change Value to Reference（将值对象改为引用对象）\"></a>Change Value to Reference（将值对象改为引用对象）</h5><p>你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。<strong>将这个值对象变世引用对象</strong></p>\n<h5 id=\"Change-Reference-to-Value-（将引用对象改为值对象）\"><a href=\"#Change-Reference-to-Value-（将引用对象改为值对象）\" class=\"headerlink\" title=\"Change Reference to Value （将引用对象改为值对象）\"></a>Change Reference to Value （将引用对象改为值对象）</h5><p>你有一个引用对象，很小且不可变，而且不易管理。<strong>将它变成一个值对象</strong>。</p>\n<h5 id=\"Replace-Array-with-Object（以对象取代数组）\"><a href=\"#Replace-Array-with-Object（以对象取代数组）\" class=\"headerlink\" title=\"Replace Array with Object（以对象取代数组）\"></a>Replace Array with Object（以对象取代数组）</h5><p>你有一个数组，其中的元素各自代表不同的东西。</p>\n<p>(以对象替换数组，对于数组中的每个元素，以一个字段来表示)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] row = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];</div><div class=\"line\">row[<span class=\"number\">0</span>] = <span class=\"string\">\"Liverpool\"</span>;</div><div class=\"line\">row[<span class=\"number\">1</span>] = <span class=\"string\">\"15\"</span>;</div><div class=\"line\">==&gt;</div><div class=\"line\">Performance row = <span class=\"keyword\">new</span> Performance();</div><div class=\"line\">row.setName(<span class=\"string\">\"Liverpool\"</span>);</div><div class=\"line\">row.setWins(<span class=\"string\">\"15\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"Duplicate-Observed-Data（复制”被监视数据”）\"><a href=\"#Duplicate-Observed-Data（复制”被监视数据”）\" class=\"headerlink\" title=\"Duplicate Observed Data（复制”被监视数据”）\"></a>Duplicate Observed Data（复制”被监视数据”）</h5><p>你有一些领域数据置身于GUI控件中，而领域函数需要访问这些数据。（将该数据复制到一个领域对象中。建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据）</p>\n<h5 id=\"Change-Unidirectional-Association-to-Bidirectional（将单向关联改为双向关联）\"><a href=\"#Change-Unidirectional-Association-to-Bidirectional（将单向关联改为双向关联）\" class=\"headerlink\" title=\"Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）\"></a>Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）</h5><p>两个类都需要使用对方特性，但其间只有一条单向连接。（添加一个返回指针，并使修改函数能够同时更新两条连接）</p>\n<p><strong>Change Bidirectional Association to Unidirectional （将双向关联改为单向关联）</strong></p>\n<p>两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。（去除不必要的关联）</p>\n<p><strong>Replace Magic Number with Symbolic Constant（以字面常量取代魔法数）</strong></p>\n<p>（创建一个常量，根据其意义为它命名，并将上述的字面数值替换为这个常量。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">potentialEnergy</span><span class=\"params\">(<span class=\"keyword\">double</span> mass, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mass * <span class=\"number\">9.81</span> * height;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">potentialEnergy</span><span class=\"params\">(<span class=\"keyword\">double</span> mass, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mass * GRAVITATIONAL_CONSTANT * height;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> GRAVITATIONAL_CONSTANT = <span class=\"number\">9.81</span>;</div></pre></td></tr></table></figure>\n<p><strong>Encapsulate Field（封装字段 ）</strong></p>\n<p>你的类中存在一个public字段。将它声明为private，并提供相应的访问函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String _name;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">private</span> String _name;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _name;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String arg)</span> </span>&#123;_name = arg;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Encapsulate-Collection（封装集合）\"><a href=\"#Encapsulate-Collection（封装集合）\" class=\"headerlink\" title=\"Encapsulate Collection（封装集合）\"></a>Encapsulate Collection（封装集合）</h5><p>有个函数返回一个集合。（让这个函数返回该集合的一个只读副本，并在这个类中提供添加、移除集合元素的函数。）</p>\n<h5 id=\"Replace-Recore-with-Data-Class（以数据类取代记录）\"><a href=\"#Replace-Recore-with-Data-Class（以数据类取代记录）\" class=\"headerlink\" title=\"Replace Recore with Data Class（以数据类取代记录）\"></a>Replace Recore with Data Class（以数据类取代记录）</h5><p>你需要面对传统编程环境中的记录结构。为该记录创建一个”哑”数据对象。</p>\n<h5 id=\"Replace-Type-Code-with-Class（以类取代类型码）\"><a href=\"#Replace-Type-Code-with-Class（以类取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with Class（以类取代类型码）\"></a>Replace Type Code with Class（以类取代类型码）</h5><p>类之中有一个数值类型码，但它并不影响类的行为。（以一个新的类替换该数值类型码。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> O, A, B, AB;</div><div class=\"line\">  <span class=\"keyword\">int</span> bloodGroup;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloodGroup</span> </span>&#123;</div><div class=\"line\">  BloodGroup O, A, B, AB</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Type-Code-with-Subclasses（以子类取代类型码）\"><a href=\"#Replace-Type-Code-with-Subclasses（以子类取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with Subclasses（以子类取代类型码）\"></a>Replace Type Code with Subclasses（以子类取代类型码）</h5><p>你有一个不可变的类型码，它会影响类的行为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> ENGINEER;</div><div class=\"line\">  <span class=\"keyword\">int</span> SALESMAN;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engineer</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Salesman</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Type-Code-with-State-Strategy（以State-Strategy取代类型码）\"><a href=\"#Replace-Type-Code-with-State-Strategy（以State-Strategy取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with State/Strategy（以State/Strategy取代类型码）\"></a>Replace Type Code with State/Strategy（以State/Strategy取代类型码）</h5><p>你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。（以状态对象取代类型码）</p>\n<h5 id=\"Replace-Subclass-with-Fields（以字段取代子类）\"><a href=\"#Replace-Subclass-with-Fields（以字段取代子类）\" class=\"headerlink\" title=\"Replace Subclass with Fields（以字段取代子类）\"></a>Replace Subclass with Fields（以字段取代子类）</h5><p>你的各个子类的唯一差别只在”返回常量数据”的函数身上。修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类</p>\n<h3 id=\"简化条件表达式\"><a href=\"#简化条件表达式\" class=\"headerlink\" title=\"简化条件表达式\"></a>简化条件表达式</h3><h5 id=\"Decompose-Conditional（分解条件表达式）\"><a href=\"#Decompose-Conditional（分解条件表达式）\" class=\"headerlink\" title=\"Decompose Conditional（分解条件表达式）\"></a>Decompose Conditional（分解条件表达式）</h5><p>（从if、then、else三个段落中分别提炼出独立函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END)) &#123;</div><div class=\"line\">  charge = quantity * _winterRate + _winterServiceCharge;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  charge = quantity * _summberRate;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (notSummer(date)) &#123;</div><div class=\"line\">  charge = winterCharge(quantity);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  charge = summerCharge(quantity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Consolidate-Conditional-Expression（合并条件表达式）\"><a href=\"#Consolidate-Conditional-Expression（合并条件表达式）\" class=\"headerlink\" title=\"Consolidate Conditional Expression（合并条件表达式）\"></a>Consolidate Conditional Expression（合并条件表达式）</h5><p>你有一系列条件测试，都得到相同结果。（将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_seniority &lt; <span class=\"number\">2</span>) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_monthsDisabled &gt; <span class=\"number\">12</span>) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isPartTime) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isNotEligibleForDisability()) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Consolidate-Duplicate-Conditional-Fragments（合并重复的条件片段）\"><a href=\"#Consolidate-Duplicate-Conditional-Fragments（合并重复的条件片段）\" class=\"headerlink\" title=\"Consolidate Duplicate Conditional Fragments（合并重复的条件片段）\"></a>Consolidate Duplicate Conditional Fragments（合并重复的条件片段）</h5><p>将下面这段重复代码搬移到条件表达式之外。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.95</span>;</div><div class=\"line\">  send();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.98</span>;</div><div class=\"line\">  send();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">send();</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Control-Flag（移除控制标记）\"><a href=\"#Remove-Control-Flag（移除控制标记）\" class=\"headerlink\" title=\"Remove Control Flag（移除控制标记）\"></a>Remove Control Flag（移除控制标记）</h5><p>以break语句或return语句取代控制标记</p>\n<h5 id=\"Replace-Nested-Conditional-with-Guard-Clauses（以卫语句取代嵌套条件表达式）\"><a href=\"#Replace-Nested-Conditional-with-Guard-Clauses（以卫语句取代嵌套条件表达式）\" class=\"headerlink\" title=\"Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）\"></a>Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）</h5><p>函数中的条件逻辑使人难以看清正常的执行路径。（使用卫语句表现所有特殊情况）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">double</span> result;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isDead) &#123;</div><div class=\"line\">    result = deadAmount();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_isSeparated) &#123;</div><div class=\"line\">      result = separatedAmount();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (_isRetired) &#123;</div><div class=\"line\">        result = retiredAmount();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result = normalPayAmount();</div><div class=\"line\">      &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isDead) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> deadAmount();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isSeparated) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> separatedAmount();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isRetired) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> retiredAmount();</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"keyword\">return</span> normalPayAmount();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Conditional-with-Polymorphism（以多态取代条件表达式）\"><a href=\"#Replace-Conditional-with-Polymorphism（以多态取代条件表达式）\" class=\"headerlink\" title=\"Replace Conditional with Polymorphism（以多态取代条件表达式）\"></a>Replace Conditional with Polymorphism（以多态取代条件表达式）</h5><p>你手上有个条件表达式，它根据对象类型的不同而选择不同的行为。（将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span>(_type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> EUROPEAN:</div><div class=\"line\">      <span class=\"keyword\">return</span> getBaseSpeed;</div><div class=\"line\">    <span class=\"keyword\">case</span> AFRICAN:</div><div class=\"line\">      <span class=\"keyword\">return</span> getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;</div><div class=\"line\">    <span class=\"keyword\">case</span> NORWEGINA_BLUE:</div><div class=\"line\">      <span class=\"keyword\">return</span> (_isNailed) ? <span class=\"number\">0</span> : getBaseSpeed(_voltage);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Should be unreachable\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> </span>&#123; <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span>&#125;</span></div><div class=\"line\">class European extends Bird &#123; getSpeed()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">African</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> </span>&#123; getSpeed()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NorwegianBlue</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> </span>&#123; getSpeed()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Null-Object（引用Null对象）\"><a href=\"#Introduce-Null-Object（引用Null对象）\" class=\"headerlink\" title=\"Introduce Null Object（引用Null对象）\"></a>Introduce Null Object（引用Null对象）</h5><p>你需要再三检查某个对象是否为null。（将null值替换为null对象）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (customer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  plan = BillingPlan.basic();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  plan = customer.getPlan();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123; getPlan()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullCustomer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Customer</span> </span>&#123;getPlan()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Assertion（引入断言）\"><a href=\"#Introduce-Assertion（引入断言）\" class=\"headerlink\" title=\"Introduce Assertion（引入断言）\"></a>Introduce Assertion（引入断言）</h5><p>某一段代码需要对程序状态做出某种假设。以断言明确表现这种假设。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  Assert.isTrue (_expenseLimit != NULL_EXPENSE || _primaryProject != <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"简化函数调用\"><a href=\"#简化函数调用\" class=\"headerlink\" title=\"简化函数调用\"></a>简化函数调用</h3><h5 id=\"Rename-Method（函数改名）\"><a href=\"#Rename-Method（函数改名）\" class=\"headerlink\" title=\"Rename Method（函数改名）\"></a>Rename Method（函数改名）</h5><p>函数的名称未能指示函数的用途。修改函数名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getinvcdtlmt()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getInvoiceableCreditLimit()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Add-Parameter（添加函数）\"><a href=\"#Add-Parameter（添加函数）\" class=\"headerlink\" title=\"Add Parameter（添加函数）\"></a>Add Parameter（添加函数）</h5><p>某个函数需要从调用端得到更多信息。（为些函数添加一个对象参数，让该对象带进函数所需的信息）</p>\n<h5 id=\"Remove-Parameter（移除参数）\"><a href=\"#Remove-Parameter（移除参数）\" class=\"headerlink\" title=\"Remove Parameter（移除参数）\"></a>Remove Parameter（移除参数）</h5><p>函数本体不再需要某个参数。将该参数去除。</p>\n<h5 id=\"Separate-Query-from-Modifier（将查询函数和修改函数分离）\"><a href=\"#Separate-Query-from-Modifier（将查询函数和修改函数分离）\" class=\"headerlink\" title=\"Separate Query from Modifier（将查询函数和修改函数分离）\"></a>Separate Query from Modifier（将查询函数和修改函数分离）</h5><p>某个函数既返回对象状态值，又修改对象状态。（建立两个不同的函数，其中一个负责查询，别一个负责修改。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getTotalOutstandingAndSetReadyForSummaries()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  getTotalOutstanding()</div><div class=\"line\">  setReadyForSummaries()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Parameterize-Method（令函数携带参数）\"><a href=\"#Parameterize-Method（令函数携带参数）\" class=\"headerlink\" title=\"Parameterize Method（令函数携带参数）\"></a>Parameterize Method（令函数携带参数）</h5><p>若干函数做了类似的工作，但在函数本体中却包含了不同的值。（建立单一函数，以参数表达那些不同的值。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123; </div><div class=\"line\">  fivePercentRaise();</div><div class=\"line\">  tenPercentRaise();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  raise(percentage);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Parameter-with-Explicit-Methods（以明确函数取代参数）\"><a href=\"#Replace-Parameter-with-Explicit-Methods（以明确函数取代参数）\" class=\"headerlink\" title=\"Replace Parameter with Explicit Methods（以明确函数取代参数）\"></a>Replace Parameter with Explicit Methods（以明确函数取代参数）</h5><p>你有一个函数，其中完全取决于参数值而采取不同行为。（针对该参数的每一个可能值，建立一个独立函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"height\"</span>)) &#123;</div><div class=\"line\">    _height = value;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"width\"</span>)) &#123;</div><div class=\"line\">    _width = value;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Assert.shouldNeverReachHere();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  _height = arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  _width = arg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Preserve-Whole-Object（保持对象完整）\"><a href=\"#Preserve-Whole-Object（保持对象完整）\" class=\"headerlink\" title=\"Preserve Whole Object（保持对象完整）\"></a>Preserve Whole Object（保持对象完整）</h5><p>你从某个对象中取出若干值，将它们作为某一次函数调用的参数。改为传递整个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> low = daysTempRange().getLow();</div><div class=\"line\"><span class=\"keyword\">int</span> hight = daysTempRange().getHeight;</div><div class=\"line\">withinPlan = plan.withinRange(low, hight);</div><div class=\"line\">==&gt;</div><div class=\"line\">withinPlan = plan.withinRange(daysTempRange());</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Parameter-with-Methods（以函数取代参数）\"><a href=\"#Replace-Parameter-with-Methods（以函数取代参数）\" class=\"headerlink\" title=\"Replace Parameter with Methods（以函数取代参数）\"></a>Replace Parameter with Methods（以函数取代参数）</h5><p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。（让参数接受者去除该项参数，并直接调用前一个函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\">discountLevel = getDiscountLevel();</div><div class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice(basePrice, discountLevel);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice(basePrice);</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Parameter-Object（引入参数对象）\"><a href=\"#Introduce-Parameter-Object（引入参数对象）\" class=\"headerlink\" title=\"Introduce Parameter Object（引入参数对象）\"></a>Introduce Parameter Object（引入参数对象）</h5><p>某些参数总是很自然地同时出现。以一个对象取代这些参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  amountInvoicedIn(start:Date, end: Date);</div><div class=\"line\">  amountReceived(start:Date, end: Date);</div><div class=\"line\">  amountOverdueln(start:Date, end: Date);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  amountInvoicedIn(DateRange);</div><div class=\"line\">  amountReceived(DateRange);</div><div class=\"line\">  amountOverdueln(DateRange);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Setting-Method（移除设值函数）\"><a href=\"#Remove-Setting-Method（移除设值函数）\" class=\"headerlink\" title=\"Remove Setting Method（移除设值函数）\"></a>Remove Setting Method（移除设值函数）</h5><p>类中的某个字段应该在对象创建时候被设值，然后就不再改变。（去掉该字段的所有设值函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  Immutable;</div><div class=\"line\">  setImmutableValue()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Hide-Method（隐藏函数）\"><a href=\"#Hide-Method（隐藏函数）\" class=\"headerlink\" title=\"Hide Method（隐藏函数）\"></a>Hide Method（隐藏函数）</h5><p>有一个函数，从来没有被其他任何类用到。（将这个函数修改为private）</p>\n<h5 id=\"Replace-Constructor-with-Factory-Method（以工厂函数取代构造函数）\"><a href=\"#Replace-Constructor-with-Factory-Method（以工厂函数取代构造函数）\" class=\"headerlink\" title=\"Replace Constructor with Factory Method（以工厂函数取代构造函数）\"></a>Replace Constructor with Factory Method（以工厂函数取代构造函数）</h5><p>你希望在创建对象时不仅仅是做简单的构建动作。（将构造函数替换为工厂函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Employee(<span class=\"keyword\">int</span> type) &#123;</div><div class=\"line\">  _type = type</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Employee <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Employee(type);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Encapsulate-Downcast（封装向下转型）\"><a href=\"#Encapsulate-Downcast（封装向下转型）\" class=\"headerlink\" title=\"Encapsulate Downcast（封装向下转型）\"></a>Encapsulate Downcast（封装向下转型）</h5><p>某个函数返回的对象，需要由函数调用者执行向下转型(downcast)。（将向下转型动作移到函数中）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> readings.lastElement();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\">Reading <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (Reading) readings.lastElement();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Error-Code-with-Exception（以异常取代错误码）\"><a href=\"#Replace-Error-Code-with-Exception（以异常取代错误码）\" class=\"headerlink\" title=\"Replace Error Code with Exception（以异常取代错误码）\"></a>Replace Error Code with Exception（以异常取代错误码）</h5><p>某个函数返回一个特定的代码，用以表示某种错误情况。（改用异常）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">int</span> amount)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (amount &gt; _balance) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    _balance -= amount;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">int</span> amount)</span> <span class=\"keyword\">throws</span> BalanceException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (amount &gt; _balance) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BalanceException();</div><div class=\"line\">  &#125;</div><div class=\"line\">  _balance -= amount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Exception-with-Test（以测试取代异常）\"><a href=\"#Replace-Exception-with-Test（以测试取代异常）\" class=\"headerlink\" title=\"Replace Exception with Test（以测试取代异常）\"></a>Replace Exception with Test（以测试取代异常）</h5><p>面对一个调用者可以预先检查的条件，你抛出了一个异常。(修改调用者，使它在调用函数之前先做检查)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _values[periodNumber];</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (periodNumber &gt;= _values.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _values[periodNumber];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"处理概括关系\"><a href=\"#处理概括关系\" class=\"headerlink\" title=\"处理概括关系\"></a>处理概括关系</h3><h5 id=\"Pull-Up-Field（字段上移）\"><a href=\"#Pull-Up-Field（字段上移）\" class=\"headerlink\" title=\"Pull Up Field（字段上移）\"></a>Pull Up Field（字段上移）</h5><p>两个子类拥有相同的字段。（将该字段移至超类）</p>\n<h5 id=\"Pull-Up-Method（函数上移）\"><a href=\"#Pull-Up-Method（函数上移）\" class=\"headerlink\" title=\"Pull Up Method（函数上移）\"></a>Pull Up Method（函数上移）</h5><p>有些函数，在各个子类中产生完全相同的结果。（将该函数移至超类）</p>\n<h5 id=\"Pull-Up-Constructor-Body（构造函数本体上移）\"><a href=\"#Pull-Up-Constructor-Body（构造函数本体上移）\" class=\"headerlink\" title=\"Pull Up Constructor Body（构造函数本体上移）\"></a>Pull Up Constructor Body（构造函数本体上移）</h5><p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。（在超类中新建一个构造函数，并在子类的构造函数中调用它）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span><span class=\"params\">(String name,String id,<span class=\"keyword\">int</span> grade)</span> </span>&#123;</div><div class=\"line\">    _name = name;</div><div class=\"line\">    _id = id;</div><div class=\"line\">    _grade = grade;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span><span class=\"params\">(String name, String id, <span class=\"keyword\">int</span> grade)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(name, id);</div><div class=\"line\">  _grade = grade;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Push-Down-Method（函数下移）\"><a href=\"#Push-Down-Method（函数下移）\" class=\"headerlink\" title=\"Push Down Method（函数下移）\"></a>Push Down Method（函数下移）</h5><p>超类中的某个函数只与部分（而非全部）子类有关。（将这个函数移到相关子类去）</p>\n<h5 id=\"Push-Down-Field（字段下移）\"><a href=\"#Push-Down-Field（字段下移）\" class=\"headerlink\" title=\"Push Down Field（字段下移）\"></a>Push Down Field（字段下移）</h5><p>超类中的某个字段只被部分（而非全部）子类用到。（将这个字段移到需要它的那些子类去）</p>\n<h5 id=\"Extract-Subclass（提炼子类）\"><a href=\"#Extract-Subclass（提炼子类）\" class=\"headerlink\" title=\"Extract Subclass（提炼子类）\"></a>Extract Subclass（提炼子类）</h5><p>类中的某些特性只被某些（而非全部）实例用到。（新建一个子类，将上面所说的那一部分特性移到子类中）</p>\n<h5 id=\"Extract-SuperClass（提炼超类）\"><a href=\"#Extract-SuperClass（提炼超类）\" class=\"headerlink\" title=\"Extract SuperClass（提炼超类）\"></a>Extract SuperClass（提炼超类）</h5><p>两个类有相似特性。（为这两个类建立一个超类，将相同特性移至超类）</p>\n<h5 id=\"Extract-Interface（提炼接口）\"><a href=\"#Extract-Interface（提炼接口）\" class=\"headerlink\" title=\"Extract Interface（提炼接口）\"></a>Extract Interface（提炼接口）</h5><p>若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。（将相同的子集提炼到一个独立接口中）</p>\n<h5 id=\"Collapse-Hierarchy（折叠继承体系）\"><a href=\"#Collapse-Hierarchy（折叠继承体系）\" class=\"headerlink\" title=\"Collapse Hierarchy（折叠继承体系）\"></a>Collapse Hierarchy（折叠继承体系）</h5><p>超类和子类之间无太大区别。（将它们合为一体）</p>\n<h5 id=\"Form-Template-Method（塑造模板函数）\"><a href=\"#Form-Template-Method（塑造模板函数）\" class=\"headerlink\" title=\"Form Template Method（塑造模板函数）\"></a>Form Template Method（塑造模板函数）</h5><p>你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。（将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类）</p>\n<h5 id=\"Replace-Inheritance-with-Delegation（以委托取代继承）\"><a href=\"#Replace-Inheritance-with-Delegation（以委托取代继承）\" class=\"headerlink\" title=\"Replace Inheritance with Delegation（以委托取代继承）\"></a>Replace Inheritance with Delegation（以委托取代继承）</h5><p>某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。（在子类中新建一个字段用以保存超类；调整子类函数，令它改而委托超类；然后去掉两者之间的继承关系）</p>\n<h5 id=\"Replace-Delegation-with-Inheritance（以继承取代委托）\"><a href=\"#Replace-Delegation-with-Inheritance（以继承取代委托）\" class=\"headerlink\" title=\"Replace Delegation with Inheritance（以继承取代委托）\"></a>Replace Delegation with Inheritance（以继承取代委托）</h5><p>你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。（让委托类继承受托类）</p>\n<h3 id=\"大型重构\"><a href=\"#大型重构\" class=\"headerlink\" title=\"大型重构\"></a>大型重构</h3><h5 id=\"Tease-Apart-Inheritance（梳理并分解继承体系）\"><a href=\"#Tease-Apart-Inheritance（梳理并分解继承体系）\" class=\"headerlink\" title=\"Tease Apart Inheritance（梳理并分解继承体系）\"></a>Tease Apart Inheritance（梳理并分解继承体系）</h5><p>某个继承体系同时承担两项责任。（建立两个继承体系，并通过委托关系让其中一个可以调用另一个）</p>\n<h5 id=\"Convert-Procedural-Design-to-Objects（将过程化设计转化为对象设计）\"><a href=\"#Convert-Procedural-Design-to-Objects（将过程化设计转化为对象设计）\" class=\"headerlink\" title=\"Convert Procedural Design to Objects（将过程化设计转化为对象设计）\"></a>Convert Procedural Design to Objects（将过程化设计转化为对象设计）</h5><p>你手上有一些传统过程化风格的代码。（将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。）</p>\n<h5 id=\"Separate-Domain-from-Presentation（将领域和表述、显示分离）\"><a href=\"#Separate-Domain-from-Presentation（将领域和表述、显示分离）\" class=\"headerlink\" title=\"Separate Domain from Presentation（将领域和表述、显示分离）\"></a>Separate Domain from Presentation（将领域和表述、显示分离）</h5><p>某些GUI类之中包含了领域逻辑。（将领域逻辑分离出来，为它们建立独立的领域类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderWindow</span> </span>&#123;&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderWindow</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Extract-Hierarchy（提炼继承体系）\"><a href=\"#Extract-Hierarchy（提炼继承体系）\" class=\"headerlink\" title=\"Extract Hierarchy（提炼继承体系）\"></a>Extract Hierarchy（提炼继承体系）</h5><p>你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的。（建立继承体系，以一个子类表示一特殊情况）</p>\n","excerpt":"<h3 id=\"重新组织函数\"><a href=\"#重新组织函数\" class=\"headerlink\" title=\"重新组织函数\"></a>重新组织函数</h3><h5 id=\"Extract-Method-提炼函数\"><a href=\"#Extract-Method-提炼函数\" class=\"headerlink\" title=\"Extract Method (提炼函数)\"></a>Extract Method (提炼函数)</h5><p>(将这段代码放进一个独立函数中，并让函数名称解释该函数的用途)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  printBanner();</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// print details</span></div><div class=\"line\">  System.out.println(<span class=\"string\">\"name: \"</span> + _name);</div><div class=\"line\">  System.out.println(<span class=\"string\">\"amout: \"</span> + amount);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printOwing</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  printBanner();</div><div class=\"line\">  printDetails(amount);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">printDetails</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> </span>&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"name: \"</span> + _name);</div><div class=\"line\">  System.out.println(<span class=\"string\">\"amout: \"</span> + amount);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<h5 id=\"Inline-Method-内联函数\"><a href=\"#Inline-Method-内联函数\" class=\"headerlink\" title=\"Inline Method (内联函数)\"></a>Inline Method (内联函数)</h5><p>（在函数调用点插入函数体，然后移除该函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (moreThanFiveLateDeliveries()) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">moreThanFiveLateDeliveries</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> _numberOfLateDeliveries &gt; <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (_numberOfLateDeliveries &gt; <span class=\"number\">5</span>) ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Inline-Temp-内联临时变量\"><a href=\"#Inline-Temp-内联临时变量\" class=\"headerlink\" title=\"Inline Temp (内联临时变量)\"></a>Inline Temp (内联临时变量)</h5><p>（将所有对该变量的引用动作，替换为对它赋值的那个表达式自身。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> basePrice = anOrder.basePrice();</div><div class=\"line\"><span class=\"keyword\">return</span> (basePrice &gt; <span class=\"number\">1000</span>);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">return</span> (anOrder.basePrice() &gt; <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Temp-with-Query（以查询取代临时变量）\"><a href=\"#Replace-Temp-with-Query（以查询取代临时变量）\" class=\"headerlink\" title=\"Replace Temp with Query（以查询取代临时变量）\"></a>Replace Temp with Query（以查询取代临时变量）</h5><p>(将这个表达式提炼到一个独立函数中，将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可被其他函数使用。)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\"><span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">basePrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> _quantity * _itemPrice;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Explaining-Variable（引用解释性变量）\"><a href=\"#Introduce-Explaining-Variable（引用解释性变量）\" class=\"headerlink\" title=\"Introduce Explaining Variable（引用解释性变量）\"></a>Introduce Explaining Variable（引用解释性变量）</h5><p>(将该复杂表达或其中一部分的结果放进一个临时变量，以此变量名称来解释表达式的用途。)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</div><div class=\"line\">    (browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</div><div class=\"line\">    wasInitialized() &amp;&amp; resize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">      </div><div class=\"line\">   <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isMacOs = platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isIEBrowser = browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> wasResized = resize &gt; <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Split-Temporary-Variable（分解临时变量）\"><a href=\"#Split-Temporary-Variable（分解临时变量）\" class=\"headerlink\" title=\"Split Temporary Variable（分解临时变量）\"></a>Split Temporary Variable（分解临时变量）</h5><p>（针对每次赋值，创造一个独立、对应的临时变量）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> temp = <span class=\"number\">2</span> * (_height + _width);</div><div class=\"line\">System.out.println(temp);</div><div class=\"line\">temp = _height * _width;</div><div class=\"line\">System.out.println(temp);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> perimeter = <span class=\"number\">2</span> * (_height + _width);</div><div class=\"line\">System.out.println(perimeter);</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> area = _height * _width;</div><div class=\"line\">System.out.println(area);</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Assignments-to-Parameters\"><a href=\"#Remove-Assignments-to-Parameters\" class=\"headerlink\" title=\"Remove Assignments to Parameters\"></a>Remove Assignments to Parameters</h5><p>(以一个临时变量取代该参数的位置)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span><span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quantity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">    inputVal -= <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span><span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quantity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> result = inputVal;</div><div class=\"line\">  <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">    result -= <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Method-with-Method-Object-以函数对象取代函数\"><a href=\"#Replace-Method-with-Method-Object-以函数对象取代函数\" class=\"headerlink\" title=\"Replace Method with Method Object(以函数对象取代函数)\"></a>Replace Method with Method Object(以函数对象取代函数)</h5><p>(将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">price</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> primaryBasePrice</div><div class=\"line\">    <span class=\"keyword\">double</span> secondaryBasePrice</div><div class=\"line\">    ....</div><div class=\"line\">    <span class=\"keyword\">return</span> primaryBasePrice + secondaryBasePrice + ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">price</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PriceCalculator(<span class=\"keyword\">this</span>).compute();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceCalculator</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">double</span> primaryBasePrice</div><div class=\"line\">  <span class=\"keyword\">double</span> secondaryBasePrice</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> primaryBasePrice + secondaryBasePrice + ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Substitute-Algorithm（替换算法）\"><a href=\"#Substitute-Algorithm（替换算法）\" class=\"headerlink\" title=\"Substitute Algorithm（替换算法）\"></a>Substitute Algorithm（替换算法）</h5><p>（将函数本体替换为另一个算法）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">String <span class=\"title\">foundPerson</span><span class=\"params\">(String[] people)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; people.length;i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (people[i].equals(<span class=\"string\">\"Don\"</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"Don\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\">String <span class=\"title\">foundPerson</span><span class=\"params\">(String[] people)</span> </span>&#123;</div><div class=\"line\">  List candidates = Arrays.asList(<span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"Don\"</span>,<span class=\"string\">\"John\"</span>,<span class=\"string\">\"Kent\"</span>&#125;);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; people.length;i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (candidates.contains(people[i])) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> people[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"在对象之间搬移特性\"><a href=\"#在对象之间搬移特性\" class=\"headerlink\" title=\"在对象之间搬移特性\"></a>在对象之间搬移特性</h3><h5 id=\"Move-Method-（搬移函数）\"><a href=\"#Move-Method-（搬移函数）\" class=\"headerlink\" title=\"Move Method （搬移函数）\"></a>Move Method （搬移函数）</h5><p>“搬移函数”是重构理论的支柱。如是一个类有太多行为，或如果一个类与另一个类有太多合作而形成高度耦合，我就会搬移函数。通过这种手段，可以使系统中的类更简单，这些类最终也将更干净利落地实现系统交付的任务。</p>\n<h5 id=\"Move-File-搬移字段\"><a href=\"#Move-File-搬移字段\" class=\"headerlink\" title=\"Move File (搬移字段)\"></a>Move File (搬移字段)</h5><p>在类之间移动状态和行为，是重构过程中必不可少的措施。随着系统的发展，你会发现自己需要新的类，并需要将现有的工作责任拖到新的类中。在这个星期看似合理而正确的设计决策，到了下个星期可能不再正确。这没问题。如果你从来没遇到这种情况，那才有问题。</p>\n<h5 id=\"Extract-Class（提炼类）\"><a href=\"#Extract-Class（提炼类）\" class=\"headerlink\" title=\"Extract Class（提炼类）\"></a>Extract Class（提炼类）</h5><p>（建立一个新类，将相关的字段和函数从旧类搬移到新类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  String name, officeAreaCode, officeNumber;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  String name;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelephoneNumber</span> </span>&#123;</div><div class=\"line\">  String areaCode, number;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTelephoneNumber</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Inline-Class（将类内联化）\"><a href=\"#Inline-Class（将类内联化）\" class=\"headerlink\" title=\"Inline Class（将类内联化）\"></a>Inline Class（将类内联化）</h5><p>将这个类的所有特性搬移到别一个类中，然后移除原类。</p>\n<h5 id=\"Hide-Delegate（隐藏”委托关系”）\"><a href=\"#Hide-Delegate（隐藏”委托关系”）\" class=\"headerlink\" title=\"Hide Delegate（隐藏”委托关系”）\"></a>Hide Delegate（隐藏”委托关系”）</h5><p>在服务类上建立客户所需的所有函数，用以隐藏委托关系。</p>\n<h5 id=\"Remove-Middle-Man（移除中间人）\"><a href=\"#Remove-Middle-Man（移除中间人）\" class=\"headerlink\" title=\"Remove Middle Man（移除中间人）\"></a>Remove Middle Man（移除中间人）</h5><p>让客户直接调用受托类</p>\n<h5 id=\"Introduce-Foreign-Method（引入外加函数）\"><a href=\"#Introduce-Foreign-Method（引入外加函数）\" class=\"headerlink\" title=\"Introduce Foreign Method（引入外加函数）\"></a>Introduce Foreign Method（引入外加函数）</h5><p>（在客户类中建立一个函数，并以第一参数形式传入一个服务类实例）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Date newStart = <span class=\"keyword\">new</span> Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate() + <span class=\"number\">1</span>);</div><div class=\"line\">==&gt;</div><div class=\"line\">Date newStart = nextDay(previousEnd);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Date <span class=\"title\">nextDay</span><span class=\"params\">(Date arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date(previousEnd.getYear(), previousEnd.getMonth(), previousEnd.getDate());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Local-Extension（引入本地扩展）\"><a href=\"#Introduce-Local-Extension（引入本地扩展）\" class=\"headerlink\" title=\"Introduce Local Extension（引入本地扩展）\"></a>Introduce Local Extension（引入本地扩展）</h5><p>建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。</p>\n<h3 id=\"重新组织数据\"><a href=\"#重新组织数据\" class=\"headerlink\" title=\"重新组织数据\"></a>重新组织数据</h3><h5 id=\"Self-Encapsulate-Field（自封装字段）\"><a href=\"#Self-Encapsulate-Field（自封装字段）\" class=\"headerlink\" title=\"Self Encapsulate Field（自封装字段）\"></a>Self Encapsulate Field（自封装字段）</h5><p>（为这个字段建立取值/设值函数，并且只以这些函数来访问字段）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _low, _hight;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">includes</span> <span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arg &gt;= _low &amp;&amp; arg &lt;= _high;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _low, _hight;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">includes</span> <span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arg &gt;= getLow() &amp;&amp; arg &lt;= getHigh();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLow</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _low;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHight</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _hight;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Data-Value-with-Object（以对象取代数据值）\"><a href=\"#Replace-Data-Value-with-Object（以对象取代数据值）\" class=\"headerlink\" title=\"Replace Data Value with Object（以对象取代数据值）\"></a>Replace Data Value with Object（以对象取代数据值）</h5><p>你有一个数据，需要与其他数据和行为一起使用才有意义。</p>\n<h5 id=\"Change-Value-to-Reference（将值对象改为引用对象）\"><a href=\"#Change-Value-to-Reference（将值对象改为引用对象）\" class=\"headerlink\" title=\"Change Value to Reference（将值对象改为引用对象）\"></a>Change Value to Reference（将值对象改为引用对象）</h5><p>你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。<strong>将这个值对象变世引用对象</strong></p>\n<h5 id=\"Change-Reference-to-Value-（将引用对象改为值对象）\"><a href=\"#Change-Reference-to-Value-（将引用对象改为值对象）\" class=\"headerlink\" title=\"Change Reference to Value （将引用对象改为值对象）\"></a>Change Reference to Value （将引用对象改为值对象）</h5><p>你有一个引用对象，很小且不可变，而且不易管理。<strong>将它变成一个值对象</strong>。</p>\n<h5 id=\"Replace-Array-with-Object（以对象取代数组）\"><a href=\"#Replace-Array-with-Object（以对象取代数组）\" class=\"headerlink\" title=\"Replace Array with Object（以对象取代数组）\"></a>Replace Array with Object（以对象取代数组）</h5><p>你有一个数组，其中的元素各自代表不同的东西。</p>\n<p>(以对象替换数组，对于数组中的每个元素，以一个字段来表示)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] row = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];</div><div class=\"line\">row[<span class=\"number\">0</span>] = <span class=\"string\">\"Liverpool\"</span>;</div><div class=\"line\">row[<span class=\"number\">1</span>] = <span class=\"string\">\"15\"</span>;</div><div class=\"line\">==&gt;</div><div class=\"line\">Performance row = <span class=\"keyword\">new</span> Performance();</div><div class=\"line\">row.setName(<span class=\"string\">\"Liverpool\"</span>);</div><div class=\"line\">row.setWins(<span class=\"string\">\"15\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"Duplicate-Observed-Data（复制”被监视数据”）\"><a href=\"#Duplicate-Observed-Data（复制”被监视数据”）\" class=\"headerlink\" title=\"Duplicate Observed Data（复制”被监视数据”）\"></a>Duplicate Observed Data（复制”被监视数据”）</h5><p>你有一些领域数据置身于GUI控件中，而领域函数需要访问这些数据。（将该数据复制到一个领域对象中。建立一个Observer模式，用以同步领域对象和GUI对象内的重复数据）</p>\n<h5 id=\"Change-Unidirectional-Association-to-Bidirectional（将单向关联改为双向关联）\"><a href=\"#Change-Unidirectional-Association-to-Bidirectional（将单向关联改为双向关联）\" class=\"headerlink\" title=\"Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）\"></a>Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）</h5><p>两个类都需要使用对方特性，但其间只有一条单向连接。（添加一个返回指针，并使修改函数能够同时更新两条连接）</p>\n<p><strong>Change Bidirectional Association to Unidirectional （将双向关联改为单向关联）</strong></p>\n<p>两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。（去除不必要的关联）</p>\n<p><strong>Replace Magic Number with Symbolic Constant（以字面常量取代魔法数）</strong></p>\n<p>（创建一个常量，根据其意义为它命名，并将上述的字面数值替换为这个常量。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">potentialEnergy</span><span class=\"params\">(<span class=\"keyword\">double</span> mass, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mass * <span class=\"number\">9.81</span> * height;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">potentialEnergy</span><span class=\"params\">(<span class=\"keyword\">double</span> mass, <span class=\"keyword\">double</span> height)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mass * GRAVITATIONAL_CONSTANT * height;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> GRAVITATIONAL_CONSTANT = <span class=\"number\">9.81</span>;</div></pre></td></tr></table></figure>\n<p><strong>Encapsulate Field（封装字段 ）</strong></p>\n<p>你的类中存在一个public字段。将它声明为private，并提供相应的访问函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String _name;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">private</span> String _name;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> _name;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String arg)</span> </span>&#123;_name = arg;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Encapsulate-Collection（封装集合）\"><a href=\"#Encapsulate-Collection（封装集合）\" class=\"headerlink\" title=\"Encapsulate Collection（封装集合）\"></a>Encapsulate Collection（封装集合）</h5><p>有个函数返回一个集合。（让这个函数返回该集合的一个只读副本，并在这个类中提供添加、移除集合元素的函数。）</p>\n<h5 id=\"Replace-Recore-with-Data-Class（以数据类取代记录）\"><a href=\"#Replace-Recore-with-Data-Class（以数据类取代记录）\" class=\"headerlink\" title=\"Replace Recore with Data Class（以数据类取代记录）\"></a>Replace Recore with Data Class（以数据类取代记录）</h5><p>你需要面对传统编程环境中的记录结构。为该记录创建一个”哑”数据对象。</p>\n<h5 id=\"Replace-Type-Code-with-Class（以类取代类型码）\"><a href=\"#Replace-Type-Code-with-Class（以类取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with Class（以类取代类型码）\"></a>Replace Type Code with Class（以类取代类型码）</h5><p>类之中有一个数值类型码，但它并不影响类的行为。（以一个新的类替换该数值类型码。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> O, A, B, AB;</div><div class=\"line\">  <span class=\"keyword\">int</span> bloodGroup;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloodGroup</span> </span>&#123;</div><div class=\"line\">  BloodGroup O, A, B, AB</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Type-Code-with-Subclasses（以子类取代类型码）\"><a href=\"#Replace-Type-Code-with-Subclasses（以子类取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with Subclasses（以子类取代类型码）\"></a>Replace Type Code with Subclasses（以子类取代类型码）</h5><p>你有一个不可变的类型码，它会影响类的行为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> ENGINEER;</div><div class=\"line\">  <span class=\"keyword\">int</span> SALESMAN;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engineer</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Salesman</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Type-Code-with-State-Strategy（以State-Strategy取代类型码）\"><a href=\"#Replace-Type-Code-with-State-Strategy（以State-Strategy取代类型码）\" class=\"headerlink\" title=\"Replace Type Code with State/Strategy（以State/Strategy取代类型码）\"></a>Replace Type Code with State/Strategy（以State/Strategy取代类型码）</h5><p>你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。（以状态对象取代类型码）</p>\n<h5 id=\"Replace-Subclass-with-Fields（以字段取代子类）\"><a href=\"#Replace-Subclass-with-Fields（以字段取代子类）\" class=\"headerlink\" title=\"Replace Subclass with Fields（以字段取代子类）\"></a>Replace Subclass with Fields（以字段取代子类）</h5><p>你的各个子类的唯一差别只在”返回常量数据”的函数身上。修改这些函数，使它们返回超类中的某个（新增）字段，然后销毁子类</p>\n<h3 id=\"简化条件表达式\"><a href=\"#简化条件表达式\" class=\"headerlink\" title=\"简化条件表达式\"></a>简化条件表达式</h3><h5 id=\"Decompose-Conditional（分解条件表达式）\"><a href=\"#Decompose-Conditional（分解条件表达式）\" class=\"headerlink\" title=\"Decompose Conditional（分解条件表达式）\"></a>Decompose Conditional（分解条件表达式）</h5><p>（从if、then、else三个段落中分别提炼出独立函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END)) &#123;</div><div class=\"line\">  charge = quantity * _winterRate + _winterServiceCharge;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  charge = quantity * _summberRate;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (notSummer(date)) &#123;</div><div class=\"line\">  charge = winterCharge(quantity);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  charge = summerCharge(quantity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Consolidate-Conditional-Expression（合并条件表达式）\"><a href=\"#Consolidate-Conditional-Expression（合并条件表达式）\" class=\"headerlink\" title=\"Consolidate Conditional Expression（合并条件表达式）\"></a>Consolidate Conditional Expression（合并条件表达式）</h5><p>你有一系列条件测试，都得到相同结果。（将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_seniority &lt; <span class=\"number\">2</span>) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_monthsDisabled &gt; <span class=\"number\">12</span>) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isPartTime) &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isNotEligibleForDisability()) &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Consolidate-Duplicate-Conditional-Fragments（合并重复的条件片段）\"><a href=\"#Consolidate-Duplicate-Conditional-Fragments（合并重复的条件片段）\" class=\"headerlink\" title=\"Consolidate Duplicate Conditional Fragments（合并重复的条件片段）\"></a>Consolidate Duplicate Conditional Fragments（合并重复的条件片段）</h5><p>将下面这段重复代码搬移到条件表达式之外。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.95</span>;</div><div class=\"line\">  send();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.98</span>;</div><div class=\"line\">  send();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.95</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  total = price * <span class=\"number\">0.98</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">send();</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Control-Flag（移除控制标记）\"><a href=\"#Remove-Control-Flag（移除控制标记）\" class=\"headerlink\" title=\"Remove Control Flag（移除控制标记）\"></a>Remove Control Flag（移除控制标记）</h5><p>以break语句或return语句取代控制标记</p>\n<h5 id=\"Replace-Nested-Conditional-with-Guard-Clauses（以卫语句取代嵌套条件表达式）\"><a href=\"#Replace-Nested-Conditional-with-Guard-Clauses（以卫语句取代嵌套条件表达式）\" class=\"headerlink\" title=\"Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）\"></a>Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件表达式）</h5><p>函数中的条件逻辑使人难以看清正常的执行路径。（使用卫语句表现所有特殊情况）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">double</span> result;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isDead) &#123;</div><div class=\"line\">    result = deadAmount();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_isSeparated) &#123;</div><div class=\"line\">      result = separatedAmount();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (_isRetired) &#123;</div><div class=\"line\">        result = retiredAmount();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result = normalPayAmount();</div><div class=\"line\">      &#125; </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isDead) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> deadAmount();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isSeparated) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> separatedAmount();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (_isRetired) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> retiredAmount();</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"keyword\">return</span> normalPayAmount();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Conditional-with-Polymorphism（以多态取代条件表达式）\"><a href=\"#Replace-Conditional-with-Polymorphism（以多态取代条件表达式）\" class=\"headerlink\" title=\"Replace Conditional with Polymorphism（以多态取代条件表达式）\"></a>Replace Conditional with Polymorphism（以多态取代条件表达式）</h5><p>你手上有个条件表达式，它根据对象类型的不同而选择不同的行为。（将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span>(_type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> EUROPEAN:</div><div class=\"line\">      <span class=\"keyword\">return</span> getBaseSpeed;</div><div class=\"line\">    <span class=\"keyword\">case</span> AFRICAN:</div><div class=\"line\">      <span class=\"keyword\">return</span> getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;</div><div class=\"line\">    <span class=\"keyword\">case</span> NORWEGINA_BLUE:</div><div class=\"line\">      <span class=\"keyword\">return</span> (_isNailed) ? <span class=\"number\">0</span> : getBaseSpeed(_voltage);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Should be unreachable\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> </span>&#123; <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span>&#125;</div><div class=\"line\">class European extends Bird </span>&#123; getSpeed()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">African</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> </span>&#123; getSpeed()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NorwegianBlue</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> </span>&#123; getSpeed()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Null-Object（引用Null对象）\"><a href=\"#Introduce-Null-Object（引用Null对象）\" class=\"headerlink\" title=\"Introduce Null Object（引用Null对象）\"></a>Introduce Null Object（引用Null对象）</h5><p>你需要再三检查某个对象是否为null。（将null值替换为null对象）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (customer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  plan = BillingPlan.basic();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  plan = customer.getPlan();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123; getPlan()&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullCustomer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Customer</span> </span>&#123;getPlan()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Assertion（引入断言）\"><a href=\"#Introduce-Assertion（引入断言）\" class=\"headerlink\" title=\"Introduce Assertion（引入断言）\"></a>Introduce Assertion（引入断言）</h5><p>某一段代码需要对程序状态做出某种假设。以断言明确表现这种假设。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  Assert.isTrue (_expenseLimit != NULL_EXPENSE || _primaryProject != <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> (_expenseLimit != NULL_EXPENSE) ? _expenseLimit : _primaryProject.getMemberExpenseLimit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"简化函数调用\"><a href=\"#简化函数调用\" class=\"headerlink\" title=\"简化函数调用\"></a>简化函数调用</h3><h5 id=\"Rename-Method（函数改名）\"><a href=\"#Rename-Method（函数改名）\" class=\"headerlink\" title=\"Rename Method（函数改名）\"></a>Rename Method（函数改名）</h5><p>函数的名称未能指示函数的用途。修改函数名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getinvcdtlmt()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getInvoiceableCreditLimit()&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Add-Parameter（添加函数）\"><a href=\"#Add-Parameter（添加函数）\" class=\"headerlink\" title=\"Add Parameter（添加函数）\"></a>Add Parameter（添加函数）</h5><p>某个函数需要从调用端得到更多信息。（为些函数添加一个对象参数，让该对象带进函数所需的信息）</p>\n<h5 id=\"Remove-Parameter（移除参数）\"><a href=\"#Remove-Parameter（移除参数）\" class=\"headerlink\" title=\"Remove Parameter（移除参数）\"></a>Remove Parameter（移除参数）</h5><p>函数本体不再需要某个参数。将该参数去除。</p>\n<h5 id=\"Separate-Query-from-Modifier（将查询函数和修改函数分离）\"><a href=\"#Separate-Query-from-Modifier（将查询函数和修改函数分离）\" class=\"headerlink\" title=\"Separate Query from Modifier（将查询函数和修改函数分离）\"></a>Separate Query from Modifier（将查询函数和修改函数分离）</h5><p>某个函数既返回对象状态值，又修改对象状态。（建立两个不同的函数，其中一个负责查询，别一个负责修改。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;getTotalOutstandingAndSetReadyForSummaries()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  getTotalOutstanding()</div><div class=\"line\">  setReadyForSummaries()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Parameterize-Method（令函数携带参数）\"><a href=\"#Parameterize-Method（令函数携带参数）\" class=\"headerlink\" title=\"Parameterize Method（令函数携带参数）\"></a>Parameterize Method（令函数携带参数）</h5><p>若干函数做了类似的工作，但在函数本体中却包含了不同的值。（建立单一函数，以参数表达那些不同的值。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123; </div><div class=\"line\">  fivePercentRaise();</div><div class=\"line\">  tenPercentRaise();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  raise(percentage);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Parameter-with-Explicit-Methods（以明确函数取代参数）\"><a href=\"#Replace-Parameter-with-Explicit-Methods（以明确函数取代参数）\" class=\"headerlink\" title=\"Replace Parameter with Explicit Methods（以明确函数取代参数）\"></a>Replace Parameter with Explicit Methods（以明确函数取代参数）</h5><p>你有一个函数，其中完全取决于参数值而采取不同行为。（针对该参数的每一个可能值，建立一个独立函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"height\"</span>)) &#123;</div><div class=\"line\">    _height = value;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"width\"</span>)) &#123;</div><div class=\"line\">    _width = value;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  Assert.shouldNeverReachHere();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  _height = arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">  _width = arg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Preserve-Whole-Object（保持对象完整）\"><a href=\"#Preserve-Whole-Object（保持对象完整）\" class=\"headerlink\" title=\"Preserve Whole Object（保持对象完整）\"></a>Preserve Whole Object（保持对象完整）</h5><p>你从某个对象中取出若干值，将它们作为某一次函数调用的参数。改为传递整个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> low = daysTempRange().getLow();</div><div class=\"line\"><span class=\"keyword\">int</span> hight = daysTempRange().getHeight;</div><div class=\"line\">withinPlan = plan.withinRange(low, hight);</div><div class=\"line\">==&gt;</div><div class=\"line\">withinPlan = plan.withinRange(daysTempRange());</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Parameter-with-Methods（以函数取代参数）\"><a href=\"#Replace-Parameter-with-Methods（以函数取代参数）\" class=\"headerlink\" title=\"Replace Parameter with Methods（以函数取代参数）\"></a>Replace Parameter with Methods（以函数取代参数）</h5><p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。（让参数接受者去除该项参数，并直接调用前一个函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\">discountLevel = getDiscountLevel();</div><div class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice(basePrice, discountLevel);</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</div><div class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice(basePrice);</div></pre></td></tr></table></figure>\n<h5 id=\"Introduce-Parameter-Object（引入参数对象）\"><a href=\"#Introduce-Parameter-Object（引入参数对象）\" class=\"headerlink\" title=\"Introduce Parameter Object（引入参数对象）\"></a>Introduce Parameter Object（引入参数对象）</h5><p>某些参数总是很自然地同时出现。以一个对象取代这些参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  amountInvoicedIn(start:Date, end: Date);</div><div class=\"line\">  amountReceived(start:Date, end: Date);</div><div class=\"line\">  amountOverdueln(start:Date, end: Date);</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  amountInvoicedIn(DateRange);</div><div class=\"line\">  amountReceived(DateRange);</div><div class=\"line\">  amountOverdueln(DateRange);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Remove-Setting-Method（移除设值函数）\"><a href=\"#Remove-Setting-Method（移除设值函数）\" class=\"headerlink\" title=\"Remove Setting Method（移除设值函数）\"></a>Remove Setting Method（移除设值函数）</h5><p>类中的某个字段应该在对象创建时候被设值，然后就不再改变。（去掉该字段的所有设值函数）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  Immutable;</div><div class=\"line\">  setImmutableValue()&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Hide-Method（隐藏函数）\"><a href=\"#Hide-Method（隐藏函数）\" class=\"headerlink\" title=\"Hide Method（隐藏函数）\"></a>Hide Method（隐藏函数）</h5><p>有一个函数，从来没有被其他任何类用到。（将这个函数修改为private）</p>\n<h5 id=\"Replace-Constructor-with-Factory-Method（以工厂函数取代构造函数）\"><a href=\"#Replace-Constructor-with-Factory-Method（以工厂函数取代构造函数）\" class=\"headerlink\" title=\"Replace Constructor with Factory Method（以工厂函数取代构造函数）\"></a>Replace Constructor with Factory Method（以工厂函数取代构造函数）</h5><p>你希望在创建对象时不仅仅是做简单的构建动作。（将构造函数替换为工厂函数。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Employee(<span class=\"keyword\">int</span> type) &#123;</div><div class=\"line\">  _type = type</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Employee <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Employee(type);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Encapsulate-Downcast（封装向下转型）\"><a href=\"#Encapsulate-Downcast（封装向下转型）\" class=\"headerlink\" title=\"Encapsulate Downcast（封装向下转型）\"></a>Encapsulate Downcast（封装向下转型）</h5><p>某个函数返回的对象，需要由函数调用者执行向下转型(downcast)。（将向下转型动作移到函数中）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> readings.lastElement();</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\">Reading <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (Reading) readings.lastElement();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Error-Code-with-Exception（以异常取代错误码）\"><a href=\"#Replace-Error-Code-with-Exception（以异常取代错误码）\" class=\"headerlink\" title=\"Replace Error Code with Exception（以异常取代错误码）\"></a>Replace Error Code with Exception（以异常取代错误码）</h5><p>某个函数返回一个特定的代码，用以表示某种错误情况。（改用异常）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">int</span> amount)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (amount &gt; _balance) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    _balance -= amount;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">int</span> amount)</span> <span class=\"keyword\">throws</span> BalanceException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (amount &gt; _balance) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BalanceException();</div><div class=\"line\">  &#125;</div><div class=\"line\">  _balance -= amount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Replace-Exception-with-Test（以测试取代异常）\"><a href=\"#Replace-Exception-with-Test（以测试取代异常）\" class=\"headerlink\" title=\"Replace Exception with Test（以测试取代异常）\"></a>Replace Exception with Test（以测试取代异常）</h5><p>面对一个调用者可以预先检查的条件，你抛出了一个异常。(修改调用者，使它在调用函数之前先做检查)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _values[periodNumber];</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (periodNumber &gt;= _values.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _values[periodNumber];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"处理概括关系\"><a href=\"#处理概括关系\" class=\"headerlink\" title=\"处理概括关系\"></a>处理概括关系</h3><h5 id=\"Pull-Up-Field（字段上移）\"><a href=\"#Pull-Up-Field（字段上移）\" class=\"headerlink\" title=\"Pull Up Field（字段上移）\"></a>Pull Up Field（字段上移）</h5><p>两个子类拥有相同的字段。（将该字段移至超类）</p>\n<h5 id=\"Pull-Up-Method（函数上移）\"><a href=\"#Pull-Up-Method（函数上移）\" class=\"headerlink\" title=\"Pull Up Method（函数上移）\"></a>Pull Up Method（函数上移）</h5><p>有些函数，在各个子类中产生完全相同的结果。（将该函数移至超类）</p>\n<h5 id=\"Pull-Up-Constructor-Body（构造函数本体上移）\"><a href=\"#Pull-Up-Constructor-Body（构造函数本体上移）\" class=\"headerlink\" title=\"Pull Up Constructor Body（构造函数本体上移）\"></a>Pull Up Constructor Body（构造函数本体上移）</h5><p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。（在超类中新建一个构造函数，并在子类的构造函数中调用它）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title\">Employee</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span><span class=\"params\">(String name,String id,<span class=\"keyword\">int</span> grade)</span> </span>&#123;</div><div class=\"line\">    _name = name;</div><div class=\"line\">    _id = id;</div><div class=\"line\">    _grade = grade;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span><span class=\"params\">(String name, String id, <span class=\"keyword\">int</span> grade)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(name, id);</div><div class=\"line\">  _grade = grade;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Push-Down-Method（函数下移）\"><a href=\"#Push-Down-Method（函数下移）\" class=\"headerlink\" title=\"Push Down Method（函数下移）\"></a>Push Down Method（函数下移）</h5><p>超类中的某个函数只与部分（而非全部）子类有关。（将这个函数移到相关子类去）</p>\n<h5 id=\"Push-Down-Field（字段下移）\"><a href=\"#Push-Down-Field（字段下移）\" class=\"headerlink\" title=\"Push Down Field（字段下移）\"></a>Push Down Field（字段下移）</h5><p>超类中的某个字段只被部分（而非全部）子类用到。（将这个字段移到需要它的那些子类去）</p>\n<h5 id=\"Extract-Subclass（提炼子类）\"><a href=\"#Extract-Subclass（提炼子类）\" class=\"headerlink\" title=\"Extract Subclass（提炼子类）\"></a>Extract Subclass（提炼子类）</h5><p>类中的某些特性只被某些（而非全部）实例用到。（新建一个子类，将上面所说的那一部分特性移到子类中）</p>\n<h5 id=\"Extract-SuperClass（提炼超类）\"><a href=\"#Extract-SuperClass（提炼超类）\" class=\"headerlink\" title=\"Extract SuperClass（提炼超类）\"></a>Extract SuperClass（提炼超类）</h5><p>两个类有相似特性。（为这两个类建立一个超类，将相同特性移至超类）</p>\n<h5 id=\"Extract-Interface（提炼接口）\"><a href=\"#Extract-Interface（提炼接口）\" class=\"headerlink\" title=\"Extract Interface（提炼接口）\"></a>Extract Interface（提炼接口）</h5><p>若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。（将相同的子集提炼到一个独立接口中）</p>\n<h5 id=\"Collapse-Hierarchy（折叠继承体系）\"><a href=\"#Collapse-Hierarchy（折叠继承体系）\" class=\"headerlink\" title=\"Collapse Hierarchy（折叠继承体系）\"></a>Collapse Hierarchy（折叠继承体系）</h5><p>超类和子类之间无太大区别。（将它们合为一体）</p>\n<h5 id=\"Form-Template-Method（塑造模板函数）\"><a href=\"#Form-Template-Method（塑造模板函数）\" class=\"headerlink\" title=\"Form Template Method（塑造模板函数）\"></a>Form Template Method（塑造模板函数）</h5><p>你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。（将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类）</p>\n<h5 id=\"Replace-Inheritance-with-Delegation（以委托取代继承）\"><a href=\"#Replace-Inheritance-with-Delegation（以委托取代继承）\" class=\"headerlink\" title=\"Replace Inheritance with Delegation（以委托取代继承）\"></a>Replace Inheritance with Delegation（以委托取代继承）</h5><p>某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。（在子类中新建一个字段用以保存超类；调整子类函数，令它改而委托超类；然后去掉两者之间的继承关系）</p>\n<h5 id=\"Replace-Delegation-with-Inheritance（以继承取代委托）\"><a href=\"#Replace-Delegation-with-Inheritance（以继承取代委托）\" class=\"headerlink\" title=\"Replace Delegation with Inheritance（以继承取代委托）\"></a>Replace Delegation with Inheritance（以继承取代委托）</h5><p>你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。（让委托类继承受托类）</p>\n<h3 id=\"大型重构\"><a href=\"#大型重构\" class=\"headerlink\" title=\"大型重构\"></a>大型重构</h3><h5 id=\"Tease-Apart-Inheritance（梳理并分解继承体系）\"><a href=\"#Tease-Apart-Inheritance（梳理并分解继承体系）\" class=\"headerlink\" title=\"Tease Apart Inheritance（梳理并分解继承体系）\"></a>Tease Apart Inheritance（梳理并分解继承体系）</h5><p>某个继承体系同时承担两项责任。（建立两个继承体系，并通过委托关系让其中一个可以调用另一个）</p>\n<h5 id=\"Convert-Procedural-Design-to-Objects（将过程化设计转化为对象设计）\"><a href=\"#Convert-Procedural-Design-to-Objects（将过程化设计转化为对象设计）\" class=\"headerlink\" title=\"Convert Procedural Design to Objects（将过程化设计转化为对象设计）\"></a>Convert Procedural Design to Objects（将过程化设计转化为对象设计）</h5><p>你手上有一些传统过程化风格的代码。（将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。）</p>\n<h5 id=\"Separate-Domain-from-Presentation（将领域和表述、显示分离）\"><a href=\"#Separate-Domain-from-Presentation（将领域和表述、显示分离）\" class=\"headerlink\" title=\"Separate Domain from Presentation（将领域和表述、显示分离）\"></a>Separate Domain from Presentation（将领域和表述、显示分离）</h5><p>某些GUI类之中包含了领域逻辑。（将领域逻辑分离出来，为它们建立独立的领域类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderWindow</span> </span>&#123;&#125;</div><div class=\"line\">==&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderWindow</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Extract-Hierarchy（提炼继承体系）\"><a href=\"#Extract-Hierarchy（提炼继承体系）\" class=\"headerlink\" title=\"Extract Hierarchy（提炼继承体系）\"></a>Extract Hierarchy（提炼继承体系）</h5><p>你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的。（建立继承体系，以一个子类表示一特殊情况）</p>"},{"title":"Linux","date":"2018-01-25T02:52:11.000Z","_content":"","source":"_posts/study/Centenos.md","raw":"---\ntitle: Linux\ndate: 2018-01-25 10:52:11\ntags:\n---\n","slug":"study/Centenos","published":1,"updated":"2018-01-25T02:52:11.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6ux0021fq9mi7jhm8g5","content":"","excerpt":"","more":""},{"title":"Linux","date":"2018-01-25T02:52:11.000Z","_content":"\n[jenkins](https://segmentfault.com/a/1190000007086764)\n\n[shadowsocks](https://shadowsocks.blogspot.com/)\n\n[shadowscocks](https://www.cnblogs.com/gne-hwz/p/6662000.html)\n\n[shadowscocks](https://www.iwwenbo.com/0-1-shadowsocks-start/)\n\n[android sdk](http://www.jb51.net/article/119183.htm)\n\n[jenkins-github](https://www.jianshu.com/p/ee058d067fd9)\n\n[jenkins-github](https://www.jianshu.com/p/38b2e17ced73)\n\n","source":"_posts/study/Linux.md","raw":"---\ntitle: Linux\ndate: 2018-01-25 10:52:11\ntags:\n---\n\n[jenkins](https://segmentfault.com/a/1190000007086764)\n\n[shadowsocks](https://shadowsocks.blogspot.com/)\n\n[shadowscocks](https://www.cnblogs.com/gne-hwz/p/6662000.html)\n\n[shadowscocks](https://www.iwwenbo.com/0-1-shadowsocks-start/)\n\n[android sdk](http://www.jb51.net/article/119183.htm)\n\n[jenkins-github](https://www.jianshu.com/p/ee058d067fd9)\n\n[jenkins-github](https://www.jianshu.com/p/38b2e17ced73)\n\n","slug":"study/Linux","published":1,"updated":"2018-01-26T06:15:51.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uy0023fq9mv1x0pup9","content":"<p><a href=\"https://segmentfault.com/a/1190000007086764\" target=\"_blank\" rel=\"external\">jenkins</a></p>\n<p><a href=\"https://shadowsocks.blogspot.com/\" target=\"_blank\" rel=\"external\">shadowsocks</a></p>\n<p><a href=\"https://www.cnblogs.com/gne-hwz/p/6662000.html\" target=\"_blank\" rel=\"external\">shadowscocks</a></p>\n<p><a href=\"https://www.iwwenbo.com/0-1-shadowsocks-start/\" target=\"_blank\" rel=\"external\">shadowscocks</a></p>\n<p><a href=\"http://www.jb51.net/article/119183.htm\" target=\"_blank\" rel=\"external\">android sdk</a></p>\n<p><a href=\"https://www.jianshu.com/p/ee058d067fd9\" target=\"_blank\" rel=\"external\">jenkins-github</a></p>\n<p><a href=\"https://www.jianshu.com/p/38b2e17ced73\" target=\"_blank\" rel=\"external\">jenkins-github</a></p>\n","excerpt":"","more":"<p><a href=\"https://segmentfault.com/a/1190000007086764\">jenkins</a></p>\n<p><a href=\"https://shadowsocks.blogspot.com/\">shadowsocks</a></p>\n<p><a href=\"https://www.cnblogs.com/gne-hwz/p/6662000.html\">shadowscocks</a></p>\n<p><a href=\"https://www.iwwenbo.com/0-1-shadowsocks-start/\">shadowscocks</a></p>\n<p><a href=\"http://www.jb51.net/article/119183.htm\">android sdk</a></p>\n<p><a href=\"https://www.jianshu.com/p/ee058d067fd9\">jenkins-github</a></p>\n<p><a href=\"https://www.jianshu.com/p/38b2e17ced73\">jenkins-github</a></p>\n"},{"title":"hexo","date":"2016-08-22T08:11:51.000Z","_content":"\n### Hexo简介\n\n> 官网：https://hexo.io/zh-cn/\n\n主题：[yilia](https://github.com/litten/hexo-theme-yilia)\n\nMARKDOWN EDITOR: [typora](https://typora.io)\n\n### TIPS\n\n```java\nnpm install hexo-deployer-git --save\n```\n\n其它命令不确定，部署这个命令一定要用git bash，否则会提示\n\n`Permission denied (publickey).`\n\n推荐看此博客：http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\n\n### Hexo常用命令\n\n- 安装Hexo\n\n  `sudo npm install -g hexo`\n\n- 初始化\n\n  `hexo init`\n\n- 生成静态页面\n\n  `hexo generate`(hexo g也可以)\n\n- 本地启动\n\n  `hexo server`\n\n- 执行配置命令上传到github\n\n  `hexo deploy`\n\n- 新建文章\n\n  `hexo new 'postName'`\n\n- 新建页面\n\n  `hexo new page 'pageName'`\n\n- 查盾帮助\n\n  `hexo help`\n\n- 查看Hexo的版本\n\n  `hexo version`\n\n- 每次部署的步骤，可按以下三步来进行\n\n  hexo clean\n\n  hexo g\n\n  hexo d\n","source":"_posts/study/hexo.md","raw":"---\ntitle: hexo\ndate: 2016-08-22 16:11:51\ntags: study\n---\n\n### Hexo简介\n\n> 官网：https://hexo.io/zh-cn/\n\n主题：[yilia](https://github.com/litten/hexo-theme-yilia)\n\nMARKDOWN EDITOR: [typora](https://typora.io)\n\n### TIPS\n\n```java\nnpm install hexo-deployer-git --save\n```\n\n其它命令不确定，部署这个命令一定要用git bash，否则会提示\n\n`Permission denied (publickey).`\n\n推荐看此博客：http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\n\n### Hexo常用命令\n\n- 安装Hexo\n\n  `sudo npm install -g hexo`\n\n- 初始化\n\n  `hexo init`\n\n- 生成静态页面\n\n  `hexo generate`(hexo g也可以)\n\n- 本地启动\n\n  `hexo server`\n\n- 执行配置命令上传到github\n\n  `hexo deploy`\n\n- 新建文章\n\n  `hexo new 'postName'`\n\n- 新建页面\n\n  `hexo new page 'pageName'`\n\n- 查盾帮助\n\n  `hexo help`\n\n- 查看Hexo的版本\n\n  `hexo version`\n\n- 每次部署的步骤，可按以下三步来进行\n\n  hexo clean\n\n  hexo g\n\n  hexo d\n","slug":"study/hexo","published":1,"updated":"2018-01-25T02:54:00.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6uz0025fq9mf21asaj1","content":"<h3 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h3><blockquote>\n<p>官网：<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>主题：<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">yilia</a></p>\n<p>MARKDOWN EDITOR: <a href=\"https://typora.io\" target=\"_blank\" rel=\"external\">typora</a></p>\n<h3 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS\"></a>TIPS</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示</p>\n<p><code>Permission denied (publickey).</code></p>\n<p>推荐看此博客：<a href=\"http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><ul>\n<li><p>安装Hexo</p>\n<p><code>sudo npm install -g hexo</code></p>\n</li>\n<li><p>初始化</p>\n<p><code>hexo init</code></p>\n</li>\n<li><p>生成静态页面</p>\n<p><code>hexo generate</code>(hexo g也可以)</p>\n</li>\n<li><p>本地启动</p>\n<p><code>hexo server</code></p>\n</li>\n<li><p>执行配置命令上传到github</p>\n<p><code>hexo deploy</code></p>\n</li>\n<li><p>新建文章</p>\n<p><code>hexo new &#39;postName&#39;</code></p>\n</li>\n<li><p>新建页面</p>\n<p><code>hexo new page &#39;pageName&#39;</code></p>\n</li>\n<li><p>查盾帮助</p>\n<p><code>hexo help</code></p>\n</li>\n<li><p>查看Hexo的版本</p>\n<p><code>hexo version</code></p>\n</li>\n<li><p>每次部署的步骤，可按以下三步来进行</p>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h3><blockquote>\n<p>官网：<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>主题：<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a></p>\n<p>MARKDOWN EDITOR: <a href=\"https://typora.io\">typora</a></p>\n<h3 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS\"></a>TIPS</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示</p>\n<p><code>Permission denied (publickey).</code></p>\n<p>推荐看此博客：<a href=\"http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\">http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>\n<h3 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h3><ul>\n<li><p>安装Hexo</p>\n<p><code>sudo npm install -g hexo</code></p>\n</li>\n<li><p>初始化</p>\n<p><code>hexo init</code></p>\n</li>\n<li><p>生成静态页面</p>\n<p><code>hexo generate</code>(hexo g也可以)</p>\n</li>\n<li><p>本地启动</p>\n<p><code>hexo server</code></p>\n</li>\n<li><p>执行配置命令上传到github</p>\n<p><code>hexo deploy</code></p>\n</li>\n<li><p>新建文章</p>\n<p><code>hexo new &#39;postName&#39;</code></p>\n</li>\n<li><p>新建页面</p>\n<p><code>hexo new page &#39;pageName&#39;</code></p>\n</li>\n<li><p>查盾帮助</p>\n<p><code>hexo help</code></p>\n</li>\n<li><p>查看Hexo的版本</p>\n<p><code>hexo version</code></p>\n</li>\n<li><p>每次部署的步骤，可按以下三步来进行</p>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n</li>\n</ul>\n"},{"title":"shadowsocks多用户配置","date":"2018-01-26T07:55:52.000Z","_content":"\n### 前言\n\n之前一篇文章，我们讲了[使用搬瓦工+ShadowsocksX进行科学上网](/2018/01/25/study/study-bwh/)，我们使用的是`搬瓦工`自己的服务进行安装的，还没有看的同学请先看下。本篇主要讲解如何使用命令行的方式进行安装`shadowsocks`，配置单用户和多用户。\n\n如何进入服务器: [使用SSH客户端(Termius)连接服务器](/2018/01/30/study/study-centenos-ssh/)\n\n<!-- More -->\n\n### shadowsocks服务器配置\n\n这里我们安装的是python版本，首先进入官网:https://github.com/shadowsocks/shadowsocks/tree/master\n\n进入后拖动页面，找到自己的服务器版本，我们这里以`CentOS`为例:\n\n#### 安装shadowsocks\n\n```python\nyum install python-setuptools && easy_install pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n安装完成后，打开 https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\n\n我们可以看到官网的一些描述，这里简单说明一下：\n\n**第一步**，创建一个`shadowsocks.json`文件并打开，使用以下命令\n\n```python\nvi /etc/shadowsocks.json\n```\n\n**第二步**，按`i`键进入编辑模式，当按下`i`时，这时左下角会显示 `INSERT`字样，表示当前处于编辑模式。输入以下内容(因为是命令行模式，所以大家可以先使用文本编辑器，写好下面的文字，然后复制一下，贴到你的命令行)\n\n**单用户配置**\n\n```python\n{\n    \"server\":\"my_server_ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"mypassword\",\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",\n    \"fast_open\": false\n}\n```\n\n**多用户配置**\n\n```python\n{\n    \"server\":\"my_server_ip\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n    \t\"端口1\":\"密码1\",\n    \t\"端口2\":\"密码2\",\n    \t\"端口3\":\"密码3\",\n    },\n    \"timeout\":600,\n    \"method\":\"rc4-md5\",\n  \t\"fast_open\": false\n}\n```\n\n- 单用户：\n  - `my_server_ip `填你的服务器地址\n  - 8388填你的端口(自定义的，可能不更改，保留8388)\n  - `mypassword`填写你要设置的密码\n- 多用户\n  - `my_server_ip `填你的服务器地址\n  - `端口1、密码1`填你要分配给客户端的端口和密码，比如'8388':\"123456\"，后面的端口、密码同理\n\n> 注意`method`一栏，默认是`aes-256-cfb`，这里改为`rc4-md5`，这样上网会快一些，相应的客户端加密也要改成`rc4-md5`，别忘了\n>\n> 这里设置的项都是给你客户端连接时使用的\n\n**第三步**，开启或关闭服务\n\n使用以下命令\n\n开启服务\n\n```python\nssserver -c /etc/shadowsocks.json -d start\n```\n\n关闭服务\n\n```python\nssserver -c /etc/shadowsocks.json -d stop\n```\n\n大功告成，愉快的玩耍吧(^^)","source":"_posts/study/study-bwh-ss.md","raw":"---\ntitle: shadowsocks多用户配置\ndate: 2018-01-26 15:55:52\ntags: study\n---\n\n### 前言\n\n之前一篇文章，我们讲了[使用搬瓦工+ShadowsocksX进行科学上网](/2018/01/25/study/study-bwh/)，我们使用的是`搬瓦工`自己的服务进行安装的，还没有看的同学请先看下。本篇主要讲解如何使用命令行的方式进行安装`shadowsocks`，配置单用户和多用户。\n\n如何进入服务器: [使用SSH客户端(Termius)连接服务器](/2018/01/30/study/study-centenos-ssh/)\n\n<!-- More -->\n\n### shadowsocks服务器配置\n\n这里我们安装的是python版本，首先进入官网:https://github.com/shadowsocks/shadowsocks/tree/master\n\n进入后拖动页面，找到自己的服务器版本，我们这里以`CentOS`为例:\n\n#### 安装shadowsocks\n\n```python\nyum install python-setuptools && easy_install pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n安装完成后，打开 https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\n\n我们可以看到官网的一些描述，这里简单说明一下：\n\n**第一步**，创建一个`shadowsocks.json`文件并打开，使用以下命令\n\n```python\nvi /etc/shadowsocks.json\n```\n\n**第二步**，按`i`键进入编辑模式，当按下`i`时，这时左下角会显示 `INSERT`字样，表示当前处于编辑模式。输入以下内容(因为是命令行模式，所以大家可以先使用文本编辑器，写好下面的文字，然后复制一下，贴到你的命令行)\n\n**单用户配置**\n\n```python\n{\n    \"server\":\"my_server_ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"mypassword\",\n    \"timeout\":300,\n    \"method\":\"rc4-md5\",\n    \"fast_open\": false\n}\n```\n\n**多用户配置**\n\n```python\n{\n    \"server\":\"my_server_ip\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n    \t\"端口1\":\"密码1\",\n    \t\"端口2\":\"密码2\",\n    \t\"端口3\":\"密码3\",\n    },\n    \"timeout\":600,\n    \"method\":\"rc4-md5\",\n  \t\"fast_open\": false\n}\n```\n\n- 单用户：\n  - `my_server_ip `填你的服务器地址\n  - 8388填你的端口(自定义的，可能不更改，保留8388)\n  - `mypassword`填写你要设置的密码\n- 多用户\n  - `my_server_ip `填你的服务器地址\n  - `端口1、密码1`填你要分配给客户端的端口和密码，比如'8388':\"123456\"，后面的端口、密码同理\n\n> 注意`method`一栏，默认是`aes-256-cfb`，这里改为`rc4-md5`，这样上网会快一些，相应的客户端加密也要改成`rc4-md5`，别忘了\n>\n> 这里设置的项都是给你客户端连接时使用的\n\n**第三步**，开启或关闭服务\n\n使用以下命令\n\n开启服务\n\n```python\nssserver -c /etc/shadowsocks.json -d start\n```\n\n关闭服务\n\n```python\nssserver -c /etc/shadowsocks.json -d stop\n```\n\n大功告成，愉快的玩耍吧(^^)","slug":"study/study-bwh-ss","published":1,"updated":"2018-01-30T06:55:29.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6v00026fq9mts05fm33","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一篇文章，我们讲了<a href=\"/2018/01/25/study/study-bwh/\">使用搬瓦工+ShadowsocksX进行科学上网</a>，我们使用的是<code>搬瓦工</code>自己的服务进行安装的，还没有看的同学请先看下。本篇主要讲解如何使用命令行的方式进行安装<code>shadowsocks</code>，配置单用户和多用户。</p>\n<p>如何进入服务器: <a href=\"/2018/01/30/study/study-centenos-ssh/\">使用SSH客户端(Termius)连接服务器</a></p>\n<a id=\"more\"></a>\n<h3 id=\"shadowsocks服务器配置\"><a href=\"#shadowsocks服务器配置\" class=\"headerlink\" title=\"shadowsocks服务器配置\"></a>shadowsocks服务器配置</h3><p>这里我们安装的是python版本，首先进入官网:<a href=\"https://github.com/shadowsocks/shadowsocks/tree/master\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/shadowsocks/tree/master</a></p>\n<p>进入后拖动页面，找到自己的服务器版本，我们这里以<code>CentOS</code>为例:</p>\n<h4 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</div></pre></td></tr></table></figure>\n<p>安装完成后，打开 <a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File</a></p>\n<p>我们可以看到官网的一些描述，这里简单说明一下：</p>\n<p><strong>第一步</strong>，创建一个<code>shadowsocks.json</code>文件并打开，使用以下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>\n<p><strong>第二步</strong>，按<code>i</code>键进入编辑模式，当按下<code>i</code>时，这时左下角会显示 <code>INSERT</code>字样，表示当前处于编辑模式。输入以下内容(因为是命令行模式，所以大家可以先使用文本编辑器，写好下面的文字，然后复制一下，贴到你的命令行)</p>\n<p><strong>单用户配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"rc4-md5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>多用户配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</div><div class=\"line\">    \t<span class=\"string\">\"端口1\"</span>:<span class=\"string\">\"密码1\"</span>,</div><div class=\"line\">    \t<span class=\"string\">\"端口2\"</span>:<span class=\"string\">\"密码2\"</span>,</div><div class=\"line\">    \t<span class=\"string\">\"端口3\"</span>:<span class=\"string\">\"密码3\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"rc4-md5\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"fast_open\"</span>: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>单用户：<ul>\n<li><code>my_server_ip</code>填你的服务器地址</li>\n<li>8388填你的端口(自定义的，可能不更改，保留8388)</li>\n<li><code>mypassword</code>填写你要设置的密码</li>\n</ul>\n</li>\n<li>多用户<ul>\n<li><code>my_server_ip</code>填你的服务器地址</li>\n<li><code>端口1、密码1</code>填你要分配给客户端的端口和密码，比如’8388’:”123456”，后面的端口、密码同理</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意<code>method</code>一栏，默认是<code>aes-256-cfb</code>，这里改为<code>rc4-md5</code>，这样上网会快一些，相应的客户端加密也要改成<code>rc4-md5</code>，别忘了</p>\n<p>这里设置的项都是给你客户端连接时使用的</p>\n</blockquote>\n<p><strong>第三步</strong>，开启或关闭服务</p>\n<p>使用以下命令</p>\n<p>开启服务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>\n<p>关闭服务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</div></pre></td></tr></table></figure>\n<p>大功告成，愉快的玩耍吧(^^)</p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一篇文章，我们讲了<a href=\"/2018/01/25/study/study-bwh/\">使用搬瓦工+ShadowsocksX进行科学上网</a>，我们使用的是<code>搬瓦工</code>自己的服务进行安装的，还没有看的同学请先看下。本篇主要讲解如何使用命令行的方式进行安装<code>shadowsocks</code>，配置单用户和多用户。</p>\n<p>如何进入服务器: <a href=\"/2018/01/30/study/study-centenos-ssh/\">使用SSH客户端(Termius)连接服务器</a></p>","more":"<h3 id=\"shadowsocks服务器配置\"><a href=\"#shadowsocks服务器配置\" class=\"headerlink\" title=\"shadowsocks服务器配置\"></a>shadowsocks服务器配置</h3><p>这里我们安装的是python版本，首先进入官网:<a href=\"https://github.com/shadowsocks/shadowsocks/tree/master\">https://github.com/shadowsocks/shadowsocks/tree/master</a></p>\n<p>进入后拖动页面，找到自己的服务器版本，我们这里以<code>CentOS</code>为例:</p>\n<h4 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</div></pre></td></tr></table></figure>\n<p>安装完成后，打开 <a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\">https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File</a></p>\n<p>我们可以看到官网的一些描述，这里简单说明一下：</p>\n<p><strong>第一步</strong>，创建一个<code>shadowsocks.json</code>文件并打开，使用以下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>\n<p><strong>第二步</strong>，按<code>i</code>键进入编辑模式，当按下<code>i</code>时，这时左下角会显示 <code>INSERT</code>字样，表示当前处于编辑模式。输入以下内容(因为是命令行模式，所以大家可以先使用文本编辑器，写好下面的文字，然后复制一下，贴到你的命令行)</p>\n<p><strong>单用户配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">    <span class=\"string\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"rc4-md5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"fast_open\"</span>: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>多用户配置</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</div><div class=\"line\">    \t<span class=\"string\">\"端口1\"</span>:<span class=\"string\">\"密码1\"</span>,</div><div class=\"line\">    \t<span class=\"string\">\"端口2\"</span>:<span class=\"string\">\"密码2\"</span>,</div><div class=\"line\">    \t<span class=\"string\">\"端口3\"</span>:<span class=\"string\">\"密码3\"</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"rc4-md5\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"fast_open\"</span>: false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>单用户：<ul>\n<li><code>my_server_ip</code>填你的服务器地址</li>\n<li>8388填你的端口(自定义的，可能不更改，保留8388)</li>\n<li><code>mypassword</code>填写你要设置的密码</li>\n</ul>\n</li>\n<li>多用户<ul>\n<li><code>my_server_ip</code>填你的服务器地址</li>\n<li><code>端口1、密码1</code>填你要分配给客户端的端口和密码，比如’8388’:”123456”，后面的端口、密码同理</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意<code>method</code>一栏，默认是<code>aes-256-cfb</code>，这里改为<code>rc4-md5</code>，这样上网会快一些，相应的客户端加密也要改成<code>rc4-md5</code>，别忘了</p>\n<p>这里设置的项都是给你客户端连接时使用的</p>\n</blockquote>\n<p><strong>第三步</strong>，开启或关闭服务</p>\n<p>使用以下命令</p>\n<p>开启服务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>\n<p>关闭服务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</div></pre></td></tr></table></figure>\n<p>大功告成，愉快的玩耍吧(^^)</p>"},{"title":"使用搬瓦工+ShadowsocksX进行科学上网","date":"2018-01-25T02:52:11.000Z","_content":"\n（温馨提示：本文图片较多，请在WIFI情况下阅读）\n\n### 前言\n\n在天朝，因为qian的原因，很多外网是访问不了的。身为程序员，很多时候是需要访问`google`进行问题搜索，这时候就需要fan qiang进行科学上网了。\n\n可能有相当一部分人是买的VPN进行科学上网，但VPN一般比较贵，也不稳定，不如自己搭建VPS（相当于自己买一台海外服务器），一方面可以可以学习一下Linux，一方面还可以科学上网，还比VPN便宜不少。\n\n<!-- More -->\n\n### VPS购买\n\n其实VPS搭建还是比较简单的，本文使用搬瓦工(Bandwagon)，搬瓦工对新手比较友好，而且官方支持ShadowsocksX，最重要的是支持`支付宝`，省去了很多麻烦，官网：https://bwh1.net\n\n首选进入官网\n\n![bwh_home](/img/study/bwh_home.jpg)\n\n点击`VPS Hosting`，进入到VPS Hosting页面，我们先选择最便宜的一款，购买完成后可以根据自身情况进行升降服务器，后续会介绍如何升降。KVM是新的架构，OVZ是老的架构，大家要选Order KVM，不要选错了。\n\n> 大家不知道选哪个的话，可以网上搜一搜，推荐个地方：\n>\n> http://banwagong.cn/gonglue.html\n>\n\n![bwh_host](/img/study/bwh_host.jpg)\n\n点击`Order KVM`，进入到详情页面，因为`搬瓦工`的VPS是经常变换的，可能你看到的页面和我的不太一样，不过没关系，下面我们会说到。\n\n![bwh_order_cycle](/img/study/bwh_order_cycle.jpg)\n\n因为我选的这个VPS，只支持年付，所有`Billing CyCle`只有一个选项。你的VPS可能是下面的这种情况，我这里的截图是20G VPS的，因为10G VPS的只支持年付，没法截下面的图\n\n![bwh_order_cycle_more](/img/study/bwh_order_cycle_more.jpg)\n\n> 注意：\n>\n> Monthly 表示月付，就是使用一个月\n>\n> Quarterly 表示季付，就是使用三个月\n>\n> Semi-Annually 表示半年\n>\n> Annually 表示一年\n\n建议大家选择一年，相对便宜，选完`Billing Cycle`，接下来选机房\n\n![bwh_order_location](/img/study/bwh_order_location.jpg)\n\n这里我们选择洛杉矶机机房，上面的第二项(后续可以在控制面板切换)，选完之后点击下方的`Add to Cart`，进入到`订单汇总页面`\n\n![bwh_order_detail](/img/study/bwh_order_detail.jpg)\n\n这里我们使用`BWH1ZBPVK`这个优惠码(随时失效，大家可以百度搜一搜优惠码)，输入完优惠码后，点击右边的`Validate Code>>`，出现下面的界面，表示优惠码有效\n\n![bwh_order_detail_pc](/img/study/bwh_order_detail_pc.jpg)\n\n确认没问题后，点击`Checkout`去结账\n\n![bwh_order_complete](/img/study/bwh_order_complete.jpg)\n\n如果有账号的话，点击`Click me to login`进行登录。没有的话，填写下面的项，后面标了`红色`字体的尽量都填上，最好真实的，防止被误认为`订单欺诈`\n\n> 重要提示：不要填中文，使用拼音代替。比如：姓名叫李白，LastName填`li`，FirstName填`bai`\n>\n> ，还有State/Region一栏，要先选择Country，这样State/Region才会变\n\n输入完成之后，点击`Update`。\n\n接下来选择支付方式，我们这里选择`支付宝`\n\n![bwh_order_pay](/img/study/bwh_order_pay.jpg)\n\n点击`Complete Order`，会进入到`支付宝`支付界面\n\n![bwh_order_pay_complete](/img/study/bwh_order_pay_complete.jpg)\n\n扫描完成支付(不要扫图中的码哦)，支付成功后会收到邮件通知，里面会有你的服务器ip地址等信息。\n\n### VPS服务器搭建\n\n通过上面的步骤，我们已经完成了VPS的购买，接下来我们开始搭建自己的服务器\n\n我们先回到首页，点击`Client Area`，`Client Area`会出现在下面2个地方\n\n![bwh_home_client_area_top](/img/study/bwh_home_client_area_top.jpg)\n\n![bwh_home_client_ares](/img/study/bwh_home_client_ares.jpg)\n\n点击后进入到下面的界面\n\n![bwh_home_services](/img/study/bwh_home_services.jpg)\n\n依次点击`Services` -> `My Services`，进入到下面的界面\n\n![bwh_home_services_detail](/img/study/bwh_home_services_detail.jpg)\n\n这里我们点击`KiwiVM Control Panel`进入到服务器控制面版。进入到服务器控制面版后，先把服务停掉(待会要重装系统)。\n\n![bwh_kiwi_main](/img/study/bwh_kiwi_main.jpg)\n\n搬瓦工提供无限次重装系统，这里我们先把服务停掉，重装一下系统。停掉服务后，点击左侧的`ShadowsocksR Server`，进入到`ShadowsocksR Server`界面，查看一下支持的`系统版本`\n\n![bwh_kiwi_ss](/img/study/bwh_kiwi_ss.jpg)\n\n从图中，我们可以看过，`ShadowsocksR Server`只支持`Centos 6 (32 or 64 bit)`的系统 ，所以我们需要重装一个`Centos 6 (32 or 64 bit) `的系统。\n\n点击左边的`Install new OS`，选择`centos-6-x86_64-bbr`，进行重装系统\n\n**重要：如果希望自行安装shadowsocks(可以配置单、多用户)，可以选择`centos-7-x86_64-bbr`，建议大家选择自行安装([shadowsocks多用户配置](http://localhost:4000/2018/01/26/study/study-bwh-ss/))，不喜欢折腾的，可以继续往下看**\n\n![bwh_kiwi_new_os](/img/study/bwh_kiwi_new_os.jpg)\n\n点击`reload`，进行重装系统 ，同时会进入下面的界面\n\n![bwh_kiwi_new_os_info](/img/study/bwh_kiwi_new_os_info.jpg)\n\n这里的`端口`和`服务器密码`需要记下来，方便以后使用ssh连接服务器使用\n\n如何进入服务器: [使用SSH客户端(Termius)连接服务器](/2018/01/30/study/study-centenos-ssh/)\n\n稍等一会，刷新页面，点击左侧的`Main controls`，出现下面的界面，表示系统安装成功\n\n![bwh_kiwi_main_new](/img/study/bwh_kiwi_main_new.jpg)\n\n接下来，我们要安装`ShadowsocksX`服务\n\n### ShadowsocksX服务安装\n\n**重要：希望自行安装shadowsocks的用户可以跳过此步，传送门:[shadowsocks多用户配置](http://localhost:4000/2018/01/26/study/study-bwh-ss/)**\n\n点击左侧的`ShadowsocksR Server`\n\n![bwh_kiwi_ss_install](/img/study/bwh_kiwi_ss_install.jpg)\n\n等待安装完成，出现下面界面，表示安装成功\n\n![bwh_kiwi_ss_completed](/img/study/bwh_kiwi_ss_completed.jpg)\n\n点击`Go back`，进入详情页，拖到到页面到`Step 2`。不要关闭这个界面，后面会用到\n\n![bwh_kiwi_ss_info](/img/study/bwh_kiwi_ss_info.jpg)\n\n至此，我们的ShadowsocksX服务安装完成，接下来，我们需要安装`ShadowsocksX`客户端\n\n### ShadowsocksX客户端安装\n\n这里以`Mac OS`系统为例，其它平台可以参考下面文章\n\n##### Mac平台\n\n点击https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help\n\n![bwh_ss_mac_os](/img/study/bwh_ss_mac_os.jpg)\n\n点击图中标示的链接，会进入到一个下载页，点击`Download`开始下载，下载完成后安装，安装成功后，打开`ShadowsocksX`，打开后，会在菜单出现一个`纸飞机图标`，点击它\n\n![bwh_ss_client](/img/study/bwh_ss_client.jpg)\n\n因为我之前配过2个服务器，所以上面会显示2条记录。点击`打开服务器设定`\n\n![bwh_kiwi_all](/img/study/bwh_kiwi_all.jpg)\n\n照着填就可以了，填完点击`确定`。大功告成，可以科学上网啦！(依然上不了的，可以把客户端软件关了，再重开)\n\n![bwh_ss_complete](/img/study/bwh_ss_complete.jpg)\n\n##### Windows平台\n\n点击https://github.com/shadowsocks/shadowsocks-windows/releases\n\n![bwh_ss_windows](/img/study/bwh_ss_windows.jpg)\n\n##### 其它平台\n\n地址：https://github.com/shadowsocks?page=1\n\n自己慢慢找吧(^^)\n\n### VPS服务器升降\n\n还记得文章上述的这个界面吗\n\n![bwh_home_services_detail](/img/study/bwh_home_services_detail.jpg)\n\n点击`Manage`，进入到服务器管理页\n\n![bwh_service_info](/img/study/bwh_service_info.jpg)\n\n点击后，进入下面的界面，大家可以按需选择\n\n![bwh_service_detail](/img/study/bwh_service_detail.jpg)","source":"_posts/study/study-bwh.md","raw":"---\ntitle: 使用搬瓦工+ShadowsocksX进行科学上网\ndate: 2018-01-25 10:52:11\ntags: study\n---\n\n（温馨提示：本文图片较多，请在WIFI情况下阅读）\n\n### 前言\n\n在天朝，因为qian的原因，很多外网是访问不了的。身为程序员，很多时候是需要访问`google`进行问题搜索，这时候就需要fan qiang进行科学上网了。\n\n可能有相当一部分人是买的VPN进行科学上网，但VPN一般比较贵，也不稳定，不如自己搭建VPS（相当于自己买一台海外服务器），一方面可以可以学习一下Linux，一方面还可以科学上网，还比VPN便宜不少。\n\n<!-- More -->\n\n### VPS购买\n\n其实VPS搭建还是比较简单的，本文使用搬瓦工(Bandwagon)，搬瓦工对新手比较友好，而且官方支持ShadowsocksX，最重要的是支持`支付宝`，省去了很多麻烦，官网：https://bwh1.net\n\n首选进入官网\n\n![bwh_home](/img/study/bwh_home.jpg)\n\n点击`VPS Hosting`，进入到VPS Hosting页面，我们先选择最便宜的一款，购买完成后可以根据自身情况进行升降服务器，后续会介绍如何升降。KVM是新的架构，OVZ是老的架构，大家要选Order KVM，不要选错了。\n\n> 大家不知道选哪个的话，可以网上搜一搜，推荐个地方：\n>\n> http://banwagong.cn/gonglue.html\n>\n\n![bwh_host](/img/study/bwh_host.jpg)\n\n点击`Order KVM`，进入到详情页面，因为`搬瓦工`的VPS是经常变换的，可能你看到的页面和我的不太一样，不过没关系，下面我们会说到。\n\n![bwh_order_cycle](/img/study/bwh_order_cycle.jpg)\n\n因为我选的这个VPS，只支持年付，所有`Billing CyCle`只有一个选项。你的VPS可能是下面的这种情况，我这里的截图是20G VPS的，因为10G VPS的只支持年付，没法截下面的图\n\n![bwh_order_cycle_more](/img/study/bwh_order_cycle_more.jpg)\n\n> 注意：\n>\n> Monthly 表示月付，就是使用一个月\n>\n> Quarterly 表示季付，就是使用三个月\n>\n> Semi-Annually 表示半年\n>\n> Annually 表示一年\n\n建议大家选择一年，相对便宜，选完`Billing Cycle`，接下来选机房\n\n![bwh_order_location](/img/study/bwh_order_location.jpg)\n\n这里我们选择洛杉矶机机房，上面的第二项(后续可以在控制面板切换)，选完之后点击下方的`Add to Cart`，进入到`订单汇总页面`\n\n![bwh_order_detail](/img/study/bwh_order_detail.jpg)\n\n这里我们使用`BWH1ZBPVK`这个优惠码(随时失效，大家可以百度搜一搜优惠码)，输入完优惠码后，点击右边的`Validate Code>>`，出现下面的界面，表示优惠码有效\n\n![bwh_order_detail_pc](/img/study/bwh_order_detail_pc.jpg)\n\n确认没问题后，点击`Checkout`去结账\n\n![bwh_order_complete](/img/study/bwh_order_complete.jpg)\n\n如果有账号的话，点击`Click me to login`进行登录。没有的话，填写下面的项，后面标了`红色`字体的尽量都填上，最好真实的，防止被误认为`订单欺诈`\n\n> 重要提示：不要填中文，使用拼音代替。比如：姓名叫李白，LastName填`li`，FirstName填`bai`\n>\n> ，还有State/Region一栏，要先选择Country，这样State/Region才会变\n\n输入完成之后，点击`Update`。\n\n接下来选择支付方式，我们这里选择`支付宝`\n\n![bwh_order_pay](/img/study/bwh_order_pay.jpg)\n\n点击`Complete Order`，会进入到`支付宝`支付界面\n\n![bwh_order_pay_complete](/img/study/bwh_order_pay_complete.jpg)\n\n扫描完成支付(不要扫图中的码哦)，支付成功后会收到邮件通知，里面会有你的服务器ip地址等信息。\n\n### VPS服务器搭建\n\n通过上面的步骤，我们已经完成了VPS的购买，接下来我们开始搭建自己的服务器\n\n我们先回到首页，点击`Client Area`，`Client Area`会出现在下面2个地方\n\n![bwh_home_client_area_top](/img/study/bwh_home_client_area_top.jpg)\n\n![bwh_home_client_ares](/img/study/bwh_home_client_ares.jpg)\n\n点击后进入到下面的界面\n\n![bwh_home_services](/img/study/bwh_home_services.jpg)\n\n依次点击`Services` -> `My Services`，进入到下面的界面\n\n![bwh_home_services_detail](/img/study/bwh_home_services_detail.jpg)\n\n这里我们点击`KiwiVM Control Panel`进入到服务器控制面版。进入到服务器控制面版后，先把服务停掉(待会要重装系统)。\n\n![bwh_kiwi_main](/img/study/bwh_kiwi_main.jpg)\n\n搬瓦工提供无限次重装系统，这里我们先把服务停掉，重装一下系统。停掉服务后，点击左侧的`ShadowsocksR Server`，进入到`ShadowsocksR Server`界面，查看一下支持的`系统版本`\n\n![bwh_kiwi_ss](/img/study/bwh_kiwi_ss.jpg)\n\n从图中，我们可以看过，`ShadowsocksR Server`只支持`Centos 6 (32 or 64 bit)`的系统 ，所以我们需要重装一个`Centos 6 (32 or 64 bit) `的系统。\n\n点击左边的`Install new OS`，选择`centos-6-x86_64-bbr`，进行重装系统\n\n**重要：如果希望自行安装shadowsocks(可以配置单、多用户)，可以选择`centos-7-x86_64-bbr`，建议大家选择自行安装([shadowsocks多用户配置](http://localhost:4000/2018/01/26/study/study-bwh-ss/))，不喜欢折腾的，可以继续往下看**\n\n![bwh_kiwi_new_os](/img/study/bwh_kiwi_new_os.jpg)\n\n点击`reload`，进行重装系统 ，同时会进入下面的界面\n\n![bwh_kiwi_new_os_info](/img/study/bwh_kiwi_new_os_info.jpg)\n\n这里的`端口`和`服务器密码`需要记下来，方便以后使用ssh连接服务器使用\n\n如何进入服务器: [使用SSH客户端(Termius)连接服务器](/2018/01/30/study/study-centenos-ssh/)\n\n稍等一会，刷新页面，点击左侧的`Main controls`，出现下面的界面，表示系统安装成功\n\n![bwh_kiwi_main_new](/img/study/bwh_kiwi_main_new.jpg)\n\n接下来，我们要安装`ShadowsocksX`服务\n\n### ShadowsocksX服务安装\n\n**重要：希望自行安装shadowsocks的用户可以跳过此步，传送门:[shadowsocks多用户配置](http://localhost:4000/2018/01/26/study/study-bwh-ss/)**\n\n点击左侧的`ShadowsocksR Server`\n\n![bwh_kiwi_ss_install](/img/study/bwh_kiwi_ss_install.jpg)\n\n等待安装完成，出现下面界面，表示安装成功\n\n![bwh_kiwi_ss_completed](/img/study/bwh_kiwi_ss_completed.jpg)\n\n点击`Go back`，进入详情页，拖到到页面到`Step 2`。不要关闭这个界面，后面会用到\n\n![bwh_kiwi_ss_info](/img/study/bwh_kiwi_ss_info.jpg)\n\n至此，我们的ShadowsocksX服务安装完成，接下来，我们需要安装`ShadowsocksX`客户端\n\n### ShadowsocksX客户端安装\n\n这里以`Mac OS`系统为例，其它平台可以参考下面文章\n\n##### Mac平台\n\n点击https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help\n\n![bwh_ss_mac_os](/img/study/bwh_ss_mac_os.jpg)\n\n点击图中标示的链接，会进入到一个下载页，点击`Download`开始下载，下载完成后安装，安装成功后，打开`ShadowsocksX`，打开后，会在菜单出现一个`纸飞机图标`，点击它\n\n![bwh_ss_client](/img/study/bwh_ss_client.jpg)\n\n因为我之前配过2个服务器，所以上面会显示2条记录。点击`打开服务器设定`\n\n![bwh_kiwi_all](/img/study/bwh_kiwi_all.jpg)\n\n照着填就可以了，填完点击`确定`。大功告成，可以科学上网啦！(依然上不了的，可以把客户端软件关了，再重开)\n\n![bwh_ss_complete](/img/study/bwh_ss_complete.jpg)\n\n##### Windows平台\n\n点击https://github.com/shadowsocks/shadowsocks-windows/releases\n\n![bwh_ss_windows](/img/study/bwh_ss_windows.jpg)\n\n##### 其它平台\n\n地址：https://github.com/shadowsocks?page=1\n\n自己慢慢找吧(^^)\n\n### VPS服务器升降\n\n还记得文章上述的这个界面吗\n\n![bwh_home_services_detail](/img/study/bwh_home_services_detail.jpg)\n\n点击`Manage`，进入到服务器管理页\n\n![bwh_service_info](/img/study/bwh_service_info.jpg)\n\n点击后，进入下面的界面，大家可以按需选择\n\n![bwh_service_detail](/img/study/bwh_service_detail.jpg)","slug":"study/study-bwh","published":1,"updated":"2018-01-30T06:54:06.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6v10029fq9mmglg9f8t","content":"<p>（温馨提示：本文图片较多，请在WIFI情况下阅读）</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在天朝，因为qian的原因，很多外网是访问不了的。身为程序员，很多时候是需要访问<code>google</code>进行问题搜索，这时候就需要fan qiang进行科学上网了。</p>\n<p>可能有相当一部分人是买的VPN进行科学上网，但VPN一般比较贵，也不稳定，不如自己搭建VPS（相当于自己买一台海外服务器），一方面可以可以学习一下Linux，一方面还可以科学上网，还比VPN便宜不少。</p>\n<a id=\"more\"></a>\n<h3 id=\"VPS购买\"><a href=\"#VPS购买\" class=\"headerlink\" title=\"VPS购买\"></a>VPS购买</h3><p>其实VPS搭建还是比较简单的，本文使用搬瓦工(Bandwagon)，搬瓦工对新手比较友好，而且官方支持ShadowsocksX，最重要的是支持<code>支付宝</code>，省去了很多麻烦，官网：<a href=\"https://bwh1.net\" target=\"_blank\" rel=\"external\">https://bwh1.net</a></p>\n<p>首选进入官网</p>\n<p><img src=\"/img/study/bwh_home.jpg\" alt=\"bwh_home\"></p>\n<p>点击<code>VPS Hosting</code>，进入到VPS Hosting页面，我们先选择最便宜的一款，购买完成后可以根据自身情况进行升降服务器，后续会介绍如何升降。KVM是新的架构，OVZ是老的架构，大家要选Order KVM，不要选错了。</p>\n<blockquote>\n<p>大家不知道选哪个的话，可以网上搜一搜，推荐个地方：</p>\n<p><a href=\"http://banwagong.cn/gonglue.html\" target=\"_blank\" rel=\"external\">http://banwagong.cn/gonglue.html</a></p>\n</blockquote>\n<p><img src=\"/img/study/bwh_host.jpg\" alt=\"bwh_host\"></p>\n<p>点击<code>Order KVM</code>，进入到详情页面，因为<code>搬瓦工</code>的VPS是经常变换的，可能你看到的页面和我的不太一样，不过没关系，下面我们会说到。</p>\n<p><img src=\"/img/study/bwh_order_cycle.jpg\" alt=\"bwh_order_cycle\"></p>\n<p>因为我选的这个VPS，只支持年付，所有<code>Billing CyCle</code>只有一个选项。你的VPS可能是下面的这种情况，我这里的截图是20G VPS的，因为10G VPS的只支持年付，没法截下面的图</p>\n<p><img src=\"/img/study/bwh_order_cycle_more.jpg\" alt=\"bwh_order_cycle_more\"></p>\n<blockquote>\n<p>注意：</p>\n<p>Monthly 表示月付，就是使用一个月</p>\n<p>Quarterly 表示季付，就是使用三个月</p>\n<p>Semi-Annually 表示半年</p>\n<p>Annually 表示一年</p>\n</blockquote>\n<p>建议大家选择一年，相对便宜，选完<code>Billing Cycle</code>，接下来选机房</p>\n<p><img src=\"/img/study/bwh_order_location.jpg\" alt=\"bwh_order_location\"></p>\n<p>这里我们选择洛杉矶机机房，上面的第二项(后续可以在控制面板切换)，选完之后点击下方的<code>Add to Cart</code>，进入到<code>订单汇总页面</code></p>\n<p><img src=\"/img/study/bwh_order_detail.jpg\" alt=\"bwh_order_detail\"></p>\n<p>这里我们使用<code>BWH1ZBPVK</code>这个优惠码(随时失效，大家可以百度搜一搜优惠码)，输入完优惠码后，点击右边的<code>Validate Code&gt;&gt;</code>，出现下面的界面，表示优惠码有效</p>\n<p><img src=\"/img/study/bwh_order_detail_pc.jpg\" alt=\"bwh_order_detail_pc\"></p>\n<p>确认没问题后，点击<code>Checkout</code>去结账</p>\n<p><img src=\"/img/study/bwh_order_complete.jpg\" alt=\"bwh_order_complete\"></p>\n<p>如果有账号的话，点击<code>Click me to login</code>进行登录。没有的话，填写下面的项，后面标了<code>红色</code>字体的尽量都填上，最好真实的，防止被误认为<code>订单欺诈</code></p>\n<blockquote>\n<p>重要提示：不要填中文，使用拼音代替。比如：姓名叫李白，LastName填<code>li</code>，FirstName填<code>bai</code></p>\n<p>，还有State/Region一栏，要先选择Country，这样State/Region才会变</p>\n</blockquote>\n<p>输入完成之后，点击<code>Update</code>。</p>\n<p>接下来选择支付方式，我们这里选择<code>支付宝</code></p>\n<p><img src=\"/img/study/bwh_order_pay.jpg\" alt=\"bwh_order_pay\"></p>\n<p>点击<code>Complete Order</code>，会进入到<code>支付宝</code>支付界面</p>\n<p><img src=\"/img/study/bwh_order_pay_complete.jpg\" alt=\"bwh_order_pay_complete\"></p>\n<p>扫描完成支付(不要扫图中的码哦)，支付成功后会收到邮件通知，里面会有你的服务器ip地址等信息。</p>\n<h3 id=\"VPS服务器搭建\"><a href=\"#VPS服务器搭建\" class=\"headerlink\" title=\"VPS服务器搭建\"></a>VPS服务器搭建</h3><p>通过上面的步骤，我们已经完成了VPS的购买，接下来我们开始搭建自己的服务器</p>\n<p>我们先回到首页，点击<code>Client Area</code>，<code>Client Area</code>会出现在下面2个地方</p>\n<p><img src=\"/img/study/bwh_home_client_area_top.jpg\" alt=\"bwh_home_client_area_top\"></p>\n<p><img src=\"/img/study/bwh_home_client_ares.jpg\" alt=\"bwh_home_client_ares\"></p>\n<p>点击后进入到下面的界面</p>\n<p><img src=\"/img/study/bwh_home_services.jpg\" alt=\"bwh_home_services\"></p>\n<p>依次点击<code>Services</code> -&gt; <code>My Services</code>，进入到下面的界面</p>\n<p><img src=\"/img/study/bwh_home_services_detail.jpg\" alt=\"bwh_home_services_detail\"></p>\n<p>这里我们点击<code>KiwiVM Control Panel</code>进入到服务器控制面版。进入到服务器控制面版后，先把服务停掉(待会要重装系统)。</p>\n<p><img src=\"/img/study/bwh_kiwi_main.jpg\" alt=\"bwh_kiwi_main\"></p>\n<p>搬瓦工提供无限次重装系统，这里我们先把服务停掉，重装一下系统。停掉服务后，点击左侧的<code>ShadowsocksR Server</code>，进入到<code>ShadowsocksR Server</code>界面，查看一下支持的<code>系统版本</code></p>\n<p><img src=\"/img/study/bwh_kiwi_ss.jpg\" alt=\"bwh_kiwi_ss\"></p>\n<p>从图中，我们可以看过，<code>ShadowsocksR Server</code>只支持<code>Centos 6 (32 or 64 bit)</code>的系统 ，所以我们需要重装一个<code>Centos 6 (32 or 64 bit)</code>的系统。</p>\n<p>点击左边的<code>Install new OS</code>，选择<code>centos-6-x86_64-bbr</code>，进行重装系统</p>\n<p><strong>重要：如果希望自行安装shadowsocks(可以配置单、多用户)，可以选择<code>centos-7-x86_64-bbr</code>，建议大家选择自行安装(<a href=\"http://localhost:4000/2018/01/26/study/study-bwh-ss/\" target=\"_blank\" rel=\"external\">shadowsocks多用户配置</a>)，不喜欢折腾的，可以继续往下看</strong></p>\n<p><img src=\"/img/study/bwh_kiwi_new_os.jpg\" alt=\"bwh_kiwi_new_os\"></p>\n<p>点击<code>reload</code>，进行重装系统 ，同时会进入下面的界面</p>\n<p><img src=\"/img/study/bwh_kiwi_new_os_info.jpg\" alt=\"bwh_kiwi_new_os_info\"></p>\n<p>这里的<code>端口</code>和<code>服务器密码</code>需要记下来，方便以后使用ssh连接服务器使用</p>\n<p>如何进入服务器: <a href=\"/2018/01/30/study/study-centenos-ssh/\">使用SSH客户端(Termius)连接服务器</a></p>\n<p>稍等一会，刷新页面，点击左侧的<code>Main controls</code>，出现下面的界面，表示系统安装成功</p>\n<p><img src=\"/img/study/bwh_kiwi_main_new.jpg\" alt=\"bwh_kiwi_main_new\"></p>\n<p>接下来，我们要安装<code>ShadowsocksX</code>服务</p>\n<h3 id=\"ShadowsocksX服务安装\"><a href=\"#ShadowsocksX服务安装\" class=\"headerlink\" title=\"ShadowsocksX服务安装\"></a>ShadowsocksX服务安装</h3><p><strong>重要：希望自行安装shadowsocks的用户可以跳过此步，传送门:<a href=\"http://localhost:4000/2018/01/26/study/study-bwh-ss/\" target=\"_blank\" rel=\"external\">shadowsocks多用户配置</a></strong></p>\n<p>点击左侧的<code>ShadowsocksR Server</code></p>\n<p><img src=\"/img/study/bwh_kiwi_ss_install.jpg\" alt=\"bwh_kiwi_ss_install\"></p>\n<p>等待安装完成，出现下面界面，表示安装成功</p>\n<p><img src=\"/img/study/bwh_kiwi_ss_completed.jpg\" alt=\"bwh_kiwi_ss_completed\"></p>\n<p>点击<code>Go back</code>，进入详情页，拖到到页面到<code>Step 2</code>。不要关闭这个界面，后面会用到</p>\n<p><img src=\"/img/study/bwh_kiwi_ss_info.jpg\" alt=\"bwh_kiwi_ss_info\"></p>\n<p>至此，我们的ShadowsocksX服务安装完成，接下来，我们需要安装<code>ShadowsocksX</code>客户端</p>\n<h3 id=\"ShadowsocksX客户端安装\"><a href=\"#ShadowsocksX客户端安装\" class=\"headerlink\" title=\"ShadowsocksX客户端安装\"></a>ShadowsocksX客户端安装</h3><p>这里以<code>Mac OS</code>系统为例，其它平台可以参考下面文章</p>\n<h5 id=\"Mac平台\"><a href=\"#Mac平台\" class=\"headerlink\" title=\"Mac平台\"></a>Mac平台</h5><p>点击<a href=\"https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help</a></p>\n<p><img src=\"/img/study/bwh_ss_mac_os.jpg\" alt=\"bwh_ss_mac_os\"></p>\n<p>点击图中标示的链接，会进入到一个下载页，点击<code>Download</code>开始下载，下载完成后安装，安装成功后，打开<code>ShadowsocksX</code>，打开后，会在菜单出现一个<code>纸飞机图标</code>，点击它</p>\n<p><img src=\"/img/study/bwh_ss_client.jpg\" alt=\"bwh_ss_client\"></p>\n<p>因为我之前配过2个服务器，所以上面会显示2条记录。点击<code>打开服务器设定</code></p>\n<p><img src=\"/img/study/bwh_kiwi_all.jpg\" alt=\"bwh_kiwi_all\"></p>\n<p>照着填就可以了，填完点击<code>确定</code>。大功告成，可以科学上网啦！(依然上不了的，可以把客户端软件关了，再重开)</p>\n<p><img src=\"/img/study/bwh_ss_complete.jpg\" alt=\"bwh_ss_complete\"></p>\n<h5 id=\"Windows平台\"><a href=\"#Windows平台\" class=\"headerlink\" title=\"Windows平台\"></a>Windows平台</h5><p>点击<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n<p><img src=\"/img/study/bwh_ss_windows.jpg\" alt=\"bwh_ss_windows\"></p>\n<h5 id=\"其它平台\"><a href=\"#其它平台\" class=\"headerlink\" title=\"其它平台\"></a>其它平台</h5><p>地址：<a href=\"https://github.com/shadowsocks?page=1\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks?page=1</a></p>\n<p>自己慢慢找吧(^^)</p>\n<h3 id=\"VPS服务器升降\"><a href=\"#VPS服务器升降\" class=\"headerlink\" title=\"VPS服务器升降\"></a>VPS服务器升降</h3><p>还记得文章上述的这个界面吗</p>\n<p><img src=\"/img/study/bwh_home_services_detail.jpg\" alt=\"bwh_home_services_detail\"></p>\n<p>点击<code>Manage</code>，进入到服务器管理页</p>\n<p><img src=\"/img/study/bwh_service_info.jpg\" alt=\"bwh_service_info\"></p>\n<p>点击后，进入下面的界面，大家可以按需选择</p>\n<p><img src=\"/img/study/bwh_service_detail.jpg\" alt=\"bwh_service_detail\"></p>\n","excerpt":"<p>（温馨提示：本文图片较多，请在WIFI情况下阅读）</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在天朝，因为qian的原因，很多外网是访问不了的。身为程序员，很多时候是需要访问<code>google</code>进行问题搜索，这时候就需要fan qiang进行科学上网了。</p>\n<p>可能有相当一部分人是买的VPN进行科学上网，但VPN一般比较贵，也不稳定，不如自己搭建VPS（相当于自己买一台海外服务器），一方面可以可以学习一下Linux，一方面还可以科学上网，还比VPN便宜不少。</p>","more":"<h3 id=\"VPS购买\"><a href=\"#VPS购买\" class=\"headerlink\" title=\"VPS购买\"></a>VPS购买</h3><p>其实VPS搭建还是比较简单的，本文使用搬瓦工(Bandwagon)，搬瓦工对新手比较友好，而且官方支持ShadowsocksX，最重要的是支持<code>支付宝</code>，省去了很多麻烦，官网：<a href=\"https://bwh1.net\">https://bwh1.net</a></p>\n<p>首选进入官网</p>\n<p><img src=\"/img/study/bwh_home.jpg\" alt=\"bwh_home\"></p>\n<p>点击<code>VPS Hosting</code>，进入到VPS Hosting页面，我们先选择最便宜的一款，购买完成后可以根据自身情况进行升降服务器，后续会介绍如何升降。KVM是新的架构，OVZ是老的架构，大家要选Order KVM，不要选错了。</p>\n<blockquote>\n<p>大家不知道选哪个的话，可以网上搜一搜，推荐个地方：</p>\n<p><a href=\"http://banwagong.cn/gonglue.html\">http://banwagong.cn/gonglue.html</a></p>\n</blockquote>\n<p><img src=\"/img/study/bwh_host.jpg\" alt=\"bwh_host\"></p>\n<p>点击<code>Order KVM</code>，进入到详情页面，因为<code>搬瓦工</code>的VPS是经常变换的，可能你看到的页面和我的不太一样，不过没关系，下面我们会说到。</p>\n<p><img src=\"/img/study/bwh_order_cycle.jpg\" alt=\"bwh_order_cycle\"></p>\n<p>因为我选的这个VPS，只支持年付，所有<code>Billing CyCle</code>只有一个选项。你的VPS可能是下面的这种情况，我这里的截图是20G VPS的，因为10G VPS的只支持年付，没法截下面的图</p>\n<p><img src=\"/img/study/bwh_order_cycle_more.jpg\" alt=\"bwh_order_cycle_more\"></p>\n<blockquote>\n<p>注意：</p>\n<p>Monthly 表示月付，就是使用一个月</p>\n<p>Quarterly 表示季付，就是使用三个月</p>\n<p>Semi-Annually 表示半年</p>\n<p>Annually 表示一年</p>\n</blockquote>\n<p>建议大家选择一年，相对便宜，选完<code>Billing Cycle</code>，接下来选机房</p>\n<p><img src=\"/img/study/bwh_order_location.jpg\" alt=\"bwh_order_location\"></p>\n<p>这里我们选择洛杉矶机机房，上面的第二项(后续可以在控制面板切换)，选完之后点击下方的<code>Add to Cart</code>，进入到<code>订单汇总页面</code></p>\n<p><img src=\"/img/study/bwh_order_detail.jpg\" alt=\"bwh_order_detail\"></p>\n<p>这里我们使用<code>BWH1ZBPVK</code>这个优惠码(随时失效，大家可以百度搜一搜优惠码)，输入完优惠码后，点击右边的<code>Validate Code&gt;&gt;</code>，出现下面的界面，表示优惠码有效</p>\n<p><img src=\"/img/study/bwh_order_detail_pc.jpg\" alt=\"bwh_order_detail_pc\"></p>\n<p>确认没问题后，点击<code>Checkout</code>去结账</p>\n<p><img src=\"/img/study/bwh_order_complete.jpg\" alt=\"bwh_order_complete\"></p>\n<p>如果有账号的话，点击<code>Click me to login</code>进行登录。没有的话，填写下面的项，后面标了<code>红色</code>字体的尽量都填上，最好真实的，防止被误认为<code>订单欺诈</code></p>\n<blockquote>\n<p>重要提示：不要填中文，使用拼音代替。比如：姓名叫李白，LastName填<code>li</code>，FirstName填<code>bai</code></p>\n<p>，还有State/Region一栏，要先选择Country，这样State/Region才会变</p>\n</blockquote>\n<p>输入完成之后，点击<code>Update</code>。</p>\n<p>接下来选择支付方式，我们这里选择<code>支付宝</code></p>\n<p><img src=\"/img/study/bwh_order_pay.jpg\" alt=\"bwh_order_pay\"></p>\n<p>点击<code>Complete Order</code>，会进入到<code>支付宝</code>支付界面</p>\n<p><img src=\"/img/study/bwh_order_pay_complete.jpg\" alt=\"bwh_order_pay_complete\"></p>\n<p>扫描完成支付(不要扫图中的码哦)，支付成功后会收到邮件通知，里面会有你的服务器ip地址等信息。</p>\n<h3 id=\"VPS服务器搭建\"><a href=\"#VPS服务器搭建\" class=\"headerlink\" title=\"VPS服务器搭建\"></a>VPS服务器搭建</h3><p>通过上面的步骤，我们已经完成了VPS的购买，接下来我们开始搭建自己的服务器</p>\n<p>我们先回到首页，点击<code>Client Area</code>，<code>Client Area</code>会出现在下面2个地方</p>\n<p><img src=\"/img/study/bwh_home_client_area_top.jpg\" alt=\"bwh_home_client_area_top\"></p>\n<p><img src=\"/img/study/bwh_home_client_ares.jpg\" alt=\"bwh_home_client_ares\"></p>\n<p>点击后进入到下面的界面</p>\n<p><img src=\"/img/study/bwh_home_services.jpg\" alt=\"bwh_home_services\"></p>\n<p>依次点击<code>Services</code> -&gt; <code>My Services</code>，进入到下面的界面</p>\n<p><img src=\"/img/study/bwh_home_services_detail.jpg\" alt=\"bwh_home_services_detail\"></p>\n<p>这里我们点击<code>KiwiVM Control Panel</code>进入到服务器控制面版。进入到服务器控制面版后，先把服务停掉(待会要重装系统)。</p>\n<p><img src=\"/img/study/bwh_kiwi_main.jpg\" alt=\"bwh_kiwi_main\"></p>\n<p>搬瓦工提供无限次重装系统，这里我们先把服务停掉，重装一下系统。停掉服务后，点击左侧的<code>ShadowsocksR Server</code>，进入到<code>ShadowsocksR Server</code>界面，查看一下支持的<code>系统版本</code></p>\n<p><img src=\"/img/study/bwh_kiwi_ss.jpg\" alt=\"bwh_kiwi_ss\"></p>\n<p>从图中，我们可以看过，<code>ShadowsocksR Server</code>只支持<code>Centos 6 (32 or 64 bit)</code>的系统 ，所以我们需要重装一个<code>Centos 6 (32 or 64 bit)</code>的系统。</p>\n<p>点击左边的<code>Install new OS</code>，选择<code>centos-6-x86_64-bbr</code>，进行重装系统</p>\n<p><strong>重要：如果希望自行安装shadowsocks(可以配置单、多用户)，可以选择<code>centos-7-x86_64-bbr</code>，建议大家选择自行安装(<a href=\"http://localhost:4000/2018/01/26/study/study-bwh-ss/\">shadowsocks多用户配置</a>)，不喜欢折腾的，可以继续往下看</strong></p>\n<p><img src=\"/img/study/bwh_kiwi_new_os.jpg\" alt=\"bwh_kiwi_new_os\"></p>\n<p>点击<code>reload</code>，进行重装系统 ，同时会进入下面的界面</p>\n<p><img src=\"/img/study/bwh_kiwi_new_os_info.jpg\" alt=\"bwh_kiwi_new_os_info\"></p>\n<p>这里的<code>端口</code>和<code>服务器密码</code>需要记下来，方便以后使用ssh连接服务器使用</p>\n<p>如何进入服务器: <a href=\"/2018/01/30/study/study-centenos-ssh/\">使用SSH客户端(Termius)连接服务器</a></p>\n<p>稍等一会，刷新页面，点击左侧的<code>Main controls</code>，出现下面的界面，表示系统安装成功</p>\n<p><img src=\"/img/study/bwh_kiwi_main_new.jpg\" alt=\"bwh_kiwi_main_new\"></p>\n<p>接下来，我们要安装<code>ShadowsocksX</code>服务</p>\n<h3 id=\"ShadowsocksX服务安装\"><a href=\"#ShadowsocksX服务安装\" class=\"headerlink\" title=\"ShadowsocksX服务安装\"></a>ShadowsocksX服务安装</h3><p><strong>重要：希望自行安装shadowsocks的用户可以跳过此步，传送门:<a href=\"http://localhost:4000/2018/01/26/study/study-bwh-ss/\">shadowsocks多用户配置</a></strong></p>\n<p>点击左侧的<code>ShadowsocksR Server</code></p>\n<p><img src=\"/img/study/bwh_kiwi_ss_install.jpg\" alt=\"bwh_kiwi_ss_install\"></p>\n<p>等待安装完成，出现下面界面，表示安装成功</p>\n<p><img src=\"/img/study/bwh_kiwi_ss_completed.jpg\" alt=\"bwh_kiwi_ss_completed\"></p>\n<p>点击<code>Go back</code>，进入详情页，拖到到页面到<code>Step 2</code>。不要关闭这个界面，后面会用到</p>\n<p><img src=\"/img/study/bwh_kiwi_ss_info.jpg\" alt=\"bwh_kiwi_ss_info\"></p>\n<p>至此，我们的ShadowsocksX服务安装完成，接下来，我们需要安装<code>ShadowsocksX</code>客户端</p>\n<h3 id=\"ShadowsocksX客户端安装\"><a href=\"#ShadowsocksX客户端安装\" class=\"headerlink\" title=\"ShadowsocksX客户端安装\"></a>ShadowsocksX客户端安装</h3><p>这里以<code>Mac OS</code>系统为例，其它平台可以参考下面文章</p>\n<h5 id=\"Mac平台\"><a href=\"#Mac平台\" class=\"headerlink\" title=\"Mac平台\"></a>Mac平台</h5><p>点击<a href=\"https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help\">https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help</a></p>\n<p><img src=\"/img/study/bwh_ss_mac_os.jpg\" alt=\"bwh_ss_mac_os\"></p>\n<p>点击图中标示的链接，会进入到一个下载页，点击<code>Download</code>开始下载，下载完成后安装，安装成功后，打开<code>ShadowsocksX</code>，打开后，会在菜单出现一个<code>纸飞机图标</code>，点击它</p>\n<p><img src=\"/img/study/bwh_ss_client.jpg\" alt=\"bwh_ss_client\"></p>\n<p>因为我之前配过2个服务器，所以上面会显示2条记录。点击<code>打开服务器设定</code></p>\n<p><img src=\"/img/study/bwh_kiwi_all.jpg\" alt=\"bwh_kiwi_all\"></p>\n<p>照着填就可以了，填完点击<code>确定</code>。大功告成，可以科学上网啦！(依然上不了的，可以把客户端软件关了，再重开)</p>\n<p><img src=\"/img/study/bwh_ss_complete.jpg\" alt=\"bwh_ss_complete\"></p>\n<h5 id=\"Windows平台\"><a href=\"#Windows平台\" class=\"headerlink\" title=\"Windows平台\"></a>Windows平台</h5><p>点击<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n<p><img src=\"/img/study/bwh_ss_windows.jpg\" alt=\"bwh_ss_windows\"></p>\n<h5 id=\"其它平台\"><a href=\"#其它平台\" class=\"headerlink\" title=\"其它平台\"></a>其它平台</h5><p>地址：<a href=\"https://github.com/shadowsocks?page=1\">https://github.com/shadowsocks?page=1</a></p>\n<p>自己慢慢找吧(^^)</p>\n<h3 id=\"VPS服务器升降\"><a href=\"#VPS服务器升降\" class=\"headerlink\" title=\"VPS服务器升降\"></a>VPS服务器升降</h3><p>还记得文章上述的这个界面吗</p>\n<p><img src=\"/img/study/bwh_home_services_detail.jpg\" alt=\"bwh_home_services_detail\"></p>\n<p>点击<code>Manage</code>，进入到服务器管理页</p>\n<p><img src=\"/img/study/bwh_service_info.jpg\" alt=\"bwh_service_info\"></p>\n<p>点击后，进入下面的界面，大家可以按需选择</p>\n<p><img src=\"/img/study/bwh_service_detail.jpg\" alt=\"bwh_service_detail\"></p>"},{"title":"使用CentOS7安装配置Jenkins","date":"2018-01-29T03:51:08.000Z","_content":"\n### 安装Java\n\n`Jenkins`依赖`Java`，如果你的系统没有安装的话，需要先安装`Java`，已安装的话，可以忽略。使用以下命令\n\n安装`Java`\n\n```python\nyum install java\n```\n\n查看`Java`版本\n\n```\njava -version\n```\n\n<!-- More -->\n\n如果显示以下项，表示已安装\n\n```\nopenjdk version \"1.8.0_161\"\nOpenJDK Runtime Environment (build 1.8.0_161-b14)\nOpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)\n```\n\n如果你显示的是类似以下的界面\n\n```python\njava version \"1.5.0\" \ngij (GNU libgcj) version 4.3.3\n```\n\n你需要先删除`Java`，重新安装`OpenJDK`，因为CentOS的系统，如果`java`版本是`GCJ`的版本，会导致Jenkins不工作(https://issues.jenkins-ci.org/browse/JENKINS-743)\n\n##### 使用如下命令\n\n1. **先删除旧的`java`**\n\n```python\nyum remove java\n```\n\n2. **查看`OpenJDK`版本**\n\n```\nyum search openjdk\n```\n\n显示如下界面\n\n```python\n...\njava-1.8.0-openjdk.i686 : OpenJDK Runtime Environment\njava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment\njava-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connector\njava-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector\n...\n```\n\n3. **安装`OpenJDK`**\n\n```python\nyum install java-1.8.0-openJDK\n```\n\n### 安装Git\n\n如果你需要使用`git`，使用以下命令进行安装(-y表示所有安装时的确认项都选y)\n\n```\nyum install -y git\n```\n\n### 安装Jenkins\n\n首先我们进入到`Jenkins`官网，传送门：https://jenkins.io/download/\n\n这时我们会看到两栏，左边的`Long-term Support (LTS)`是12周发布一版，右边的`Weekly`是每周发布一个版本。\n\n这里我们以`Weekly`为例进行安装，拖动页面找到你自己的系统并点击\n\nCentOS传送门：https://pkg.jenkins.io/redhat/\n\n在这个界面我们可以看到官网教我们安装的步骤，简单说明一下\n\n##### 第一步，输入以下命令\n\n**拉取`Jenkins`库**\n\n```python\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n```\n\n> 注意文章所说的2点\n>\n> 1.如果您之前从Jenkins中导入了密钥，那么“rpm—import”将会失败，因为您已经有了一个密钥。请忽略这一点，继续前进。\n>\n> 2.您需要显式地安装Java运行时环境，因为Oracle的Java rpm是不正确的，并且无法注册为提供Java依赖项。因此，在Java中添加显式的依赖项要求将强制安装OpenJDK JVM。(以述步骤已安装了`java` ，忽略此条)\n\n你可能会出现以下现象\n\n```python\n[root@host ~]# sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo: wget: command not found\n```\n\n这里，你需要先安装wget\n\n```python\nyum install -y wget\n```\n\n**安装`Jenkins`包**\n\n```python\nyum install -y jenkins\n```\n\n**更新`Jenkins`**\n\n```python\nyum update jenkins\n```\n\n**查看`Jenkins`端口**\n\n```python\ncat /etc/sysconfig/jenkins | more\n```\n\n**查找`JENKINS_PORT`，一般为`\"8080\"`，一屏显示不下的话，按回车查看，按`control+c`退出**\n\n```python\nJENKINS_PORT=\"8080\"\n```\n\n**开启`Jenkins`服务**\n\n```python\nservice jenkins start\n```\n\n浏览器访问: `IP地址:8080`\n\n**关闭`Jenkins`服务**\n\n```python\nservice jenkins stop\n```\n\n### 配置`Jenkin`\n\n首先使用浏览器打开`Jenkin`(ip:8080)，如果你是第一次安装，会出现以下界面\n\n![centenos_jenkins_first](/img/study/jenkins/centenos_jenkins_first.jpg)\n\n我们去图中的地址去查看密码\n\n```\ncat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n选中密码，按`command+c`复制，然后`command+v`到浏览器`管理员密码`那一栏，点击继续，会出现\n\n![jenkins_install_plugin_first](/img/study/jenkins/jenkins_install_plugin_first.jpg)\n\n我们点击左边的`安装推荐的插件`，等待安装完成，完成后会出现\n\n![jenkins_install_setting](/img/study/jenkins/jenkins_install_setting.jpg)\n\n设置完你的管理员用户，点`保存并完成`进入下个界面，点`准备就绪`，进入下个界面\n\n![jenkins_install_complete](/img/study/jenkins/jenkins_install_complete.jpg)\n\n\n\n**OK，Jenkins安装配置完成！**\n\n### 更多操作\n\n传送门：https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions","source":"_posts/study/study-centenos-jenkins.md","raw":"---\ntitle: 使用CentOS7安装配置Jenkins\ndate: 2018-01-29 11:51:08\ntags: study\n---\n\n### 安装Java\n\n`Jenkins`依赖`Java`，如果你的系统没有安装的话，需要先安装`Java`，已安装的话，可以忽略。使用以下命令\n\n安装`Java`\n\n```python\nyum install java\n```\n\n查看`Java`版本\n\n```\njava -version\n```\n\n<!-- More -->\n\n如果显示以下项，表示已安装\n\n```\nopenjdk version \"1.8.0_161\"\nOpenJDK Runtime Environment (build 1.8.0_161-b14)\nOpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)\n```\n\n如果你显示的是类似以下的界面\n\n```python\njava version \"1.5.0\" \ngij (GNU libgcj) version 4.3.3\n```\n\n你需要先删除`Java`，重新安装`OpenJDK`，因为CentOS的系统，如果`java`版本是`GCJ`的版本，会导致Jenkins不工作(https://issues.jenkins-ci.org/browse/JENKINS-743)\n\n##### 使用如下命令\n\n1. **先删除旧的`java`**\n\n```python\nyum remove java\n```\n\n2. **查看`OpenJDK`版本**\n\n```\nyum search openjdk\n```\n\n显示如下界面\n\n```python\n...\njava-1.8.0-openjdk.i686 : OpenJDK Runtime Environment\njava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment\njava-1.8.0-openjdk-accessibility.i686 : OpenJDK accessibility connector\njava-1.8.0-openjdk-accessibility.x86_64 : OpenJDK accessibility connector\n...\n```\n\n3. **安装`OpenJDK`**\n\n```python\nyum install java-1.8.0-openJDK\n```\n\n### 安装Git\n\n如果你需要使用`git`，使用以下命令进行安装(-y表示所有安装时的确认项都选y)\n\n```\nyum install -y git\n```\n\n### 安装Jenkins\n\n首先我们进入到`Jenkins`官网，传送门：https://jenkins.io/download/\n\n这时我们会看到两栏，左边的`Long-term Support (LTS)`是12周发布一版，右边的`Weekly`是每周发布一个版本。\n\n这里我们以`Weekly`为例进行安装，拖动页面找到你自己的系统并点击\n\nCentOS传送门：https://pkg.jenkins.io/redhat/\n\n在这个界面我们可以看到官网教我们安装的步骤，简单说明一下\n\n##### 第一步，输入以下命令\n\n**拉取`Jenkins`库**\n\n```python\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n```\n\n> 注意文章所说的2点\n>\n> 1.如果您之前从Jenkins中导入了密钥，那么“rpm—import”将会失败，因为您已经有了一个密钥。请忽略这一点，继续前进。\n>\n> 2.您需要显式地安装Java运行时环境，因为Oracle的Java rpm是不正确的，并且无法注册为提供Java依赖项。因此，在Java中添加显式的依赖项要求将强制安装OpenJDK JVM。(以述步骤已安装了`java` ，忽略此条)\n\n你可能会出现以下现象\n\n```python\n[root@host ~]# sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo: wget: command not found\n```\n\n这里，你需要先安装wget\n\n```python\nyum install -y wget\n```\n\n**安装`Jenkins`包**\n\n```python\nyum install -y jenkins\n```\n\n**更新`Jenkins`**\n\n```python\nyum update jenkins\n```\n\n**查看`Jenkins`端口**\n\n```python\ncat /etc/sysconfig/jenkins | more\n```\n\n**查找`JENKINS_PORT`，一般为`\"8080\"`，一屏显示不下的话，按回车查看，按`control+c`退出**\n\n```python\nJENKINS_PORT=\"8080\"\n```\n\n**开启`Jenkins`服务**\n\n```python\nservice jenkins start\n```\n\n浏览器访问: `IP地址:8080`\n\n**关闭`Jenkins`服务**\n\n```python\nservice jenkins stop\n```\n\n### 配置`Jenkin`\n\n首先使用浏览器打开`Jenkin`(ip:8080)，如果你是第一次安装，会出现以下界面\n\n![centenos_jenkins_first](/img/study/jenkins/centenos_jenkins_first.jpg)\n\n我们去图中的地址去查看密码\n\n```\ncat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n选中密码，按`command+c`复制，然后`command+v`到浏览器`管理员密码`那一栏，点击继续，会出现\n\n![jenkins_install_plugin_first](/img/study/jenkins/jenkins_install_plugin_first.jpg)\n\n我们点击左边的`安装推荐的插件`，等待安装完成，完成后会出现\n\n![jenkins_install_setting](/img/study/jenkins/jenkins_install_setting.jpg)\n\n设置完你的管理员用户，点`保存并完成`进入下个界面，点`准备就绪`，进入下个界面\n\n![jenkins_install_complete](/img/study/jenkins/jenkins_install_complete.jpg)\n\n\n\n**OK，Jenkins安装配置完成！**\n\n### 更多操作\n\n传送门：https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions","slug":"study/study-centenos-jenkins","published":1,"updated":"2018-01-30T07:16:33.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6v2002afq9mz5fpv683","content":"<h3 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h3><p><code>Jenkins</code>依赖<code>Java</code>，如果你的系统没有安装的话，需要先安装<code>Java</code>，已安装的话，可以忽略。使用以下命令</p>\n<p>安装<code>Java</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java</div></pre></td></tr></table></figure>\n<p>查看<code>Java</code>版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>如果显示以下项，表示已安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">openjdk version &quot;1.8.0_161&quot;</div><div class=\"line\">OpenJDK Runtime Environment (build 1.8.0_161-b14)</div><div class=\"line\">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)</div></pre></td></tr></table></figure>\n<p>如果你显示的是类似以下的界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">java version <span class=\"string\">\"1.5.0\"</span> </div><div class=\"line\">gij (GNU libgcj) version <span class=\"number\">4.3</span><span class=\"number\">.3</span></div></pre></td></tr></table></figure>\n<p>你需要先删除<code>Java</code>，重新安装<code>OpenJDK</code>，因为CentOS的系统，如果<code>java</code>版本是<code>GCJ</code>的版本，会导致Jenkins不工作(<a href=\"https://issues.jenkins-ci.org/browse/JENKINS-743\" target=\"_blank\" rel=\"external\">https://issues.jenkins-ci.org/browse/JENKINS-743</a>)</p>\n<h5 id=\"使用如下命令\"><a href=\"#使用如下命令\" class=\"headerlink\" title=\"使用如下命令\"></a>使用如下命令</h5><ol>\n<li><strong>先删除旧的<code>java</code></strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove java</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>查看<code>OpenJDK</code>版本</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum search openjdk</div></pre></td></tr></table></figure>\n<p>显示如下界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk.i686 : OpenJDK Runtime Environment</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk.x86_64 : OpenJDK Runtime Environment</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk-accessibility.i686 : OpenJDK accessibility connector</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>安装<code>OpenJDK</code></strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openJDK</div></pre></td></tr></table></figure>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>如果你需要使用<code>git</code>，使用以下命令进行安装(-y表示所有安装时的确认项都选y)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y git</div></pre></td></tr></table></figure>\n<h3 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h3><p>首先我们进入到<code>Jenkins</code>官网，传送门：<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"external\">https://jenkins.io/download/</a></p>\n<p>这时我们会看到两栏，左边的<code>Long-term Support (LTS)</code>是12周发布一版，右边的<code>Weekly</code>是每周发布一个版本。</p>\n<p>这里我们以<code>Weekly</code>为例进行安装，拖动页面找到你自己的系统并点击</p>\n<p>CentOS传送门：<a href=\"https://pkg.jenkins.io/redhat/\" target=\"_blank\" rel=\"external\">https://pkg.jenkins.io/redhat/</a></p>\n<p>在这个界面我们可以看到官网教我们安装的步骤，简单说明一下</p>\n<h5 id=\"第一步，输入以下命令\"><a href=\"#第一步，输入以下命令\" class=\"headerlink\" title=\"第一步，输入以下命令\"></a>第一步，输入以下命令</h5><p><strong>拉取<code>Jenkins</code>库</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</div><div class=\"line\">sudo rpm --<span class=\"keyword\">import</span> https://pkg.jenkins.io/redhat/jenkins.io.key</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意文章所说的2点</p>\n<p>1.如果您之前从Jenkins中导入了密钥，那么“rpm—import”将会失败，因为您已经有了一个密钥。请忽略这一点，继续前进。</p>\n<p>2.您需要显式地安装Java运行时环境，因为Oracle的Java rpm是不正确的，并且无法注册为提供Java依赖项。因此，在Java中添加显式的依赖项要求将强制安装OpenJDK JVM。(以述步骤已安装了<code>java</code> ，忽略此条)</p>\n</blockquote>\n<p>你可能会出现以下现象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@host ~]<span class=\"comment\"># sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span></div><div class=\"line\">sudo: wget: command <span class=\"keyword\">not</span> found</div></pre></td></tr></table></figure>\n<p>这里，你需要先安装wget</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y wget</div></pre></td></tr></table></figure>\n<p><strong>安装<code>Jenkins</code>包</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y jenkins</div></pre></td></tr></table></figure>\n<p><strong>更新<code>Jenkins</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update jenkins</div></pre></td></tr></table></figure>\n<p><strong>查看<code>Jenkins</code>端口</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/jenkins | more</div></pre></td></tr></table></figure>\n<p><strong>查找<code>JENKINS_PORT</code>，一般为<code>&quot;8080&quot;</code>，一屏显示不下的话，按回车查看，按<code>control+c</code>退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JENKINS_PORT=<span class=\"string\">\"8080\"</span></div></pre></td></tr></table></figure>\n<p><strong>开启<code>Jenkins</code>服务</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service jenkins start</div></pre></td></tr></table></figure>\n<p>浏览器访问: <code>IP地址:8080</code></p>\n<p><strong>关闭<code>Jenkins</code>服务</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service jenkins stop</div></pre></td></tr></table></figure>\n<h3 id=\"配置Jenkin\"><a href=\"#配置Jenkin\" class=\"headerlink\" title=\"配置Jenkin\"></a>配置<code>Jenkin</code></h3><p>首先使用浏览器打开<code>Jenkin</code>(ip:8080)，如果你是第一次安装，会出现以下界面</p>\n<p><img src=\"/img/study/jenkins/centenos_jenkins_first.jpg\" alt=\"centenos_jenkins_first\"></p>\n<p>我们去图中的地址去查看密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/lib/jenkins/secrets/initialAdminPassword</div></pre></td></tr></table></figure>\n<p>选中密码，按<code>command+c</code>复制，然后<code>command+v</code>到浏览器<code>管理员密码</code>那一栏，点击继续，会出现</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_plugin_first.jpg\" alt=\"jenkins_install_plugin_first\"></p>\n<p>我们点击左边的<code>安装推荐的插件</code>，等待安装完成，完成后会出现</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_setting.jpg\" alt=\"jenkins_install_setting\"></p>\n<p>设置完你的管理员用户，点<code>保存并完成</code>进入下个界面，点<code>准备就绪</code>，进入下个界面</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_complete.jpg\" alt=\"jenkins_install_complete\"></p>\n<p><strong>OK，Jenkins安装配置完成！</strong></p>\n<h3 id=\"更多操作\"><a href=\"#更多操作\" class=\"headerlink\" title=\"更多操作\"></a>更多操作</h3><p>传送门：<a href=\"https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions\" target=\"_blank\" rel=\"external\">https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions</a></p>\n","excerpt":"<h3 id=\"安装Java\"><a href=\"#安装Java\" class=\"headerlink\" title=\"安装Java\"></a>安装Java</h3><p><code>Jenkins</code>依赖<code>Java</code>，如果你的系统没有安装的话，需要先安装<code>Java</code>，已安装的话，可以忽略。使用以下命令</p>\n<p>安装<code>Java</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java</div></pre></td></tr></table></figure>\n<p>查看<code>Java</code>版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure>","more":"<p>如果显示以下项，表示已安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">openjdk version &quot;1.8.0_161&quot;</div><div class=\"line\">OpenJDK Runtime Environment (build 1.8.0_161-b14)</div><div class=\"line\">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)</div></pre></td></tr></table></figure>\n<p>如果你显示的是类似以下的界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">java version <span class=\"string\">\"1.5.0\"</span> </div><div class=\"line\">gij (GNU libgcj) version <span class=\"number\">4.3</span><span class=\"number\">.3</span></div></pre></td></tr></table></figure>\n<p>你需要先删除<code>Java</code>，重新安装<code>OpenJDK</code>，因为CentOS的系统，如果<code>java</code>版本是<code>GCJ</code>的版本，会导致Jenkins不工作(<a href=\"https://issues.jenkins-ci.org/browse/JENKINS-743\">https://issues.jenkins-ci.org/browse/JENKINS-743</a>)</p>\n<h5 id=\"使用如下命令\"><a href=\"#使用如下命令\" class=\"headerlink\" title=\"使用如下命令\"></a>使用如下命令</h5><ol>\n<li><strong>先删除旧的<code>java</code></strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove java</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>查看<code>OpenJDK</code>版本</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum search openjdk</div></pre></td></tr></table></figure>\n<p>显示如下界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk.i686 : OpenJDK Runtime Environment</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk.x86_64 : OpenJDK Runtime Environment</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk-accessibility.i686 : OpenJDK accessibility connector</div><div class=\"line\">java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openjdk-accessibility.x86_64 : OpenJDK accessibility connector</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>安装<code>OpenJDK</code></strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java<span class=\"number\">-1.8</span><span class=\"number\">.0</span>-openJDK</div></pre></td></tr></table></figure>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>如果你需要使用<code>git</code>，使用以下命令进行安装(-y表示所有安装时的确认项都选y)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y git</div></pre></td></tr></table></figure>\n<h3 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h3><p>首先我们进入到<code>Jenkins</code>官网，传送门：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p>这时我们会看到两栏，左边的<code>Long-term Support (LTS)</code>是12周发布一版，右边的<code>Weekly</code>是每周发布一个版本。</p>\n<p>这里我们以<code>Weekly</code>为例进行安装，拖动页面找到你自己的系统并点击</p>\n<p>CentOS传送门：<a href=\"https://pkg.jenkins.io/redhat/\">https://pkg.jenkins.io/redhat/</a></p>\n<p>在这个界面我们可以看到官网教我们安装的步骤，简单说明一下</p>\n<h5 id=\"第一步，输入以下命令\"><a href=\"#第一步，输入以下命令\" class=\"headerlink\" title=\"第一步，输入以下命令\"></a>第一步，输入以下命令</h5><p><strong>拉取<code>Jenkins</code>库</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</div><div class=\"line\">sudo rpm --<span class=\"keyword\">import</span> https://pkg.jenkins.io/redhat/jenkins.io.key</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意文章所说的2点</p>\n<p>1.如果您之前从Jenkins中导入了密钥，那么“rpm—import”将会失败，因为您已经有了一个密钥。请忽略这一点，继续前进。</p>\n<p>2.您需要显式地安装Java运行时环境，因为Oracle的Java rpm是不正确的，并且无法注册为提供Java依赖项。因此，在Java中添加显式的依赖项要求将强制安装OpenJDK JVM。(以述步骤已安装了<code>java</code> ，忽略此条)</p>\n</blockquote>\n<p>你可能会出现以下现象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@host ~]<span class=\"comment\"># sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span></div><div class=\"line\">sudo: wget: command <span class=\"keyword\">not</span> found</div></pre></td></tr></table></figure>\n<p>这里，你需要先安装wget</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y wget</div></pre></td></tr></table></figure>\n<p><strong>安装<code>Jenkins</code>包</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y jenkins</div></pre></td></tr></table></figure>\n<p><strong>更新<code>Jenkins</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update jenkins</div></pre></td></tr></table></figure>\n<p><strong>查看<code>Jenkins</code>端口</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/jenkins | more</div></pre></td></tr></table></figure>\n<p><strong>查找<code>JENKINS_PORT</code>，一般为<code>&quot;8080&quot;</code>，一屏显示不下的话，按回车查看，按<code>control+c</code>退出</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JENKINS_PORT=<span class=\"string\">\"8080\"</span></div></pre></td></tr></table></figure>\n<p><strong>开启<code>Jenkins</code>服务</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service jenkins start</div></pre></td></tr></table></figure>\n<p>浏览器访问: <code>IP地址:8080</code></p>\n<p><strong>关闭<code>Jenkins</code>服务</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service jenkins stop</div></pre></td></tr></table></figure>\n<h3 id=\"配置Jenkin\"><a href=\"#配置Jenkin\" class=\"headerlink\" title=\"配置Jenkin\"></a>配置<code>Jenkin</code></h3><p>首先使用浏览器打开<code>Jenkin</code>(ip:8080)，如果你是第一次安装，会出现以下界面</p>\n<p><img src=\"/img/study/jenkins/centenos_jenkins_first.jpg\" alt=\"centenos_jenkins_first\"></p>\n<p>我们去图中的地址去查看密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/lib/jenkins/secrets/initialAdminPassword</div></pre></td></tr></table></figure>\n<p>选中密码，按<code>command+c</code>复制，然后<code>command+v</code>到浏览器<code>管理员密码</code>那一栏，点击继续，会出现</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_plugin_first.jpg\" alt=\"jenkins_install_plugin_first\"></p>\n<p>我们点击左边的<code>安装推荐的插件</code>，等待安装完成，完成后会出现</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_setting.jpg\" alt=\"jenkins_install_setting\"></p>\n<p>设置完你的管理员用户，点<code>保存并完成</code>进入下个界面，点<code>准备就绪</code>，进入下个界面</p>\n<p><img src=\"/img/study/jenkins/jenkins_install_complete.jpg\" alt=\"jenkins_install_complete\"></p>\n<p><strong>OK，Jenkins安装配置完成！</strong></p>\n<h3 id=\"更多操作\"><a href=\"#更多操作\" class=\"headerlink\" title=\"更多操作\"></a>更多操作</h3><p>传送门：<a href=\"https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions\">https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions</a></p>"},{"title":"使用SSH客户端(Termius)连接服务器","date":"2018-01-30T06:20:34.000Z","_content":"\n### 前言\n\n之前一篇文章，我们讲了[使用搬瓦工+ShadowsocksX进行科学上网](/2018/01/25/study/study-bwh/)，我们买的是远端服务器，没有用户界面的，只能通过命令行去操作我们的系统，那么如何进入我们的服务器呢\n\n<!-- More -->\n\n### SSH连接服务器\n\n**有二种方式：**\n\n**第一种**\n\n点击搬瓦工的`KiwiVM Control Panel`，进入到服务器控制面板，点击左侧的`Roo shell - basic`进入服务器\n\n![bwh_kiwivm_command](/img/study/command/bwh_kiwivm_command.jpg)\n\n**第二种**\n\n如果嫌每次都要从浏览器进入比较麻烦，可以选择使用`SSH`连接我们的服务器\n\n先下载`ssh`客户端：http://www.termius.com\n\n下载完成后打开\n\n![termius_connect](/img/study/command/termius_connect.jpg)\n\n1. 界面上看到`ssh user@hostname -p port`这行字没，你可以直接使用下面的方式进行连接\n\n```python\nssh root@170.1.2.3 -p 8388\n```\n\n> hostname: 这里我写的是170.1.2.3，你需要填写你的服务器ip\n>\n> port: 同理，你需要填写你的服务器端口\n\n点击`connect`后，会弹出框，要你输入服务器密码，输入正确后进入服务器\n\n2. 或者你可以点击右下角的`+ New Host`，输入你的配置信息，点击保存开始连接\n\n> Address：服务器的ip地址，类似这样: 170.1.2.3\n>\n> Port: 服务器的端口，类似这样: 8388\n>\n> Username: 这里填`root`\n>\n> Password：这里为你安装服务器时的密码，就是之前你使用搬瓦工重装系统后的服务器密码\n\n**如果你忘记了服务器密码怎么办，没有关系，从下面步骤重新获取**\n\n进入到搬瓦工服务器控制面板，先到`Main controls`点击`stop`停掉你的服务器，再点击左侧的`Root password modification`从新获取，获取完成后，别忘了到`Main controls`点击`start`打开你的服务器","source":"_posts/study/study-centenos-ssh.md","raw":"---\ntitle: 使用SSH客户端(Termius)连接服务器\ndate: 2018-01-30 14:20:34\ntags: study\n---\n\n### 前言\n\n之前一篇文章，我们讲了[使用搬瓦工+ShadowsocksX进行科学上网](/2018/01/25/study/study-bwh/)，我们买的是远端服务器，没有用户界面的，只能通过命令行去操作我们的系统，那么如何进入我们的服务器呢\n\n<!-- More -->\n\n### SSH连接服务器\n\n**有二种方式：**\n\n**第一种**\n\n点击搬瓦工的`KiwiVM Control Panel`，进入到服务器控制面板，点击左侧的`Roo shell - basic`进入服务器\n\n![bwh_kiwivm_command](/img/study/command/bwh_kiwivm_command.jpg)\n\n**第二种**\n\n如果嫌每次都要从浏览器进入比较麻烦，可以选择使用`SSH`连接我们的服务器\n\n先下载`ssh`客户端：http://www.termius.com\n\n下载完成后打开\n\n![termius_connect](/img/study/command/termius_connect.jpg)\n\n1. 界面上看到`ssh user@hostname -p port`这行字没，你可以直接使用下面的方式进行连接\n\n```python\nssh root@170.1.2.3 -p 8388\n```\n\n> hostname: 这里我写的是170.1.2.3，你需要填写你的服务器ip\n>\n> port: 同理，你需要填写你的服务器端口\n\n点击`connect`后，会弹出框，要你输入服务器密码，输入正确后进入服务器\n\n2. 或者你可以点击右下角的`+ New Host`，输入你的配置信息，点击保存开始连接\n\n> Address：服务器的ip地址，类似这样: 170.1.2.3\n>\n> Port: 服务器的端口，类似这样: 8388\n>\n> Username: 这里填`root`\n>\n> Password：这里为你安装服务器时的密码，就是之前你使用搬瓦工重装系统后的服务器密码\n\n**如果你忘记了服务器密码怎么办，没有关系，从下面步骤重新获取**\n\n进入到搬瓦工服务器控制面板，先到`Main controls`点击`stop`停掉你的服务器，再点击左侧的`Root password modification`从新获取，获取完成后，别忘了到`Main controls`点击`start`打开你的服务器","slug":"study/study-centenos-ssh","published":1,"updated":"2018-01-30T07:16:20.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd2vh6v3002dfq9mit06mtnd","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一篇文章，我们讲了<a href=\"/2018/01/25/study/study-bwh/\">使用搬瓦工+ShadowsocksX进行科学上网</a>，我们买的是远端服务器，没有用户界面的，只能通过命令行去操作我们的系统，那么如何进入我们的服务器呢</p>\n<a id=\"more\"></a>\n<h3 id=\"SSH连接服务器\"><a href=\"#SSH连接服务器\" class=\"headerlink\" title=\"SSH连接服务器\"></a>SSH连接服务器</h3><p><strong>有二种方式：</strong></p>\n<p><strong>第一种</strong></p>\n<p>点击搬瓦工的<code>KiwiVM Control Panel</code>，进入到服务器控制面板，点击左侧的<code>Roo shell - basic</code>进入服务器</p>\n<p><img src=\"/img/study/command/bwh_kiwivm_command.jpg\" alt=\"bwh_kiwivm_command\"></p>\n<p><strong>第二种</strong></p>\n<p>如果嫌每次都要从浏览器进入比较麻烦，可以选择使用<code>SSH</code>连接我们的服务器</p>\n<p>先下载<code>ssh</code>客户端：<a href=\"http://www.termius.com\" target=\"_blank\" rel=\"external\">http://www.termius.com</a></p>\n<p>下载完成后打开</p>\n<p><img src=\"/img/study/command/termius_connect.jpg\" alt=\"termius_connect\"></p>\n<ol>\n<li>界面上看到<code>ssh user@hostname -p port</code>这行字没，你可以直接使用下面的方式进行连接</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@<span class=\"number\">170.1</span><span class=\"number\">.2</span><span class=\"number\">.3</span> -p <span class=\"number\">8388</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>hostname: 这里我写的是170.1.2.3，你需要填写你的服务器ip</p>\n<p>port: 同理，你需要填写你的服务器端口</p>\n</blockquote>\n<p>点击<code>connect</code>后，会弹出框，要你输入服务器密码，输入正确后进入服务器</p>\n<ol>\n<li>或者你可以点击右下角的<code>+ New Host</code>，输入你的配置信息，点击保存开始连接</li>\n</ol>\n<blockquote>\n<p>Address：服务器的ip地址，类似这样: 170.1.2.3</p>\n<p>Port: 服务器的端口，类似这样: 8388</p>\n<p>Username: 这里填<code>root</code></p>\n<p>Password：这里为你安装服务器时的密码，就是之前你使用搬瓦工重装系统后的服务器密码</p>\n</blockquote>\n<p><strong>如果你忘记了服务器密码怎么办，没有关系，从下面步骤重新获取</strong></p>\n<p>进入到搬瓦工服务器控制面板，先到<code>Main controls</code>点击<code>stop</code>停掉你的服务器，再点击左侧的<code>Root password modification</code>从新获取，获取完成后，别忘了到<code>Main controls</code>点击<code>start</code>打开你的服务器</p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一篇文章，我们讲了<a href=\"/2018/01/25/study/study-bwh/\">使用搬瓦工+ShadowsocksX进行科学上网</a>，我们买的是远端服务器，没有用户界面的，只能通过命令行去操作我们的系统，那么如何进入我们的服务器呢</p>","more":"<h3 id=\"SSH连接服务器\"><a href=\"#SSH连接服务器\" class=\"headerlink\" title=\"SSH连接服务器\"></a>SSH连接服务器</h3><p><strong>有二种方式：</strong></p>\n<p><strong>第一种</strong></p>\n<p>点击搬瓦工的<code>KiwiVM Control Panel</code>，进入到服务器控制面板，点击左侧的<code>Roo shell - basic</code>进入服务器</p>\n<p><img src=\"/img/study/command/bwh_kiwivm_command.jpg\" alt=\"bwh_kiwivm_command\"></p>\n<p><strong>第二种</strong></p>\n<p>如果嫌每次都要从浏览器进入比较麻烦，可以选择使用<code>SSH</code>连接我们的服务器</p>\n<p>先下载<code>ssh</code>客户端：<a href=\"http://www.termius.com\">http://www.termius.com</a></p>\n<p>下载完成后打开</p>\n<p><img src=\"/img/study/command/termius_connect.jpg\" alt=\"termius_connect\"></p>\n<ol>\n<li>界面上看到<code>ssh user@hostname -p port</code>这行字没，你可以直接使用下面的方式进行连接</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@<span class=\"number\">170.1</span><span class=\"number\">.2</span><span class=\"number\">.3</span> -p <span class=\"number\">8388</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>hostname: 这里我写的是170.1.2.3，你需要填写你的服务器ip</p>\n<p>port: 同理，你需要填写你的服务器端口</p>\n</blockquote>\n<p>点击<code>connect</code>后，会弹出框，要你输入服务器密码，输入正确后进入服务器</p>\n<ol>\n<li>或者你可以点击右下角的<code>+ New Host</code>，输入你的配置信息，点击保存开始连接</li>\n</ol>\n<blockquote>\n<p>Address：服务器的ip地址，类似这样: 170.1.2.3</p>\n<p>Port: 服务器的端口，类似这样: 8388</p>\n<p>Username: 这里填<code>root</code></p>\n<p>Password：这里为你安装服务器时的密码，就是之前你使用搬瓦工重装系统后的服务器密码</p>\n</blockquote>\n<p><strong>如果你忘记了服务器密码怎么办，没有关系，从下面步骤重新获取</strong></p>\n<p>进入到搬瓦工服务器控制面板，先到<code>Main controls</code>点击<code>stop</code>停掉你的服务器，再点击左侧的<code>Root password modification</code>从新获取，获取完成后，别忘了到<code>Main controls</code>点击<code>start</code>打开你的服务器</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjd2vh6s50000fq9muyypxqa3","tag_id":"cjd2vh6sc0002fq9mo53has9t","_id":"cjd2vh6sl0006fq9myh04od7w"},{"post_id":"cjd2vh6sh0004fq9m7syjcn9k","tag_id":"cjd2vh6sj0005fq9mdkgq5k3i","_id":"cjd2vh6sl0007fq9mql2zu5o4"},{"post_id":"cjd2vh6tn0008fq9maeg56yjb","tag_id":"cjd2vh6tq000afq9mwpb8m76r","_id":"cjd2vh6tw000ffq9mq0v061kb"},{"post_id":"cjd2vh6to0009fq9mpdckshp7","tag_id":"cjd2vh6tq000afq9mwpb8m76r","_id":"cjd2vh6tz000jfq9merj8dyzc"},{"post_id":"cjd2vh6tr000bfq9mk7sfpz1o","tag_id":"cjd2vh6tq000afq9mwpb8m76r","_id":"cjd2vh6u0000nfq9mxz0li38h"},{"post_id":"cjd2vh6u0000ofq9mit69vcj6","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u4000rfq9md1new8n8"},{"post_id":"cjd2vh6tt000cfq9mlrf7yzeg","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u4000tfq9mxxol6az9"},{"post_id":"cjd2vh6u1000pfq9moyf5dbb4","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u6000wfq9mry80tanx"},{"post_id":"cjd2vh6u4000sfq9m16eouhgt","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u6000yfq9m7ymmgyvn"},{"post_id":"cjd2vh6tu000dfq9mepevtwjw","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u70011fq9ms084aitp"},{"post_id":"cjd2vh6u5000ufq9mpun20euq","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6u80013fq9mpxcrm0ut"},{"post_id":"cjd2vh6tw000gfq9m8pud4v1w","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6ua0016fq9m5xbd1pd0"},{"post_id":"cjd2vh6ty000hfq9m2ox12zev","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6ud0018fq9mpk4cj80e"},{"post_id":"cjd2vh6tz000kfq9m9u2wkggt","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6ug001cfq9m0nul4rxa"},{"post_id":"cjd2vh6tz000lfq9msnunpykz","tag_id":"cjd2vh6u0000mfq9mljd78lig","_id":"cjd2vh6ui001gfq9mxgmtbll8"},{"post_id":"cjd2vh6u6000xfq9mzg1bkvxl","tag_id":"cjd2vh6uh001efq9mgxfpwkhb","_id":"cjd2vh6uo001nfq9mm7lbwljc"},{"post_id":"cjd2vh6u6000xfq9mzg1bkvxl","tag_id":"cjd2vh6uj001ifq9muxsf6yd0","_id":"cjd2vh6up001pfq9myygjxr9e"},{"post_id":"cjd2vh6u6000zfq9mcr4q62dv","tag_id":"cjd2vh6uh001efq9mgxfpwkhb","_id":"cjd2vh6ut001sfq9mcnx01x04"},{"post_id":"cjd2vh6u70012fq9mlo41ruz4","tag_id":"cjd2vh6uh001efq9mgxfpwkhb","_id":"cjd2vh6uw001wfq9myad6qfrf"},{"post_id":"cjd2vh6u80014fq9maltck9ul","tag_id":"cjd2vh6uh001efq9mgxfpwkhb","_id":"cjd2vh6ux0020fq9mtkfwg19n"},{"post_id":"cjd2vh6ua0017fq9mx5gloc4t","tag_id":"cjd2vh6uh001efq9mgxfpwkhb","_id":"cjd2vh6uz0024fq9mckbr46qy"},{"post_id":"cjd2vh6ud0019fq9mbrvh5p9l","tag_id":"cjd2vh6uy0022fq9mn9x9y2g3","_id":"cjd2vh6v10028fq9mqpmm36fd"},{"post_id":"cjd2vh6ue001bfq9m88zvgpbc","tag_id":"cjd2vh6uy0022fq9mn9x9y2g3","_id":"cjd2vh6v3002cfq9mlu1xt529"},{"post_id":"cjd2vh6ug001dfq9m5jzghafk","tag_id":"cjd2vh6uy0022fq9mn9x9y2g3","_id":"cjd2vh6v4002ffq9mh8tct22b"},{"post_id":"cjd2vh6uh001ffq9mxsm5jkek","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v4002hfq9m5hmxv532"},{"post_id":"cjd2vh6ui001hfq9m9kymwtg4","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v5002jfq9mtchbk00r"},{"post_id":"cjd2vh6uj001jfq9mbtp1cq9u","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v5002lfq9mznua36r5"},{"post_id":"cjd2vh6uj001kfq9mbi97zis7","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v7002nfq9mbga6n426"},{"post_id":"cjd2vh6ul001mfq9mhumy1o8v","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v7002pfq9mrf5mvixi"},{"post_id":"cjd2vh6uo001ofq9muiteuxrz","tag_id":"cjd2vh6v4002efq9mi8javmxl","_id":"cjd2vh6v7002rfq9m3gzsneti"},{"post_id":"cjd2vh6uq001rfq9mik68mv6p","tag_id":"cjd2vh6v7002qfq9mno5ywiew","_id":"cjd2vh6v9002ufq9m6kho8wvw"},{"post_id":"cjd2vh6uq001rfq9mik68mv6p","tag_id":"cjd2vh6v7002sfq9muh6yudkr","_id":"cjd2vh6v9002vfq9mvn0hcose"},{"post_id":"cjd2vh6uu001tfq9mzh9q4yvk","tag_id":"cjd2vh6v7002qfq9mno5ywiew","_id":"cjd2vh6va002yfq9mljjyfrks"},{"post_id":"cjd2vh6uu001tfq9mzh9q4yvk","tag_id":"cjd2vh6v9002wfq9mv5zu70ho","_id":"cjd2vh6va002zfq9mx7l2d296"},{"post_id":"cjd2vh6uv001vfq9mjd287tfp","tag_id":"cjd2vh6va002xfq9mfj75a3w9","_id":"cjd2vh6va0031fq9mt1uhciex"},{"post_id":"cjd2vh6uw001xfq9mkyhnwfno","tag_id":"cjd2vh6va0030fq9m25jze6fh","_id":"cjd2vh6vb0033fq9m7tehdiuf"},{"post_id":"cjd2vh6ux001zfq9mmpd3brxa","tag_id":"cjd2vh6va0030fq9m25jze6fh","_id":"cjd2vh6vb0035fq9mc4zs0jsz"},{"post_id":"cjd2vh6uz0025fq9mf21asaj1","tag_id":"cjd2vh6vb0034fq9mvee3j91r","_id":"cjd2vh6vc0037fq9me8aex6ul"},{"post_id":"cjd2vh6v00026fq9mts05fm33","tag_id":"cjd2vh6vb0034fq9mvee3j91r","_id":"cjd2vh6vd0039fq9mgjrjy298"},{"post_id":"cjd2vh6v10029fq9mmglg9f8t","tag_id":"cjd2vh6vb0034fq9mvee3j91r","_id":"cjd2vh6vd003bfq9mrtvwnram"},{"post_id":"cjd2vh6v2002afq9mz5fpv683","tag_id":"cjd2vh6vb0034fq9mvee3j91r","_id":"cjd2vh6ve003dfq9m9pvtj0k0"},{"post_id":"cjd2vh6v3002dfq9mit06mtnd","tag_id":"cjd2vh6vb0034fq9mvee3j91r","_id":"cjd2vh6ve003efq9m190ctgoq"}],"Tag":[{"name":"me","_id":"cjd2vh6sc0002fq9mo53has9t"},{"name":"apple","_id":"cjd2vh6sj0005fq9mdkgq5k3i"},{"name":"blog","_id":"cjd2vh6tq000afq9mwpb8m76r"},{"name":"android","_id":"cjd2vh6u0000mfq9mljd78lig"},{"name":"ios","_id":"cjd2vh6uh001efq9mgxfpwkhb"},{"name":"stanford","_id":"cjd2vh6uj001ifq9muxsf6yd0"},{"name":"hole","_id":"cjd2vh6uy0022fq9mn9x9y2g3"},{"name":"fe","_id":"cjd2vh6v4002efq9mi8javmxl"},{"name":"java","_id":"cjd2vh6v7002qfq9mno5ywiew"},{"name":"lambda","_id":"cjd2vh6v7002sfq9muh6yudkr"},{"name":"stream","_id":"cjd2vh6v9002wfq9mv5zu70ho"},{"name":"life","_id":"cjd2vh6va002xfq9mfj75a3w9"},{"name":"read","_id":"cjd2vh6va0030fq9m25jze6fh"},{"name":"study","_id":"cjd2vh6vb0034fq9mvee3j91r"}]}}